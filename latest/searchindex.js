Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 107, 148, 188, 192, 239, 247, 282, 284, 290, 296], "mask": [0, 12, 54, 80, 109, 133, 284, 299], "regist": [1, 14, 21, 28, 30, 35, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 168, 181, 203, 206, 225, 227, 232, 243, 244, 266, 282, 293, 296], "algorithm_registri": 1, "algorithm_typ": 1, "locat": [1, 28, 69, 191, 196, 232, 251, 258, 262, 265, 273, 287, 291, 295, 298], "sourc": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 202, 205, 241, 244, 258, 260, 262, 263, 265, 285], "decor": [1, 28, 35, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 184, 202, 203, 206, 296], "all": [1, 3, 6, 7, 14, 21, 28, 29, 35, 38, 44, 52, 56, 63, 69, 74, 77, 80, 82, 84, 91, 98, 102, 103, 107, 113, 122, 125, 130, 133, 135, 137, 139, 148, 162, 168, 172, 176, 184, 190, 193, 196, 197, 198, 200, 201, 205, 206, 207, 208, 225, 226, 227, 232, 236, 240, 244, 248, 256, 259, 260, 263, 264, 265, 266, 267, 270, 271, 273, 274, 278, 279, 280, 283, 284, 285, 287, 289, 290, 293, 295, 296], "subclass": [1, 14, 21, 28, 35, 49, 53, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 206], "paramet": [1, 6, 7, 10, 11, 12, 14, 21, 24, 28, 30, 35, 42, 43, 53, 54, 56, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 174, 175, 176, 179, 180, 181, 183, 184, 188, 190, 191, 192, 195, 196, 198, 202, 207, 226, 227, 230, 232, 239, 243, 244, 247, 259, 265, 266, 267, 268, 273, 278, 279, 284, 287, 288, 290, 292, 293, 295, 296, 298], "cl": [1, 14, 21, 28, 30, 35, 56, 63, 69, 91, 98, 102, 107, 109, 111, 122, 137, 148, 162, 184, 225], "The": [1, 6, 7, 10, 11, 12, 13, 14, 15, 16, 20, 21, 28, 30, 33, 35, 38, 42, 43, 44, 54, 55, 56, 57, 58, 62, 63, 69, 70, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 126, 128, 130, 131, 132, 134, 135, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 168, 169, 170, 172, 178, 179, 183, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 206, 207, 208, 209, 211, 215, 218, 221, 223, 224, 225, 226, 227, 229, 230, 232, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 250, 251, 253, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "str": [1, 7, 12, 13, 14, 21, 24, 28, 30, 34, 35, 54, 55, 56, 63, 66, 69, 73, 74, 77, 78, 80, 82, 84, 91, 102, 125, 128, 130, 131, 133, 135, 137, 165, 168, 172, 175, 176, 179, 181, 184, 185, 192, 193, 196, 225, 226, 227, 243, 276, 286, 294, 295], "registr": [1, 14, 21, 28, 56, 63, 69, 102], "name": [1, 6, 7, 12, 13, 14, 17, 21, 26, 28, 29, 33, 36, 37, 54, 55, 56, 59, 63, 69, 72, 73, 74, 79, 84, 102, 107, 109, 111, 126, 128, 132, 137, 142, 146, 148, 150, 166, 168, 170, 172, 174, 175, 176, 181, 184, 188, 191, 192, 194, 201, 202, 208, 225, 227, 229, 232, 234, 236, 241, 243, 244, 246, 247, 251, 258, 262, 266, 267, 273, 284, 287, 291, 292, 294, 296, 298, 299], "call": [1, 80, 109, 133, 196, 198, 202, 203, 206, 226, 238, 254, 256, 266, 284, 287, 293, 294, 295], "return": [1, 6, 10, 11, 14, 21, 24, 28, 29, 30, 35, 42, 43, 56, 63, 66, 69, 74, 77, 78, 80, 81, 82, 84, 90, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 176, 181, 183, 184, 189, 193, 194, 197, 198, 202, 203, 207, 208, 226, 227, 232, 243, 246, 278, 279, 280, 282, 284, 287, 290, 293, 294, 296], "type": [1, 7, 12, 14, 21, 28, 30, 35, 52, 54, 56, 63, 69, 74, 77, 78, 80, 84, 91, 98, 102, 107, 109, 111, 116, 122, 126, 128, 130, 131, 133, 137, 146, 148, 154, 155, 162, 166, 168, 176, 183, 184, 188, 189, 190, 191, 192, 193, 194, 196, 206, 207, 227, 229, 232, 234, 236, 239, 244, 245, 247, 266, 268, 273, 274, 278, 279, 287, 288, 290, 292, 295, 296, 297, 298], "build": [1, 2, 4, 5, 87, 90, 141, 143, 145, 146, 147, 196, 206, 207, 208, 240, 246, 258, 260, 262, 263, 266, 285, 296], "dict": [1, 6, 7, 10, 11, 29, 35, 42, 43, 53, 72, 74, 79, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 119, 125, 128, 132, 133, 134, 135, 137, 138, 146, 150, 165, 168, 169, 170, 172, 174, 176, 183, 184, 192, 193, 194, 202, 207, 225, 234, 243, 284, 286, 287, 293, 294, 296], "algorithmschedul": 1, "conf": [1, 6, 7, 10, 11, 29, 42, 43, 86, 93, 94, 96, 97, 98, 99, 104, 116, 119, 121, 122, 126, 138, 148, 150, 151, 154, 155, 159, 161, 162, 166, 169, 202, 203, 205, 208, 223, 230, 237, 238, 244, 245, 246, 267, 269, 270, 283, 287, 288, 289, 290, 292, 293, 296], "control": [1, 7, 202, 244, 271, 284, 296], "differ": [1, 5, 7, 14, 28, 30, 47, 56, 69, 75, 84, 90, 92, 101, 112, 137, 146, 148, 178, 192, 196, 198, 200, 202, 203, 207, 226, 227, 229, 230, 232, 233, 238, 239, 243, 244, 246, 258, 262, 267, 270, 273, 282, 284, 287, 290, 293, 294, 295, 296], "phase": [1, 196, 198, 203, 244, 284, 287, 289, 296], "base": [1, 7, 12, 14, 21, 28, 38, 44, 47, 52, 54, 56, 63, 69, 84, 90, 92, 98, 99, 102, 104, 109, 119, 122, 126, 137, 139, 146, 147, 148, 159, 162, 166, 187, 189, 190, 192, 193, 197, 198, 203, 205, 206, 207, 208, 225, 227, 231, 232, 236, 244, 245, 253, 254, 256, 265, 268, 273, 276, 279, 280, 284, 285, 287, 290, 292, 293, 294, 296, 299], "fastbiascorrect": [2, 5], "threshold": [2, 170, 178, 243], "2": [2, 4, 6, 7, 13, 29, 55, 80, 82, 84, 109, 116, 133, 135, 137, 148, 154, 184, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 202, 205, 206, 224, 226, 227, 229, 230, 236, 239, 240, 241, 242, 243, 245, 247, 269, 275, 276, 278, 279, 280, 282, 284, 285, 287, 288, 290, 291, 292, 293, 295, 296, 297], "0": [2, 4, 7, 12, 15, 16, 19, 24, 28, 30, 31, 44, 46, 54, 57, 58, 61, 66, 69, 74, 75, 84, 91, 99, 104, 112, 137, 148, 150, 155, 176, 179, 188, 189, 190, 192, 195, 197, 198, 202, 205, 225, 226, 227, 230, 232, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 251, 253, 258, 262, 268, 278, 279, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298], "channel_axi": [2, 5], "1": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 24, 28, 29, 30, 31, 44, 46, 53, 54, 55, 57, 58, 61, 62, 66, 69, 75, 80, 81, 82, 84, 99, 104, 109, 112, 113, 133, 134, 135, 137, 148, 150, 168, 172, 179, 184, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 205, 206, 208, 224, 226, 227, 229, 230, 234, 236, 237, 240, 242, 243, 245, 247, 249, 251, 267, 268, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298], "fetch": [3, 47, 207, 227, 278, 279, 280], "file": [3, 7, 10, 11, 12, 13, 14, 17, 27, 28, 34, 37, 42, 43, 54, 55, 56, 59, 68, 69, 70, 75, 80, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 133, 138, 148, 150, 183, 184, 192, 201, 203, 206, 207, 208, 232, 235, 238, 241, 243, 244, 246, 251, 260, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 278, 279, 280, 282, 286, 287, 290, 294, 295], "init": [3, 227, 243, 296], "fast_bias_correct": [3, 7, 287], "smooth_quant": [3, 7, 225, 287, 293], "weight_correct": [3, 7, 287], "smoothquant": [4, 190, 192, 193, 195, 198, 205, 242, 285, 290, 297], "alpha": [4, 198, 225, 287, 296], "5": [4, 7, 16, 24, 30, 58, 66, 84, 137, 150, 190, 192, 195, 198, 206, 227, 234, 236, 240, 243, 244, 270, 275, 278, 279, 284, 286, 287, 290, 293, 295, 296, 298, 299], "fake": [4, 168, 192, 198, 244, 287, 290, 293], "input": [4, 7, 10, 11, 12, 13, 14, 16, 24, 27, 28, 33, 42, 43, 54, 55, 56, 58, 66, 68, 69, 72, 73, 74, 137, 138, 142, 146, 150, 169, 174, 175, 176, 179, 181, 183, 184, 187, 191, 192, 193, 198, 203, 206, 207, 223, 224, 226, 227, 229, 230, 231, 232, 234, 236, 238, 243, 244, 245, 246, 248, 253, 284, 286, 287, 290, 293, 294, 295, 298], "channel": [4, 5, 7, 24, 28, 66, 69, 107, 179, 188, 190, 192, 205, 206, 208, 239, 240, 247, 248, 250, 255, 270, 284, 290, 295, 299], "quantiz": [4, 6, 7, 10, 11, 24, 31, 38, 42, 43, 66, 74, 75, 76, 86, 113, 119, 125, 129, 155, 157, 159, 168, 169, 170, 176, 178, 179, 183, 184, 189, 195, 197, 206, 213, 225, 226, 227, 232, 233, 236, 238, 239, 243, 246, 248, 253, 255, 256, 259, 272, 274, 275, 277, 283, 285, 291, 294, 295, 296, 297, 298], "more": [4, 28, 69, 107, 188, 189, 190, 192, 193, 196, 198, 203, 204, 205, 207, 224, 225, 227, 230, 232, 234, 237, 239, 240, 242, 244, 245, 247, 248, 256, 260, 263, 268, 273, 282, 283, 284, 289, 290, 293, 296, 297, 299], "detail": [4, 28, 69, 184, 185, 189, 190, 193, 194, 195, 196, 198, 200, 205, 207, 208, 224, 225, 230, 236, 237, 238, 242, 243, 244, 245, 248, 256, 265, 273, 274, 284, 290, 291, 292, 293, 294, 296, 297], "pleas": [4, 7, 12, 13, 14, 17, 54, 55, 56, 59, 107, 109, 110, 137, 150, 190, 191, 192, 193, 194, 195, 198, 202, 203, 204, 205, 206, 223, 224, 227, 231, 232, 234, 240, 242, 243, 245, 248, 249, 253, 256, 272, 273, 274, 284, 287, 289, 290, 291, 292, 293, 296, 297], "refer": [4, 7, 12, 54, 77, 78, 84, 107, 109, 110, 130, 131, 137, 150, 190, 191, 193, 194, 195, 196, 202, 205, 206, 207, 223, 226, 227, 229, 231, 232, 234, 238, 240, 241, 243, 244, 245, 248, 253, 256, 267, 268, 270, 272, 273, 274, 282, 286, 288, 291, 295, 296], "accur": [4, 191, 192, 198, 284, 290, 293], "effici": [4, 191, 192, 198, 203, 205, 224, 226, 230, 248, 273, 283, 284, 285, 290, 293, 296], "post": [4, 7, 10, 11, 42, 43, 150, 188, 190, 191, 192, 193, 195, 197, 198, 200, 205, 206, 207, 229, 231, 232, 234, 239, 240, 247, 248, 254, 265, 275, 284, 285, 288, 290, 293, 294, 296], "train": [4, 7, 10, 11, 12, 14, 28, 38, 42, 43, 54, 56, 69, 70, 86, 109, 129, 150, 172, 188, 189, 190, 191, 192, 193, 195, 197, 203, 205, 206, 207, 213, 227, 229, 230, 231, 234, 239, 245, 247, 248, 254, 265, 270, 278, 283, 285, 288, 290, 292, 293, 296, 298], "larg": [4, 188, 190, 192, 193, 195, 196, 198, 205, 226, 230, 244, 247, 285, 288, 290, 293, 299], "languag": [4, 77, 130, 188, 190, 192, 193, 195, 196, 198, 200, 205, 234, 247, 269, 285, 288, 290, 293], "model": [4, 6, 7, 10, 11, 12, 14, 28, 29, 32, 33, 42, 43, 50, 53, 54, 56, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 90, 93, 94, 96, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 116, 119, 121, 122, 129, 137, 138, 148, 150, 151, 154, 155, 159, 161, 162, 168, 169, 174, 175, 176, 179, 181, 183, 184, 186, 187, 188, 189, 192, 193, 194, 195, 196, 198, 201, 202, 203, 205, 206, 208, 213, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 238, 239, 241, 243, 245, 248, 253, 255, 256, 259, 265, 267, 272, 274, 275, 276, 277, 282, 283, 285, 287, 291, 292, 294, 295, 296, 297, 298], "spiq": [4, 198, 293], "data": [4, 7, 10, 11, 29, 31, 42, 43, 74, 76, 116, 126, 128, 129, 138, 150, 154, 166, 168, 169, 172, 176, 181, 184, 187, 188, 189, 191, 192, 193, 196, 198, 205, 206, 224, 226, 227, 232, 236, 237, 240, 243, 244, 245, 247, 267, 268, 270, 273, 278, 279, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297], "free": [4, 10, 11, 42, 43, 150, 190, 195, 198, 200, 254, 259, 267, 275, 282, 292, 293], "per": [4, 6, 7, 29, 178, 188, 190, 192, 206, 208, 226, 247, 273, 284, 289, 290, 299], "static": [4, 7, 74, 126, 150, 166, 176, 192, 193, 206, 207, 208, 229, 234, 239, 244, 248, 253, 254, 255, 256, 259, 265, 268, 276, 278, 279, 280, 288, 293, 296, 299], "For": [4, 7, 14, 28, 56, 69, 81, 82, 84, 107, 110, 134, 135, 137, 138, 150, 190, 193, 194, 195, 198, 200, 202, 204, 206, 208, 230, 231, 232, 234, 236, 239, 248, 250, 251, 253, 256, 267, 268, 273, 284, 289, 290, 293, 294, 296, 298, 299], "torch": [4, 7, 74, 138, 150, 176, 179, 183, 187, 188, 189, 190, 191, 192, 197, 198, 202, 205, 208, 209, 230, 232, 234, 244, 245, 246, 247, 248, 253, 256, 268, 287, 290, 293, 294], "backend": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 34, 35, 40, 41, 45, 46, 48, 50, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 120, 138, 139, 140, 142, 160, 189, 192, 193, 202, 208, 229, 232, 238, 239, 244, 245, 254, 273, 278, 279, 280, 286, 290, 295, 296, 298], "we": [4, 5, 6, 7, 29, 31, 53, 77, 80, 130, 133, 157, 187, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 206, 207, 208, 225, 226, 229, 232, 234, 236, 242, 243, 244, 252, 253, 256, 260, 263, 265, 266, 268, 271, 278, 279, 280, 282, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297], "onli": [4, 5, 6, 7, 12, 29, 31, 35, 54, 74, 86, 107, 109, 120, 150, 160, 168, 176, 184, 189, 193, 197, 206, 207, 208, 223, 224, 225, 226, 229, 230, 232, 235, 236, 242, 244, 245, 253, 266, 284, 285, 286, 287, 288, 293, 294, 296, 297, 298], "handl": [4, 180, 202, 204, 225, 226, 273, 293], "layer": [4, 7, 30, 37, 107, 108, 170, 172, 184, 190, 191, 192, 198, 205, 206, 207, 208, 231, 239, 268, 284, 290, 291, 297], "whose": [4, 108, 146, 238, 293, 296], "smooth": [4, 7, 125, 193, 225, 284, 296], "scale": [4, 5, 24, 28, 66, 69, 187, 188, 190, 191, 192, 196, 198, 247, 287, 290, 292, 293, 295, 296], "could": [4, 10, 11, 14, 42, 43, 56, 113, 138, 150, 169, 189, 191, 192, 194, 196, 198, 200, 202, 231, 244, 283, 284, 287, 290, 293, 297], "absorb": [4, 192, 290], "support": [4, 7, 10, 11, 12, 14, 21, 24, 28, 30, 31, 32, 35, 42, 43, 53, 54, 56, 63, 66, 69, 76, 84, 86, 91, 107, 109, 113, 120, 126, 129, 137, 138, 142, 148, 150, 160, 166, 169, 172, 178, 179, 184, 186, 187, 191, 194, 197, 198, 205, 207, 225, 242, 244, 248, 253, 256, 259, 265, 272, 273, 276, 285, 289, 292, 296, 297], "other": [4, 53, 82, 135, 146, 188, 193, 196, 198, 200, 202, 207, 208, 225, 229, 236, 239, 241, 244, 246, 247, 268, 282, 284, 287, 293, 295, 296, 299], "later": [4, 187, 189, 225, 272, 273, 294], "onnx": [4, 7, 50, 72, 73, 74, 138, 145, 174, 175, 176, 182, 201, 205, 206, 207, 209, 226, 229, 233, 234, 236, 237, 239, 245, 246, 247, 250, 255, 256, 268, 285, 286, 290, 291, 293, 296], "insert": [4, 191, 192, 193, 195, 198, 202, 207, 226, 239, 244, 248, 284, 287, 289, 290, 293, 294], "mul": [4, 192, 234, 290, 293], "befor": [4, 7, 12, 54, 107, 109, 111, 192, 198, 201, 208, 226, 227, 230, 231, 232, 235, 236, 244, 260, 263, 269, 270, 287, 290, 292, 294, 296], "conv": [4, 7, 202, 207, 208, 244, 284, 286, 287, 296], "linear": [4, 7, 107, 190, 191, 192, 198, 202, 230, 234, 244, 284, 290, 293, 296], "op": [4, 7, 74, 119, 126, 127, 155, 157, 159, 166, 167, 168, 174, 176, 178, 184, 189, 190, 198, 205, 206, 207, 208, 229, 236, 244, 245, 269, 270, 284, 287, 289, 291, 293, 294, 296, 298], "fuse": [4, 202, 293, 294], "kernel": [4, 7, 192, 206, 207, 296], "futur": [4, 10, 11, 31, 42, 43, 193, 239, 242, 244, 256, 278, 279, 280, 297], "weightcorrect": 5, "ep": [5, 245], "1e": [5, 198, 293, 298], "05": [5, 7, 84, 137, 243, 293, 299], "correct": [5, 7, 80, 81, 82, 84, 108, 133, 134, 135, 137, 200, 248], "int8": [5, 6, 7, 24, 66, 72, 73, 74, 126, 128, 166, 168, 174, 175, 176, 183, 184, 188, 190, 192, 193, 194, 196, 198, 201, 202, 205, 206, 207, 208, 223, 227, 231, 236, 242, 244, 245, 247, 250, 253, 255, 256, 259, 265, 268, 270, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298], "weight": [5, 7, 74, 107, 109, 126, 137, 150, 157, 166, 168, 176, 184, 185, 187, 190, 191, 193, 194, 195, 196, 197, 206, 207, 208, 224, 229, 231, 236, 238, 242, 244, 267, 278, 282, 284, 285, 286, 287, 288, 293, 294, 296, 297, 298], "distribut": [5, 7, 31, 44, 46, 47, 52, 178, 192, 196, 198, 205, 207, 226, 230, 240, 260, 263, 267, 270, 278, 285, 287, 290, 291, 293, 297, 299], "close": [5, 224, 274], "fp32": [5, 7, 10, 11, 42, 43, 73, 74, 84, 119, 126, 137, 155, 159, 166, 172, 175, 176, 179, 183, 184, 189, 190, 191, 192, 194, 196, 198, 201, 206, 208, 229, 236, 237, 242, 243, 244, 245, 255, 267, 268, 269, 270, 286, 287, 289, 290, 291, 292, 293, 294, 296, 298, 299], "r": [5, 190, 191, 192, 194, 196, 198, 229, 240, 266, 267, 269, 270, 272, 273, 287, 299], "w_int8": 5, "u": [5, 248, 267, 272], "w_fp32": 5, "i": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 24, 28, 29, 31, 35, 37, 38, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 69, 77, 80, 82, 84, 86, 91, 99, 104, 108, 109, 113, 120, 130, 133, 135, 137, 138, 148, 150, 155, 160, 168, 169, 179, 183, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 215, 218, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299], "varianc": [5, 229], "ratio": [5, 7, 24, 28, 66, 69, 109, 227, 242, 244, 268, 284, 295, 299], "between": [5, 7, 28, 69, 81, 84, 134, 137, 184, 188, 192, 193, 196, 198, 202, 206, 207, 208, 224, 229, 230, 239, 243, 244, 247, 256, 287, 290, 291, 292, 293, 295, 296], "wise": [5, 7, 116, 119, 154, 155, 159, 192, 205, 207, 239, 270, 284, 290, 293, 294, 296, 297, 298], "": [5, 7, 14, 27, 28, 29, 31, 33, 53, 56, 68, 69, 82, 107, 109, 135, 137, 138, 142, 150, 181, 184, 187, 189, 190, 191, 192, 194, 196, 198, 200, 201, 203, 207, 208, 225, 229, 230, 232, 234, 236, 239, 244, 245, 253, 256, 258, 262, 265, 268, 270, 273, 283, 284, 285, 286, 287, 290, 291, 292, 293, 296, 297, 298, 299], "equal": [5, 184, 188, 247, 284, 290], "minim": [5, 116, 154, 191, 192, 196, 198, 207, 208, 224, 230, 233, 243, 244, 258, 262, 284, 287, 296], "round": [5, 187, 192, 193, 198, 205, 285, 287, 290, 293], "scale_c": 5, "shift": [5, 24, 66, 266, 295], "notic": [5, 29, 189, 192, 241, 245, 268, 291], "can": [5, 7, 10, 11, 14, 28, 29, 31, 42, 43, 53, 56, 69, 80, 82, 84, 107, 109, 111, 133, 135, 137, 138, 148, 150, 169, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 206, 207, 208, 223, 225, 226, 227, 229, 230, 231, 232, 234, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 268, 270, 271, 272, 273, 275, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299], "chang": [5, 7, 109, 111, 157, 184, 193, 201, 207, 226, 232, 235, 241, 244, 248, 258, 259, 262, 265, 271, 284, 294, 295, 296], "first": [5, 7, 12, 54, 80, 126, 133, 155, 166, 184, 188, 189, 192, 198, 202, 203, 205, 206, 207, 208, 227, 229, 240, 245, 247, 250, 259, 260, 263, 266, 268, 269, 270, 286, 287, 289, 290, 292, 293, 294, 296, 298], "an": [5, 7, 14, 28, 32, 37, 47, 52, 56, 69, 76, 77, 81, 82, 90, 91, 113, 129, 130, 134, 135, 138, 150, 169, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 205, 206, 208, 224, 226, 227, 228, 229, 234, 242, 243, 244, 245, 247, 248, 252, 253, 256, 265, 268, 269, 270, 273, 276, 282, 284, 285, 287, 290, 292, 293, 294, 295, 296], "empir": 5, "solut": [5, 190, 192, 195, 198, 205, 206, 207, 235, 250, 254, 259, 285, 290, 291, 293, 296, 297], "make": [5, 52, 107, 109, 111, 184, 190, 192, 195, 198, 200, 206, 207, 223, 225, 226, 236, 243, 244, 253, 258, 262, 265, 267, 284, 287, 288, 289, 290, 292, 293, 296], "thi": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 31, 37, 38, 42, 43, 53, 54, 55, 56, 57, 58, 59, 61, 69, 77, 80, 81, 82, 84, 93, 94, 96, 97, 98, 99, 104, 107, 109, 111, 112, 113, 116, 119, 130, 133, 134, 135, 137, 138, 148, 150, 154, 159, 168, 169, 183, 184, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 207, 208, 224, 225, 226, 227, 230, 231, 232, 234, 235, 236, 239, 241, 242, 243, 244, 245, 246, 248, 250, 251, 253, 254, 256, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 278, 279, 280, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297], "don": [5, 7, 190, 191, 202, 271, 284, 296], "t": [5, 7, 28, 31, 69, 82, 135, 189, 190, 191, 196, 202, 206, 225, 229, 230, 232, 244, 245, 266, 271, 284, 287, 290, 296, 298], "min": [5, 7, 184, 188, 192, 196, 198, 229, 247, 268, 270, 284, 287, 290, 293, 295, 296], "max": [5, 7, 28, 69, 81, 82, 116, 134, 135, 154, 184, 188, 192, 196, 198, 205, 229, 240, 244, 247, 268, 270, 284, 287, 290, 293, 295, 296], "valu": [5, 6, 7, 10, 11, 12, 15, 16, 24, 28, 29, 42, 43, 54, 57, 58, 66, 69, 80, 84, 108, 116, 119, 126, 133, 137, 138, 150, 154, 159, 166, 168, 169, 170, 172, 184, 187, 188, 189, 190, 192, 195, 196, 198, 202, 207, 208, 224, 227, 229, 236, 243, 244, 245, 247, 251, 268, 270, 276, 282, 284, 286, 287, 290, 291, 293, 295, 296, 298], "us": [6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 35, 42, 43, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 73, 74, 75, 77, 78, 80, 84, 85, 86, 91, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 122, 125, 126, 130, 131, 133, 137, 148, 150, 154, 157, 159, 162, 166, 168, 169, 170, 171, 172, 175, 176, 177, 179, 184, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 223, 224, 225, 227, 229, 230, 231, 232, 234, 236, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 258, 260, 262, 263, 265, 267, 268, 269, 270, 271, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299], "evalu": [6, 10, 11, 12, 29, 42, 43, 54, 70, 77, 80, 81, 82, 84, 86, 130, 133, 134, 135, 137, 138, 148, 150, 169, 172, 193, 195, 196, 197, 198, 203, 206, 207, 225, 227, 230, 231, 238, 239, 242, 243, 244, 245, 248, 254, 256, 259, 265, 282, 284, 287, 292, 293, 294, 296, 298], "perform": [6, 7, 12, 24, 29, 54, 66, 75, 99, 104, 112, 119, 137, 148, 150, 155, 159, 187, 189, 191, 192, 194, 196, 197, 198, 201, 202, 203, 206, 207, 223, 227, 228, 229, 231, 233, 234, 239, 240, 243, 244, 245, 246, 248, 250, 254, 256, 259, 265, 271, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 296, 298, 299], "set_env_var": [6, 29], "env_var": [6, 29], "overwrite_exist": [6, 29], "fals": [6, 7, 12, 14, 24, 28, 29, 30, 31, 37, 44, 46, 54, 56, 66, 69, 80, 84, 133, 137, 148, 150, 172, 179, 183, 184, 190, 192, 194, 196, 197, 206, 207, 226, 227, 236, 243, 244, 258, 262, 268, 276, 279, 280, 286, 287, 290, 293, 294, 295, 296, 298], "set": [6, 7, 10, 11, 12, 14, 17, 28, 29, 34, 35, 42, 43, 44, 54, 56, 59, 69, 80, 86, 99, 104, 108, 113, 133, 137, 138, 146, 150, 169, 181, 184, 189, 190, 192, 193, 194, 195, 197, 198, 200, 203, 205, 207, 223, 226, 227, 230, 232, 234, 236, 238, 239, 243, 244, 245, 248, 250, 252, 266, 267, 268, 269, 270, 271, 275, 278, 284, 286, 287, 290, 292, 293, 296, 298], "specifi": [6, 7, 10, 11, 28, 29, 42, 43, 69, 75, 80, 84, 86, 87, 90, 99, 104, 112, 113, 133, 137, 138, 150, 169, 183, 184, 198, 207, 208, 232, 236, 243, 244, 253, 267, 273, 277, 278, 279, 280, 282, 284, 286, 290, 295, 296, 298], "environ": [6, 29, 193, 200, 205, 223, 258, 262, 265, 273, 276, 278, 279, 280, 296], "variabl": [6, 7, 14, 29, 56, 116, 154, 168, 284, 296], "new": [6, 14, 28, 29, 44, 56, 69, 108, 148, 189, 190, 191, 192, 198, 201, 207, 232, 244, 245, 259, 265, 266, 267, 268, 274, 275, 278, 279, 284, 285, 287, 290, 291, 292, 295, 297, 298], "env": [6, 29, 235, 278, 279, 280], "two": [6, 14, 19, 29, 56, 61, 80, 107, 111, 113, 120, 133, 160, 184, 188, 189, 191, 192, 195, 197, 198, 201, 202, 203, 225, 226, 227, 230, 232, 234, 236, 244, 245, 247, 272, 273, 275, 284, 287, 289, 290, 292, 293, 296, 298], "case": [6, 7, 27, 28, 29, 53, 68, 69, 75, 99, 104, 112, 148, 192, 196, 198, 208, 225, 226, 230, 231, 232, 236, 238, 243, 249, 253, 265, 266, 267, 270, 276, 279, 280, 282, 284, 285, 287, 290, 291, 293, 295, 297, 298, 299], "exist": [6, 29, 146, 184, 189, 193, 234, 243, 252, 296], "alreadi": [6, 14, 27, 29, 56, 68, 189, 193, 206, 227, 239, 260, 263, 267, 276, 296], "param": [6, 29, 35, 44, 84, 116, 137, 154, 184, 206, 246, 296], "true": [6, 7, 12, 14, 15, 27, 28, 29, 52, 54, 56, 57, 68, 69, 74, 78, 84, 102, 125, 131, 137, 148, 150, 165, 172, 176, 179, 183, 184, 187, 190, 191, 192, 193, 194, 196, 197, 198, 205, 207, 226, 227, 229, 232, 236, 243, 244, 248, 251, 252, 267, 268, 269, 270, 276, 278, 286, 287, 288, 290, 293, 294, 295, 296, 298], "set_all_env_var": [6, 29], "configur": [6, 7, 10, 11, 14, 17, 29, 34, 42, 43, 56, 59, 70, 74, 75, 86, 87, 88, 90, 99, 104, 108, 112, 113, 119, 137, 138, 148, 150, 159, 168, 169, 171, 172, 176, 182, 183, 197, 202, 203, 206, 207, 227, 229, 244, 252, 266, 273, 278, 279, 280, 282, 284, 287, 290, 291, 293, 295, 296, 299], "neural": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 99, 104, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 157, 158, 164, 173, 181, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 206, 207, 208, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 249, 250, 253, 255, 256, 258, 260, 262, 263, 264, 276, 282, 283, 285, 287, 290, 291, 293, 294, 295, 296, 298, 299], "compressor": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 158, 164, 173, 181, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 203, 206, 207, 208, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 253, 255, 256, 258, 260, 262, 263, 264, 267, 268, 269, 270, 272, 273, 280, 282, 283, 284, 285, 287, 290, 291, 293, 294, 295, 296, 297, 298, 299], "physic": [6, 29, 200, 223, 273], "core": [6, 7, 29, 201, 223, 241, 258, 262, 273, 299], "get_architectur": [6, 29], "get": [6, 7, 28, 29, 35, 37, 47, 69, 74, 107, 109, 111, 119, 126, 128, 137, 146, 150, 159, 166, 168, 172, 176, 179, 181, 184, 190, 193, 198, 207, 224, 235, 239, 240, 242, 244, 251, 268, 270, 278, 279, 285, 290, 293, 296, 297, 300], "architectur": [6, 29, 87, 90, 189, 192, 198, 205, 223, 230, 244, 272, 284, 285, 290, 297], "system": [6, 29, 184, 188, 223, 247, 251, 284, 299], "get_threads_per_cor": [6, 29], "thread": [6, 7, 29, 226, 275], "get_thread": [6, 29], "list": [6, 7, 10, 11, 12, 24, 28, 29, 42, 43, 47, 54, 66, 69, 73, 74, 77, 78, 80, 81, 82, 84, 91, 99, 104, 107, 110, 125, 130, 131, 133, 134, 135, 137, 138, 146, 150, 165, 169, 170, 175, 176, 184, 190, 195, 196, 202, 205, 206, 227, 234, 236, 240, 242, 244, 248, 253, 255, 258, 259, 262, 270, 273, 275, 276, 282, 284, 286, 287, 289, 293, 294, 296], "get_physical_id": [6, 29], "socket": [6, 29, 184, 273, 275, 299], "get_core_id": [6, 29], "id": [6, 27, 29, 68, 77, 79, 80, 81, 82, 130, 132, 133, 134, 135, 205, 243, 273, 274, 278, 279, 280, 292, 296], "get_bounded_thread": [6, 29], "core_id": [6, 29], "bind": [6, 29], "instanc": [6, 7, 10, 11, 29, 42, 43, 81, 82, 84, 87, 90, 93, 94, 96, 97, 98, 116, 128, 134, 135, 137, 138, 150, 154, 168, 169, 181, 184, 192, 200, 201, 202, 206, 223, 244, 250, 256, 290, 296, 298, 299], "run_inst": 6, "b_dataload": [6, 7, 223, 244], "none": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 38, 42, 43, 44, 46, 52, 54, 55, 56, 57, 58, 59, 61, 66, 69, 70, 73, 74, 75, 80, 84, 85, 86, 87, 90, 99, 104, 108, 112, 116, 119, 121, 122, 126, 133, 137, 138, 148, 150, 151, 154, 155, 159, 161, 162, 166, 169, 170, 172, 175, 176, 179, 181, 183, 184, 188, 192, 193, 196, 205, 206, 207, 226, 227, 243, 247, 268, 287, 290, 294, 295, 296], "b_func": [6, 223], "run": [6, 7, 10, 11, 27, 29, 42, 43, 53, 68, 108, 109, 116, 138, 150, 154, 169, 192, 193, 196, 198, 205, 206, 223, 232, 235, 236, 244, 248, 250, 252, 253, 254, 256, 258, 259, 260, 262, 263, 265, 273, 274, 275, 276, 278, 279, 280, 285, 287, 290, 291, 292, 294, 296, 298], "object": [6, 7, 10, 11, 12, 13, 14, 28, 29, 31, 42, 43, 44, 54, 55, 56, 69, 70, 75, 80, 88, 90, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 112, 116, 129, 133, 137, 138, 146, 147, 150, 154, 168, 169, 172, 183, 184, 191, 196, 202, 203, 207, 213, 223, 225, 226, 227, 235, 243, 244, 246, 283, 284, 286, 287, 295, 296, 297, 299], "benchmarkconfig": [6, 7, 223, 229, 244], "contain": [6, 7, 10, 11, 12, 13, 14, 42, 43, 54, 55, 56, 70, 74, 75, 80, 81, 82, 86, 99, 102, 104, 107, 108, 109, 110, 111, 112, 133, 134, 135, 138, 150, 169, 172, 176, 183, 192, 196, 205, 224, 227, 230, 239, 243, 266, 273, 278, 279, 280, 284, 290, 294, 296, 297], "accuraci": [6, 7, 10, 11, 42, 43, 70, 75, 84, 99, 104, 112, 137, 138, 148, 150, 155, 169, 181, 188, 190, 191, 192, 196, 197, 202, 205, 207, 208, 224, 226, 227, 229, 231, 232, 233, 234, 243, 244, 247, 256, 265, 267, 274, 275, 278, 279, 282, 283, 284, 285, 286, 290, 291, 292, 293, 294, 297, 298, 299], "goal": [6, 70, 75, 99, 104, 112, 138, 150, 197, 198, 207, 226, 283, 287, 296], "tune": [6, 7, 10, 11, 12, 14, 42, 43, 54, 56, 75, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 138, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 184, 189, 190, 191, 192, 193, 197, 206, 207, 224, 225, 226, 227, 229, 232, 239, 241, 244, 245, 265, 269, 272, 274, 275, 282, 284, 285, 289, 291, 292, 294, 298], "prefer": [6, 75, 112, 150, 192, 198, 284, 290], "calibr": [6, 7, 10, 11, 42, 43, 75, 112, 150, 178, 191, 192, 193, 196, 198, 206, 208, 227, 238, 239, 284, 287, 290, 296, 297, 298], "space": [6, 7, 10, 11, 42, 43, 75, 82, 87, 90, 91, 92, 112, 116, 119, 126, 135, 138, 150, 154, 159, 166, 193, 197, 198, 200, 201, 203, 206, 207, 208, 225, 284, 287, 293, 298], "etc": [6, 27, 68, 70, 75, 82, 99, 104, 112, 135, 138, 150, 183, 205, 230, 239, 267, 271, 284, 292, 296], "dataload": [6, 10, 11, 12, 23, 32, 42, 43, 54, 65, 70, 99, 104, 113, 150, 169, 172, 196, 202, 205, 206, 207, 229, 230, 231, 232, 237, 238, 244, 245, 267, 268, 283, 284, 287, 288, 289, 290, 293, 294, 295, 297, 298], "framework": [6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 30, 31, 35, 40, 41, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 69, 75, 84, 85, 112, 120, 126, 137, 138, 139, 140, 142, 160, 166, 172, 189, 191, 196, 197, 198, 205, 206, 208, 224, 225, 229, 232, 233, 237, 238, 239, 240, 243, 244, 245, 267, 268, 284, 285, 287, 291, 294, 295, 296, 297, 298, 299], "custom": [6, 7, 113, 137, 148, 183, 193, 197, 198, 223, 230, 231, 248, 271, 272, 273, 277, 279, 280, 284, 285, 290, 292], "If": [6, 7, 10, 11, 14, 28, 42, 43, 56, 69, 108, 138, 150, 169, 193, 196, 198, 201, 202, 207, 223, 225, 226, 227, 232, 240, 241, 243, 244, 251, 259, 260, 263, 265, 271, 276, 282, 284, 287, 290, 292, 293, 294, 295, 296], "user": [6, 7, 10, 11, 14, 17, 21, 28, 29, 35, 42, 43, 56, 59, 63, 69, 75, 99, 104, 110, 112, 113, 137, 138, 148, 150, 155, 168, 169, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 206, 207, 208, 213, 223, 225, 226, 230, 231, 234, 236, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 259, 265, 272, 273, 274, 275, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 293, 294, 295, 296, 300], "pass": [6, 137, 150, 183, 184, 192, 198, 201, 202, 206, 223, 227, 230, 231, 232, 238, 243, 244, 266, 273, 284, 286, 287, 289, 293, 298], "need": [6, 7, 10, 11, 14, 21, 28, 31, 33, 34, 42, 43, 44, 52, 53, 56, 63, 69, 74, 113, 119, 137, 138, 148, 150, 159, 169, 176, 183, 184, 192, 195, 197, 198, 202, 206, 225, 226, 227, 229, 230, 232, 239, 244, 248, 250, 251, 254, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 272, 276, 278, 284, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298], "generate_prefix": 6, "core_list": 6, "gener": [6, 10, 11, 14, 15, 16, 17, 28, 42, 43, 44, 53, 56, 57, 58, 59, 69, 77, 85, 116, 130, 138, 150, 154, 169, 188, 189, 190, 192, 193, 194, 198, 201, 202, 206, 208, 226, 230, 243, 244, 245, 247, 248, 253, 258, 260, 262, 263, 265, 267, 268, 282, 284, 285, 287, 289, 290, 293, 294, 295, 296], "command": [6, 29, 169, 229, 232, 248, 250, 253, 258, 262, 266, 267, 269, 270, 271, 273], "prefix": [6, 248, 253, 294], "numactl": [6, 235, 251, 259], "index": [6, 7, 14, 47, 52, 56, 91, 184, 198, 227, 243, 266, 270, 290, 293], "bound": [6, 28, 69, 80, 116, 133, 154, 243, 295], "specif": [6, 7, 12, 13, 14, 15, 19, 21, 35, 54, 55, 56, 57, 61, 63, 93, 94, 96, 97, 98, 137, 150, 181, 188, 189, 191, 192, 196, 200, 203, 206, 207, 224, 225, 226, 229, 230, 236, 238, 242, 243, 244, 245, 246, 247, 248, 252, 253, 255, 259, 265, 267, 273, 282, 284, 286, 290, 296, 298], "call_on": 6, "cmd": 6, "log_fil": 6, "execut": [6, 7, 109, 113, 115, 150, 151, 153, 169, 172, 183, 184, 191, 192, 198, 229, 230, 231, 244, 245, 250, 251, 258, 259, 265, 266, 267, 268, 272, 275, 283, 284, 287, 290, 292, 296, 299], "one": [6, 28, 38, 69, 77, 80, 84, 86, 107, 110, 111, 130, 133, 137, 189, 192, 193, 196, 197, 198, 203, 206, 224, 230, 231, 232, 236, 239, 240, 243, 244, 245, 248, 249, 253, 254, 256, 258, 259, 262, 265, 266, 267, 270, 271, 272, 273, 275, 282, 283, 284, 286, 287, 288, 290, 291, 293, 295, 296], "dump": [6, 74, 176, 184, 196, 198, 201, 270, 287, 291, 294], "log": [6, 180, 202, 256, 278, 279, 280, 292, 294, 296], "window": [6, 223, 240, 265, 266], "config_inst": 6, "raw_cmd": 6, "multi": [6, 80, 133, 137, 150, 203, 226, 227, 239, 244, 282, 284, 287, 296], "trigger": [6, 109], "sub": [6, 29, 203, 225, 296], "process": [6, 7, 10, 11, 12, 13, 14, 24, 28, 29, 42, 43, 54, 55, 56, 66, 69, 107, 109, 111, 115, 116, 138, 150, 151, 153, 154, 169, 183, 184, 187, 188, 191, 195, 196, 197, 198, 203, 206, 207, 208, 224, 226, 227, 230, 231, 232, 234, 244, 247, 249, 270, 272, 273, 275, 283, 284, 287, 288, 290, 293, 294, 295, 298], "raw": [6, 13, 17, 20, 55, 59, 62, 119, 159, 243, 269, 296], "summary_benchmark": 6, "summari": [6, 169, 229, 260, 263, 294, 299], "profil": [6, 7, 129], "benchmark_with_raw_cmd": 6, "string": [6, 7, 14, 30, 35, 56, 70, 75, 77, 80, 86, 87, 88, 90, 91, 99, 104, 107, 108, 109, 110, 111, 112, 130, 133, 142, 146, 172, 181, 184, 196, 243, 295], "exampl": [6, 7, 12, 13, 14, 24, 28, 54, 55, 56, 66, 69, 80, 81, 82, 84, 110, 133, 134, 135, 137, 138, 148, 150, 168, 169, 183, 184, 190, 196, 197, 200, 205, 207, 208, 213, 238, 239, 248, 251, 252, 253, 256, 273, 276, 289, 291, 295, 296, 297, 300], "accord": [6, 7, 12, 13, 14, 28, 54, 55, 56, 69, 119, 157, 159, 172, 196, 197, 198, 203, 206, 227, 232, 268, 273, 278, 279, 280, 284, 289, 293, 295, 296], "config": [6, 10, 11, 12, 42, 43, 54, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 126, 127, 129, 138, 166, 167, 168, 169, 172, 183, 184, 187, 189, 191, 192, 193, 194, 203, 205, 207, 208, 213, 223, 225, 226, 229, 230, 231, 232, 234, 237, 239, 243, 244, 245, 246, 267, 268, 283, 284, 286, 287, 289, 290, 292, 294, 296], "from": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 30, 31, 34, 42, 43, 44, 47, 51, 54, 55, 56, 57, 58, 59, 61, 66, 70, 72, 73, 74, 77, 80, 81, 82, 86, 91, 107, 108, 109, 111, 126, 128, 130, 133, 134, 135, 138, 146, 148, 150, 166, 168, 169, 172, 174, 175, 176, 179, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 206, 208, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 239, 242, 243, 245, 246, 247, 248, 252, 253, 254, 256, 266, 268, 270, 271, 275, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "import": [6, 7, 86, 138, 148, 150, 169, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 208, 223, 226, 227, 229, 230, 231, 232, 234, 237, 243, 244, 245, 246, 247, 248, 252, 254, 267, 268, 276, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297], "fit_with_raw_cmd": 6, "iter": [6, 7, 10, 11, 14, 15, 31, 42, 43, 47, 52, 56, 57, 109, 111, 138, 150, 169, 172, 192, 196, 197, 202, 203, 206, 223, 226, 227, 244, 284, 286, 287, 293, 294, 296, 298], "100": [6, 7, 14, 56, 196, 198, 223, 227, 232, 238, 240, 244, 270, 286, 287, 295, 296, 298, 299], "cores_per_inst": [6, 7, 223, 244, 286], "4": [6, 7, 21, 24, 28, 63, 66, 69, 77, 78, 80, 130, 131, 133, 168, 187, 188, 190, 191, 192, 198, 200, 205, 206, 208, 223, 232, 233, 236, 239, 240, 243, 244, 247, 253, 273, 275, 279, 284, 287, 290, 293, 295, 296, 299], "num_of_inst": [6, 7, 223, 244, 286], "7": [6, 7, 148, 190, 192, 195, 198, 208, 223, 235, 236, 244, 284, 287, 291, 293, 296, 299], "test": [6, 7, 28, 69, 201, 205, 229, 240, 273, 278, 299], "py": [6, 7, 78, 80, 81, 82, 109, 131, 133, 134, 135, 194, 202, 206, 225, 229, 232, 240, 244, 250, 252, 253, 254, 260, 263, 267, 269, 270, 272, 273, 275, 276, 278, 279, 280, 287, 291, 294], "fit": [6, 7, 116, 138, 150, 154, 169, 202, 205, 223, 226, 227, 229, 232, 237, 238, 243, 244, 245, 246, 267, 268, 284, 287, 288, 289, 290], "pb": [6, 7, 138, 146, 150, 196, 223, 232, 237, 244, 246, 267, 270, 278, 294, 299], "eval_dataload": [6, 7, 10, 11, 42, 43, 113, 116, 119, 121, 122, 138, 150, 151, 154, 155, 159, 161, 162, 169, 223, 238, 243, 244, 267, 287, 288, 296], "x": [7, 28, 53, 69, 116, 154, 197, 198, 224, 225, 229, 232, 245, 246, 273, 274, 278, 279, 281, 287, 288, 293, 294, 295, 297], "dotdict": [7, 148, 184], "access": [7, 179, 184, 260, 263, 267], "yaml": [7, 10, 11, 12, 14, 29, 42, 43, 54, 56, 70, 75, 86, 87, 88, 90, 99, 104, 112, 113, 183, 184, 206, 208, 238, 243, 244, 282, 286, 294, 295], "attribut": [7, 184, 206, 226, 236, 238, 244, 286, 298], "instead": [7, 53, 184, 191, 251, 253, 256, 271, 284, 290], "dictionari": [7, 27, 68, 80, 87, 90, 92, 133, 184], "notat": [7, 184], "option": [7, 10, 11, 12, 28, 42, 43, 54, 69, 73, 74, 80, 86, 107, 113, 126, 133, 137, 138, 150, 166, 168, 169, 175, 176, 177, 179, 184, 192, 193, 196, 198, 207, 208, 225, 226, 227, 236, 240, 244, 259, 273, 276, 278, 279, 280, 284, 287, 290, 292, 293, 295, 296, 298], "random_se": [7, 116, 154, 244, 298], "1978": 7, "workspac": [7, 183, 184, 246, 273, 278, 279, 280], "default_workspac": 7, "resume_from": [7, 184], "tensorboard": [7, 172, 184, 206, 244, 268], "global": [7, 93, 94, 96, 97, 98, 107, 168, 184, 192, 194, 202, 244, 284, 286, 296], "creat": [7, 12, 14, 31, 44, 54, 56, 80, 90, 91, 126, 133, 166, 168, 172, 198, 200, 203, 206, 227, 246, 258, 260, 262, 263, 266, 278, 279, 280, 284, 287, 292, 294, 296, 297], "you": [7, 12, 52, 54, 109, 137, 150, 201, 202, 207, 225, 226, 227, 229, 232, 240, 241, 243, 245, 248, 250, 251, 253, 258, 262, 265, 266, 267, 268, 269, 270, 271, 273, 284, 287, 290, 291, 292, 293, 294, 297], "want": [7, 12, 52, 54, 109, 155, 169, 202, 206, 226, 227, 232, 244, 253, 265, 266, 273, 282, 287, 290, 292, 294, 296], "should": [7, 10, 11, 12, 14, 28, 33, 42, 43, 52, 54, 56, 69, 74, 78, 131, 137, 138, 150, 169, 176, 184, 191, 193, 194, 195, 196, 198, 202, 203, 206, 207, 208, 227, 230, 232, 243, 244, 251, 260, 263, 265, 267, 268, 282, 284, 287, 290, 295, 296, 298], "function": [7, 10, 11, 13, 42, 43, 55, 87, 90, 99, 104, 177, 189, 191, 192, 193, 196, 198, 201, 202, 203, 206, 207, 208, 223, 226, 230, 231, 234, 238, 239, 242, 243, 244, 245, 256, 266, 272, 273, 284, 287, 290, 291, 292, 293, 294, 296, 297], "util": [7, 37, 78, 108, 118, 129, 131, 158, 196, 207, 208, 209, 224, 225, 232, 244, 248, 268, 284, 287, 296, 297], "set_random_se": [7, 184], "seed": [7, 92, 184, 192, 244, 298], "int": [7, 12, 13, 24, 28, 53, 54, 55, 66, 69, 73, 74, 78, 80, 84, 91, 131, 133, 137, 168, 175, 176, 179, 184, 192, 196, 205, 225, 226, 227, 243, 244, 276, 286, 290, 295], "set_workspac": [7, 184], "set_resume_from": [7, 184], "set_tensorboard": [7, 184], "bool": [7, 12, 14, 24, 28, 54, 56, 66, 69, 74, 78, 84, 107, 125, 131, 137, 165, 176, 179, 183, 184, 192, 193, 226, 227, 243, 276, 286, 295], "random": [7, 24, 28, 66, 69, 92, 116, 118, 154, 158, 184, 192, 203, 244, 284, 286, 295, 298], "default": [7, 10, 11, 12, 13, 14, 24, 28, 42, 43, 46, 54, 55, 56, 66, 69, 73, 74, 77, 86, 108, 128, 130, 137, 146, 168, 172, 175, 176, 179, 184, 188, 189, 190, 192, 193, 196, 197, 202, 206, 225, 226, 227, 236, 239, 243, 244, 245, 247, 253, 256, 258, 262, 270, 273, 278, 279, 280, 282, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298], "directori": [7, 13, 14, 55, 56, 146, 179, 181, 183, 184, 227, 232, 235, 258, 260, 262, 263, 269, 271, 294], "where": [7, 80, 84, 133, 137, 168, 184, 198, 208, 224, 229, 230, 258, 262, 266, 293, 294], "intermedi": [7, 30, 198, 202, 239, 287], "histori": [7, 183, 184, 265, 269, 296], "ar": [7, 12, 28, 54, 69, 80, 84, 91, 107, 108, 109, 113, 115, 116, 133, 137, 151, 153, 154, 168, 172, 183, 184, 187, 188, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 206, 207, 225, 226, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 251, 253, 256, 259, 265, 267, 268, 270, 271, 272, 273, 276, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "store": [7, 14, 56, 102, 109, 238], "nc_workspac": [7, 268, 269], "format": [7, 12, 13, 14, 54, 55, 56, 74, 80, 86, 126, 133, 166, 176, 179, 188, 189, 191, 196, 198, 205, 207, 208, 225, 227, 232, 234, 243, 244, 245, 246, 247, 248, 270, 273, 285, 287, 290, 291], "datetim": 7, "now": [7, 28, 69, 202, 203, 208, 227, 232, 256, 286, 295, 296], "strftime": 7, "y": [7, 28, 69, 116, 154, 198, 225, 229, 235, 251, 293, 295], "m": [7, 107, 201, 230, 240, 248, 250, 253, 256, 260, 263, 273, 284, 299], "d_": 7, "h": [7, 28, 69, 232, 273, 274, 278, 279, 280, 295], "resum": [7, 10, 11, 42, 43, 121, 122, 151, 154, 155, 159, 161, 162], "wa": [7, 188, 190, 206, 244, 247, 270, 271, 274, 285, 296], "automat": [7, 14, 17, 24, 56, 59, 66, 75, 85, 112, 193, 196, 202, 205, 223, 227, 239, 244, 245, 248, 250, 253, 254, 256, 258, 259, 260, 262, 263, 265, 272, 275, 283, 284, 287, 293, 295, 296], "save": [7, 14, 56, 73, 74, 113, 146, 150, 169, 170, 175, 176, 179, 184, 193, 194, 198, 202, 206, 238, 244, 245, 246, 249, 253, 258, 262, 268, 273, 278, 279, 280, 283, 287, 288, 290, 293], "dure": [7, 107, 111, 148, 184, 190, 191, 193, 196, 198, 207, 229, 244, 246, 272, 282, 283, 284, 287, 293, 294, 298], "last": [7, 189, 190, 192, 226, 245, 248, 250, 255, 259, 287, 290, 293], "flag": [7, 78, 131, 229], "indic": [7, 12, 47, 52, 54, 70, 80, 91, 133, 196, 202, 226, 235, 268, 273, 294], "whether": [7, 12, 24, 28, 52, 54, 66, 69, 78, 80, 84, 107, 131, 133, 137, 172, 179, 183, 184, 192, 206, 227, 243, 287, 290, 293, 295], "each": [7, 14, 17, 24, 28, 52, 56, 59, 66, 69, 78, 80, 81, 82, 119, 131, 133, 134, 135, 159, 184, 192, 195, 198, 201, 206, 207, 208, 225, 227, 229, 230, 231, 236, 244, 250, 256, 259, 265, 273, 275, 282, 284, 288, 290, 292, 294, 295, 296, 297], "visual": [7, 205, 256, 265, 292, 294, 296, 297], "displai": [7, 125, 126, 165, 166, 184, 265, 268], "2022": [7, 192, 198, 241, 284, 290, 293], "workspace_path": 7, "output": [7, 10, 11, 33, 37, 42, 43, 73, 74, 77, 107, 130, 137, 138, 146, 150, 169, 175, 176, 179, 180, 184, 192, 193, 194, 198, 202, 206, 207, 230, 231, 232, 234, 236, 238, 243, 244, 246, 256, 265, 266, 268, 273, 274, 278, 279, 280, 283, 284, 286, 287, 290, 291, 293, 294, 295, 296, 298], "devic": [7, 179, 189, 192, 193, 198, 205, 207, 226, 230, 244, 245, 248, 251, 256, 265, 284, 286, 288, 290], "cpu": [7, 179, 184, 189, 191, 196, 205, 207, 223, 224, 239, 244, 245, 248, 250, 256, 265, 273, 285, 286, 287, 288, 289, 290, 294], "warmup": [7, 223, 244, 286], "model_nam": [7, 205], "inter_num_of_thread": [7, 244, 286], "intra_num_of_thread": [7, 244, 286], "diagnosi": [7, 244, 268, 269, 270, 285, 291, 297], "ni_workload_nam": 7, "benchmark": [7, 31, 76, 113, 129, 148, 184, 205, 213, 246, 248, 252, 256, 259, 265, 268, 296, 297, 298, 299], "A": [7, 14, 28, 31, 33, 34, 56, 69, 70, 77, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 130, 133, 134, 135, 137, 138, 142, 146, 154, 169, 184, 190, 192, 193, 198, 201, 205, 207, 225, 226, 227, 233, 236, 242, 243, 244, 246, 258, 259, 262, 265, 273, 284, 285, 287, 290, 293, 295, 296, 298], "empti": [7, 193, 251, 288], "includ": [7, 12, 14, 21, 28, 30, 54, 56, 63, 69, 75, 85, 107, 112, 184, 192, 193, 196, 197, 200, 206, 207, 208, 226, 227, 229, 240, 241, 242, 243, 244, 248, 251, 254, 259, 271, 275, 278, 279, 280, 284, 287, 289, 290, 294, 296], "itex": [7, 73, 175, 196, 245, 287, 293], "ipex": [7, 183, 189, 190, 239, 242, 244, 245, 250, 254, 255, 293], "onnxrt_trt_ep": [7, 245, 287], "onnxrt_cuda_ep": [7, 245, 287], "onnxrt_dnnl_ep": [7, 245, 287], "onnxrt_dml_ep": [7, 287], "number": [7, 13, 24, 28, 52, 55, 66, 69, 81, 82, 84, 107, 116, 134, 135, 137, 154, 172, 184, 187, 192, 197, 198, 223, 226, 227, 232, 243, 273, 275, 284, 287, 290, 292, 293, 295, 296], "inter": 7, "oper": [7, 24, 66, 107, 187, 189, 190, 191, 192, 194, 195, 198, 202, 223, 226, 229, 234, 265, 271, 284, 287, 290, 293, 295, 296], "intra": 7, "accuracycriterion": [7, 244, 296], "higher_is_bett": [7, 137, 150, 296, 298], "criterion": [7, 32, 35, 230, 231, 244, 284, 287, 293, 296, 298], "rel": [7, 148, 244, 268, 286, 296, 298, 299], "tolerable_loss": [7, 197, 244, 296], "01": [7, 192, 244, 286, 290, 296, 298, 299], "metric": [7, 10, 11, 32, 42, 43, 70, 75, 76, 91, 99, 104, 112, 113, 129, 138, 150, 169, 172, 195, 203, 206, 207, 227, 229, 232, 244, 245, 267, 287, 292, 293, 294, 296, 297, 298, 299], "higher": [7, 10, 11, 42, 43, 91, 138, 150, 169, 198, 202, 229, 230, 234, 243, 268, 284, 287, 290, 292], "better": [7, 10, 11, 42, 43, 91, 138, 150, 169, 189, 192, 198, 225, 231, 243, 245, 284, 285, 287, 290, 292, 293, 296], "loss": [7, 30, 75, 84, 99, 104, 112, 137, 169, 189, 191, 192, 196, 198, 224, 229, 230, 231, 232, 233, 242, 243, 244, 245, 256, 268, 270, 283, 284, 285, 287, 290, 293, 296, 298], "absolut": [7, 84, 137, 188, 198, 243, 244, 247, 284, 287, 296], "float": [7, 12, 24, 54, 66, 78, 80, 81, 82, 109, 131, 133, 134, 135, 165, 181, 184, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 225, 227, 243, 247, 286, 287, 293, 295], "how": [7, 28, 69, 70, 107, 191, 192, 193, 194, 195, 196, 198, 201, 202, 204, 206, 226, 227, 230, 231, 232, 238, 243, 244, 259, 260, 263, 264, 265, 267, 278, 279, 280, 284, 285, 287, 293, 295, 296, 297, 298], "much": [7, 28, 69, 70, 198, 230, 259, 293, 295], "accept": [7, 197, 200, 223, 225, 226, 267, 290], "accuracy_criterion": [7, 148, 244, 269, 282, 286, 296, 298], "avail": [7, 142, 189, 192, 193, 205, 209, 211, 215, 218, 221, 225, 233, 235, 237, 239, 258, 262, 267, 272, 273, 274, 278, 279, 280, 284, 296, 299], "tuningcriterion": [7, 244, 282, 292, 296], "strategi": [7, 8, 14, 40, 56, 76, 129, 197, 198, 205, 206, 207, 208, 213, 224, 225, 226, 232, 239, 244, 253, 265, 270, 285, 286, 287, 289, 290, 291, 297, 298], "basic": [7, 27, 68, 87, 107, 118, 122, 125, 158, 162, 165, 169, 188, 239, 240, 244, 247, 267, 286, 292], "strategy_kwarg": [7, 292, 296], "timeout": [7, 244, 286, 296, 298], "max_trial": [7, 189, 197, 244, 296], "doc": [7, 107, 125, 126, 137, 150, 165, 166, 184, 243, 244, 260, 263, 271], "tuning_strategi": 7, "md": [7, 107, 137, 150], "constraint": [7, 75, 112, 244, 284, 292, 296, 298], "guarante": [7, 244], "models": [7, 148, 244, 282, 286], "footprint": [7, 75, 99, 104, 112, 148, 231, 244, 282, 284, 286, 288], "second": [7, 12, 54, 155, 184, 192, 198, 229, 244, 258, 262, 266, 278, 279, 290, 293, 296, 298], "which": [7, 12, 13, 14, 24, 29, 54, 55, 56, 66, 77, 82, 91, 93, 94, 96, 97, 98, 102, 107, 108, 109, 111, 116, 130, 135, 137, 142, 148, 150, 154, 184, 189, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 205, 206, 207, 208, 224, 226, 227, 229, 230, 232, 235, 236, 239, 243, 244, 245, 246, 249, 253, 256, 259, 265, 266, 267, 270, 273, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298], "mean": [7, 24, 28, 66, 69, 82, 84, 107, 119, 135, 137, 159, 192, 194, 198, 202, 207, 208, 226, 229, 232, 236, 243, 244, 251, 270, 284, 287, 288, 290, 293, 295, 296, 298, 299], "earli": [7, 198, 244, 287, 296, 298], "stop": [7, 197, 244, 296, 297, 298], "time": [7, 28, 69, 84, 116, 137, 148, 154, 184, 191, 192, 193, 195, 197, 198, 207, 226, 229, 232, 235, 244, 253, 255, 258, 262, 265, 266, 271, 274, 278, 279, 282, 284, 285, 287, 290, 292, 293, 294, 295, 296], "combin": [7, 10, 11, 24, 38, 42, 43, 66, 138, 150, 169, 184, 192, 195, 202, 206, 239, 244, 283, 285, 287, 289, 290, 295, 296], "field": [7, 14, 56, 80, 133, 188, 202, 206, 208, 232, 244, 247, 292, 296, 298], "decid": [7, 78, 109, 131, 196, 206, 207, 244, 287, 291, 296], "when": [7, 12, 13, 21, 28, 54, 55, 63, 69, 78, 108, 109, 131, 150, 169, 191, 192, 196, 197, 198, 200, 203, 207, 225, 226, 227, 244, 256, 258, 259, 262, 266, 267, 270, 271, 272, 274, 278, 284, 287, 290, 293, 295, 296], "exit": [7, 115, 151, 153, 197, 244, 273, 278, 279, 280, 298], "tuning_criterion": [7, 244, 282, 292, 296], "posttrainingquantconfig": [7, 150, 202, 205, 208, 226, 229, 234, 237, 243, 244, 246, 267, 268, 269, 270, 287, 288, 289, 290, 292, 293, 296], "domain": [7, 284, 296], "auto": [7, 114, 152, 158, 184, 190, 192, 193, 202, 224, 248, 251, 253, 255, 256, 284, 287, 290], "recip": [7, 75, 112, 188, 197, 205, 244, 247, 288, 290, 293, 296], "quant_format": [7, 74, 176, 234, 268], "approach": [7, 87, 88, 90, 191, 198, 202, 203, 205, 224, 227, 230, 239, 244, 253, 265, 268, 276, 278, 279, 280, 284, 285, 286, 288, 290, 296, 298], "calibration_sampling_s": [7, 244, 270], "op_type_dict": [7, 191, 205, 208, 286, 287, 290, 296], "op_name_dict": [7, 191, 229, 244, 268, 270, 287, 296], "reduce_rang": [7, 208, 286], "example_input": [7, 74, 176, 183, 187, 190, 191, 192, 193, 234], "excluded_precis": [7, 289], "quant_level": [7, 268, 290, 293, 296], "gpu": [7, 192, 196, 205, 223, 239, 244, 245, 250, 256, 265, 286, 287, 288], "npu": [7, 287], "xpu": [7, 196, 256, 287], "cv": [7, 191, 193, 196, 284], "object_detect": [7, 80, 133], "nlp": [7, 110, 193, 196, 198, 253, 269, 284, 287], "recommendation_system": 7, "adaptor": [7, 128, 168, 172, 205, 208, 239, 288, 289, 291, 293, 294, 297], "explicitli": [7, 191, 238, 284], "overrid": [7, 184, 225], "detect": [7, 80, 84, 133, 137, 142, 193, 201, 202, 248, 255, 256, 284, 296], "quantiztaion": 7, "below": [7, 113, 137, 150, 188, 190, 192, 193, 196, 197, 198, 201, 202, 205, 206, 207, 208, 226, 229, 230, 232, 238, 243, 247, 248, 250, 258, 259, 262, 265, 268, 273, 282, 283, 284, 286, 287, 290, 292, 293, 294, 296, 297], "do": [7, 12, 53, 54, 70, 74, 77, 80, 110, 130, 133, 176, 183, 200, 207, 225, 227, 232, 236, 239, 243, 244, 260, 263, 284, 289, 291, 293, 296], "quant": [7, 126, 166, 192, 198, 202, 225, 242, 244, 287], "smooth_quant_arg": [7, 287, 293], "layer_wise_qu": [7, 288], "fast": [7, 192, 196, 284, 285, 290], "bia": [7, 290, 294], "gemm_to_matmul": [7, 287], "convert": [7, 12, 24, 27, 28, 54, 66, 68, 69, 73, 80, 86, 108, 126, 133, 166, 175, 187, 188, 189, 190, 191, 192, 193, 195, 198, 202, 207, 244, 245, 250, 287, 289, 290, 293, 295, 296], "gemm": 7, "matmul": [7, 107, 236, 268, 290, 296], "add": [7, 12, 14, 35, 54, 56, 108, 126, 166, 184, 190, 201, 202, 205, 208, 226, 227, 232, 234, 236, 243, 244, 260, 263, 267, 268, 275, 278, 279, 292, 293, 294, 296, 297], "valid": [7, 14, 56, 80, 108, 109, 133, 146, 203, 205, 206, 227, 229, 230, 233, 236, 239, 241, 244, 256, 270, 284, 287, 290, 291], "graph_optimization_level": [7, 286, 287], "disable_al": [7, 286], "enable_bas": 7, "enable_extend": 7, "enable_al": 7, "first_conv_or_matmul_quant": [7, 287], "last_conv_or_matmul_quant": [7, 287], "pre_post_process_quant": [7, 287], "preprocess": [7, 12, 28, 54, 69, 168, 172, 232, 295], "postprocess": [7, 25, 28, 32, 69, 137, 150, 172, 206, 244, 294, 295], "add_qdq_pair_to_weight": [7, 287], "qdq": [7, 72, 73, 74, 174, 175, 176, 195, 206, 229, 234, 239, 255, 256, 287, 291, 293], "pair": [7, 189, 191, 207, 226, 244, 245, 291], "optypes_to_exclude_output_qu": [7, 287], "optyp": [7, 72, 174, 207], "dedicated_qdq_pair": [7, 287], "dedic": 7, "qoper": [7, 234, 268], "requir": [7, 113, 146, 189, 191, 192, 196, 198, 202, 206, 207, 223, 224, 226, 229, 231, 232, 236, 244, 245, 246, 249, 259, 265, 267, 272, 273, 276, 279, 280, 284, 287, 290, 291, 292, 293, 294, 296, 298], "onnxruntim": [7, 14, 21, 50, 56, 63, 85, 206, 224, 226, 239, 240, 245, 268, 286], "tensorflow": [7, 12, 13, 14, 17, 19, 21, 28, 35, 53, 54, 55, 56, 59, 61, 63, 69, 73, 74, 75, 78, 80, 84, 85, 86, 112, 120, 131, 133, 137, 138, 146, 150, 160, 175, 176, 184, 195, 201, 203, 205, 206, 207, 224, 225, 226, 229, 230, 231, 233, 236, 237, 239, 240, 244, 245, 246, 247, 255, 256, 267, 270, 284, 285, 286, 292, 293, 296, 298], "method": [7, 12, 14, 21, 28, 31, 47, 52, 53, 54, 56, 63, 69, 90, 91, 92, 126, 166, 168, 172, 177, 179, 180, 192, 193, 194, 196, 198, 202, 203, 205, 224, 225, 226, 227, 229, 230, 231, 243, 244, 283, 284, 287, 289, 290, 293, 295, 296], "dynam": [7, 44, 74, 126, 166, 176, 192, 193, 206, 226, 230, 234, 239, 244, 248, 253, 254, 255, 256, 259, 265, 285, 296, 299], "weight_onli": [7, 183, 188, 205, 225, 247, 288, 290], "ptq": [7, 150, 190, 191, 195, 196, 202, 229, 232, 239, 244, 270, 287, 293, 294, 296], "both": [7, 191, 192, 194, 198, 200, 203, 206, 231, 244, 249, 268, 270, 272, 284, 286, 287, 290, 293, 296], "tri": [7, 225, 296], "meet": [7, 113, 115, 151, 153, 192, 194, 196, 197, 198, 202, 207, 282, 285, 286, 287, 290, 294, 296], "criteria": [7, 75, 99, 104, 107, 109, 112, 197, 202, 265, 293], "bayesian": [7, 92, 118, 158, 203, 284, 286], "mse": [7, 84, 118, 137, 150, 158, 184, 192, 198, 229, 243, 270, 286, 290, 291], "mse_v2": [7, 118, 158], "hawq_v2": [7, 158], "exhaust": [7, 92, 118, 158, 286], "els": [7, 52, 148, 181, 253, 290, 294], "sampl": [7, 12, 13, 14, 24, 28, 47, 52, 54, 55, 56, 66, 69, 84, 91, 116, 137, 154, 192, 196, 197, 198, 203, 226, 227, 233, 239, 266, 287, 290, 293, 295, 296, 298, 299], "advanc": [7, 188, 189, 192, 194, 196, 198, 200, 205, 207, 213, 242, 247, 284, 287, 290, 298], "reduc": [7, 189, 190, 191, 192, 195, 196, 198, 206, 224, 231, 244, 245, 265, 266, 284, 285, 287, 288, 289, 290, 293, 296, 298], "dtype": [7, 15, 16, 24, 28, 57, 58, 66, 69, 179, 189, 192, 198, 205, 207, 208, 227, 229, 234, 236, 248, 270, 286, 287, 290, 293, 294, 295, 298], "activ": [7, 37, 126, 166, 168, 187, 190, 191, 192, 195, 196, 198, 206, 207, 208, 224, 229, 231, 236, 244, 266, 267, 270, 278, 279, 280, 286, 287, 290, 293, 294, 298], "layer1": [7, 244, 284, 287], "conv1": [7, 194, 287, 298], "bit": [7, 168, 187, 188, 189, 192, 198, 205, 208, 224, 231, 245, 247, 285, 287, 290, 293], "precis": [7, 10, 11, 42, 43, 75, 82, 84, 85, 112, 114, 126, 135, 137, 138, 148, 152, 155, 166, 184, 188, 191, 192, 196, 197, 198, 205, 206, 207, 213, 223, 224, 231, 232, 236, 239, 247, 248, 254, 255, 256, 285, 286, 287, 290, 293, 296, 297], "exclud": [7, 206, 224, 289], "enabl": [7, 109, 189, 191, 192, 207, 208, 232, 245, 248, 250, 253, 254, 256, 267, 269, 270, 272, 275, 284, 285, 293, 296], "mix": [7, 114, 126, 138, 152, 166, 205, 206, 213, 239, 248, 254, 255, 256, 297], "bf16": [7, 126, 166, 206, 207, 236, 244, 250, 255, 259, 265, 289, 296, 299], "disabl": [7, 200, 265, 270, 289, 290, 293], "conserv": [7, 158], "In": [7, 38, 53, 80, 107, 109, 133, 148, 192, 193, 196, 198, 200, 202, 203, 205, 206, 207, 226, 227, 229, 230, 231, 232, 243, 244, 255, 258, 259, 262, 268, 269, 270, 271, 278, 279, 280, 282, 283, 284, 287, 289, 290, 292, 293, 294, 295, 296, 297], "docstr": 7, "workload": [7, 181, 184, 267, 285], "insight": [7, 181, 205, 229, 285, 291, 296, 297], "quantizationawaretrainingconfig": [7, 169, 202, 231, 234, 244, 287, 289, 296], "awar": [7, 38, 86, 107, 157, 169, 192, 193, 197, 206, 207, 208, 224, 231, 232, 234, 239, 265, 275, 283, 285, 290, 296], "qat": [7, 86, 146, 231, 232, 239, 244, 287], "copi": [7, 108, 184, 226, 271], "deepcopi": 7, "model_origin": [7, 150, 289], "qat_op_name_dict": 7, "compression_manag": [7, 169, 202, 230, 231, 244, 283, 284, 287], "prepare_compress": [7, 169, 202, 230, 231, 244, 283, 284, 287], "weightpruningconfig": [7, 244, 283, 284], "pruning_config": [7, 244, 284], "target_spars": [7, 244, 284, 286, 298], "9": [7, 190, 202, 240, 244, 284, 286, 293, 296, 298, 299], "pruning_typ": [7, 244, 284], "snip_momentum": [7, 244, 284], "pattern": [7, 14, 56, 97, 98, 100, 105, 109, 126, 166, 187, 191, 195, 206, 225, 227, 236, 239, 244, 266, 283, 286, 293, 296, 299], "4x1": [7, 103, 244, 284, 299], "op_nam": [7, 127, 167, 184, 185, 191, 207, 244, 284, 294], "excluded_op_nam": [7, 244, 284], "start_step": [7, 109, 244, 284, 286], "end_step": [7, 109, 244, 284, 286], "pruning_scop": [7, 244, 284], "pruning_frequ": [7, 244, 284], "min_sparsity_ratio_per_op": [7, 244, 284], "max_sparsity_ratio_per_op": [7, 244, 284], "98": [7, 244, 284, 286, 299], "sparsity_decay_typ": [7, 244, 284], "exp": [7, 188, 244, 247, 284], "pruning_op_typ": [7, 244, 284], "low_memory_usag": 7, "kwarg": [7, 14, 26, 28, 33, 36, 56, 69, 125, 127, 137, 138, 139, 141, 143, 145, 146, 147, 150, 165, 167, 169, 179, 180, 183, 184, 226], "prune": [7, 38, 39, 76, 93, 94, 96, 97, 98, 102, 104, 105, 107, 108, 109, 111, 113, 184, 205, 232, 233, 236, 237, 239, 283, 285, 297, 298], "defin": [7, 10, 11, 42, 43, 87, 88, 90, 91, 92, 99, 104, 107, 108, 109, 111, 138, 150, 169, 183, 194, 196, 197, 198, 200, 203, 206, 207, 226, 227, 230, 231, 236, 239, 243, 244, 266, 283, 284, 287, 290, 292, 293, 294, 296, 298], "singl": [7, 12, 28, 47, 54, 69, 80, 109, 111, 133, 137, 150, 202, 227, 229, 240, 271, 284, 288, 293], "sequenc": [7, 12, 27, 28, 54, 68, 69, 78, 82, 107, 131, 135, 192, 198, 206, 227, 236, 284, 290, 295], "local": [7, 107, 184, 192, 194, 258, 262, 267, 274, 275, 284, 292], "link": [7, 12, 54, 137, 150, 193, 224, 227, 234, 258, 262, 265, 290, 299], "out": [7, 12, 13, 14, 54, 55, 56, 75, 107, 112, 192, 194, 196, 198, 201, 202, 205, 227, 248, 253, 258, 259, 260, 262, 263, 265, 271, 284, 286, 287, 290], "By": [7, 77, 130, 192, 207, 208, 243, 246, 258, 259, 262, 284, 285, 290, 296], "correspond": [7, 12, 54, 77, 80, 84, 130, 133, 137, 172, 184, 193, 198, 206, 236, 244, 284, 286, 287, 292, 296], "sparsiti": [7, 109, 111, 184, 192, 205, 227, 239, 244, 297, 299], "reach": [7, 111, 201, 226, 267, 284, 296], "after": [7, 12, 24, 28, 31, 54, 66, 69, 109, 155, 179, 184, 187, 191, 192, 195, 198, 203, 205, 207, 227, 229, 230, 231, 234, 239, 243, 244, 258, 259, 262, 266, 270, 282, 283, 284, 287, 289, 290, 292, 293, 294, 295, 296], "90": [7, 242, 288, 298, 299], "magnitud": [7, 84, 95, 137, 239, 284], "snip": [7, 109, 239, 284, 299], "magnitude_progress": 7, "snip_progress": 7, "snip_momentum_progress": 7, "pattern_lock": [7, 95], "most": [7, 84, 137, 189, 192, 196, 198, 229, 244, 245, 284, 287, 290, 293, 296, 299], "feasibl": 7, "under": [7, 14, 56, 179, 183, 197, 201, 203, 205, 227, 241, 243, 244, 248, 253, 254, 265, 273, 283, 284, 285, 288, 290, 294, 296], "situat": [7, 232, 284], "structur": [7, 109, 127, 167, 184, 193, 198, 239, 264, 266, 269, 278, 284, 285, 287, 294, 297, 299], "unstructur": [7, 103, 239, 284, 299], "nxm": [7, 103, 107, 284], "e": [7, 192, 198, 200, 201, 205, 230, 233, 237, 248, 253, 254, 258, 262, 284, 290, 293, 296], "g": [7, 192, 198, 201, 230, 233, 237, 248, 253, 284, 290, 291, 293, 296], "8x1": 7, "channelx1": [7, 284], "1xchannel": [7, 284], "n": [7, 13, 28, 55, 69, 78, 107, 131, 192, 198, 208, 225, 227, 229, 230, 242, 273, 284, 287, 293, 295], "directli": [7, 53, 80, 84, 108, 133, 137, 194, 205, 243, 244, 252, 284, 286, 287, 294], "our": [7, 188, 203, 205, 234, 244, 247, 266, 267, 270, 292, 297], "itrex": [7, 190, 293], "some": [7, 12, 54, 108, 192, 198, 207, 208, 225, 227, 229, 234, 240, 243, 244, 267, 268, 269, 270, 273, 282, 284, 287, 289, 290, 293, 294, 296, 297], "step": [7, 107, 109, 111, 169, 187, 190, 191, 192, 198, 207, 208, 229, 230, 231, 232, 244, 260, 263, 265, 278, 279, 280, 283, 284, 286, 289, 290, 292, 293, 294, 296], "start": [7, 28, 69, 80, 133, 155, 240, 270, 285, 295, 296, 297, 300], "integ": [7, 70, 80, 84, 91, 107, 109, 133, 137, 190, 192, 195, 198, 206, 208, 224, 287, 290, 293, 296], "end": [7, 12, 27, 28, 54, 68, 69, 109, 115, 151, 153, 206, 207, 208, 230, 231, 236, 240, 244, 259, 275, 282, 284, 290, 294, 295, 296], "determin": [7, 178, 187, 191, 197, 200, 202, 224, 284, 287], "score": [7, 77, 78, 80, 81, 82, 84, 109, 130, 131, 133, 134, 135, 137, 157, 172, 202, 243, 268, 282, 284, 292, 296], "gather": [7, 107], "togeth": [7, 28, 69, 230, 240, 252, 285, 294, 295], "sort": [7, 119, 159, 192, 229, 268, 290, 296], "sinc": [7, 75, 77, 99, 104, 112, 130, 192, 198, 230, 234, 243, 259, 265, 270, 283, 290, 291], "lead": [7, 189, 192, 196, 198, 225, 230, 244, 245, 270, 284, 290, 293], "less": [7, 184, 223, 230, 244, 272, 284], "frequenc": [7, 70, 109, 244, 284, 298], "minimum": [7, 188, 208, 224, 229, 244, 247, 256, 284, 293, 296], "restrict": [7, 284, 292], "everi": [7, 107, 109, 192, 206, 226, 253, 258, 262, 288, 290, 296], "maximum": [7, 12, 28, 54, 69, 78, 109, 116, 131, 146, 154, 192, 198, 208, 224, 227, 229, 244, 284, 287, 293, 295], "schedul": [7, 76, 105, 109, 192, 244, 272, 273, 275, 283], "increas": [7, 188, 192, 228, 239, 247, 248, 265, 270, 290, 296], "cube": [7, 284], "current": [7, 86, 93, 94, 96, 97, 98, 107, 109, 116, 120, 154, 160, 184, 191, 193, 197, 202, 203, 206, 208, 224, 225, 232, 236, 244, 248, 252, 265, 273, 282, 284, 287, 290, 293, 296], "local_config": [7, 93, 94, 96, 97, 98], "6": [7, 188, 190, 192, 195, 198, 236, 247, 287, 293, 296, 299], "queri": [7, 198, 207, 208, 275, 287], "kei": [7, 91, 108, 146, 170, 172, 184, 192, 198, 205, 207, 267, 268, 274, 285, 290, 294, 296], "self": [7, 148, 193, 206, 207, 226, 227, 239, 243, 267, 292, 294, 296], "attent": [7, 12, 54, 200, 230, 284], "dens": [7, 111, 268, 284, 299], "8": [7, 27, 68, 187, 188, 190, 192, 198, 202, 207, 224, 225, 236, 240, 247, 272, 273, 284, 285, 290, 293, 296, 299], "update_config": 7, "10": [7, 14, 56, 116, 154, 197, 205, 223, 227, 234, 240, 244, 267, 268, 284, 286, 295, 296, 299], "hpoconfig": 7, "search_spac": [7, 87, 90, 91, 92], "searcher": [7, 92], "xgb": 7, "loss_typ": [7, 30, 244, 298], "reg": 7, "min_train_sampl": 7, "42": [7, 92, 192, 299], "hyperparamet": [7, 125, 198, 292, 293, 296], "optim": [7, 32, 38, 75, 92, 112, 116, 154, 169, 170, 181, 184, 191, 192, 195, 196, 197, 198, 203, 205, 223, 225, 229, 230, 231, 232, 236, 237, 239, 240, 242, 244, 246, 248, 250, 252, 253, 256, 259, 267, 270, 271, 272, 274, 276, 285, 286, 287, 289, 290, 292, 293, 294, 296, 298], "search": [7, 10, 11, 42, 43, 75, 77, 87, 90, 91, 92, 112, 116, 130, 154, 184, 192, 193, 195, 205, 225, 239, 243, 248, 249, 259, 284, 285, 290, 293, 294, 296, 297], "algorithm": [7, 77, 84, 92, 129, 130, 137, 172, 178, 192, 193, 196, 197, 198, 203, 205, 206, 207, 208, 225, 230, 231, 236, 239, 242, 254, 259, 284, 287, 294, 298], "grid": [7, 92, 203, 284], "bo": 7, "knowledgedistillationlossconfig": [7, 230, 231, 244, 283], "temperatur": [7, 30, 244, 298], "ce": [7, 30, 244, 298], "loss_weight": [7, 30, 244, 298], "knowledg": [7, 30, 70, 195, 231, 233, 237, 239, 244, 246, 298], "distil": [7, 30, 37, 38, 76, 205, 233, 237, 239, 283, 297, 298], "entropi": [7, 224, 296], "probabl": [7, 178, 192, 198, 290], "length": [7, 12, 28, 54, 69, 80, 133, 192, 198, 227, 243, 285, 287, 290, 295], "item": [7, 27, 68, 108, 126, 166, 198, 224, 232, 284, 293, 296], "student": [7, 12, 37, 54, 70, 227, 230, 231, 299], "groundtruth": [7, 80, 133], "label": [7, 10, 11, 12, 14, 15, 16, 17, 20, 24, 28, 33, 42, 43, 54, 56, 57, 58, 59, 62, 66, 69, 77, 79, 84, 130, 132, 137, 138, 150, 169, 196, 202, 226, 227, 229, 243, 244, 287, 295], "teacher": [7, 70, 230, 231, 244, 299], "kl": [7, 170, 178, 207, 208, 224, 236, 244, 296, 298], "sum": [7, 84, 137, 229, 230], "multipli": [7, 187, 188, 192, 247, 290], "distillationconfig": [7, 169, 230, 231, 244, 283], "criterion_conf": 7, "d_conf": [7, 231, 244, 283], "teacher_model": [7, 30, 230, 231, 244], "intermediatelayersknowledgedistillationlossconfig": [7, 230], "layer_map": [7, 30, 230], "add_origin_loss": [7, 30], "map": [7, 28, 69, 72, 74, 75, 79, 81, 82, 84, 99, 104, 109, 112, 132, 134, 135, 137, 174, 176, 192, 198, 225, 227, 232, 243, 244, 258, 262, 270, 284, 287, 290], "relationship": [7, 267], "student_layer_nam": 7, "student_layer_output_process": 7, "teacher_layer_nam": 7, "teacher_layer_output_process": 7, "bert": [7, 12, 28, 50, 53, 54, 69, 205, 227, 230, 243, 245, 253, 276, 279, 280, 284, 295, 299], "desir": [7, 24, 28, 66, 69, 190, 207, 208, 284, 293, 295], "its": [7, 14, 28, 50, 56, 69, 72, 78, 79, 109, 116, 131, 132, 154, 174, 192, 197, 198, 200, 227, 230, 241, 243, 245, 256, 258, 262, 265, 266, 284, 290, 292, 295, 296], "either": [7, 80, 133, 191, 196, 197, 198, 249, 253, 273, 283, 286, 287], "take": [7, 10, 11, 28, 33, 42, 43, 47, 69, 107, 116, 137, 138, 150, 154, 169, 192, 196, 200, 202, 203, 226, 229, 230, 236, 244, 265, 284, 287, 289, 290, 295, 296, 298], "serv": [7, 146, 198, 273, 278, 279, 280], "tupl": [7, 10, 11, 24, 28, 42, 43, 66, 69, 74, 125, 138, 150, 165, 169, 176, 183, 193, 196, 207, 225, 227, 243, 244, 287, 295], "numer": [7, 84, 137, 188, 189, 192, 196, 208, 245, 247, 285, 287, 290], "abbrevi": 7, "same": [7, 12, 28, 54, 69, 80, 133, 184, 188, 192, 197, 198, 206, 208, 223, 226, 227, 230, 232, 236, 244, 247, 249, 253, 258, 262, 284, 286, 287, 290, 293, 294, 295, 296], "further": [7, 189, 198, 200, 205, 245, 246, 248, 250, 259, 265, 287], "layer_nam": [7, 284], "student_model": [7, 30, 244], "l1": 7, "len": [7, 28, 69, 227, 232, 295], "origin": [7, 12, 28, 29, 54, 69, 93, 94, 96, 97, 98, 108, 109, 128, 155, 168, 179, 184, 192, 193, 194, 196, 198, 201, 227, 253, 284, 287, 290, 295, 296, 298], "selfknowledgedistillationlossconfig": [7, 230, 244], "like": [7, 10, 11, 14, 42, 43, 44, 56, 75, 84, 109, 112, 113, 137, 146, 150, 169, 192, 196, 198, 201, 202, 203, 206, 207, 229, 230, 231, 239, 253, 268, 270, 283, 284, 287, 290, 291, 293, 296], "student1_layer_name1": 7, "teacher_layer_name1": 7, "student2_layer_name1": 7, "student1_layer_name2": 7, "teacher_layer_name2": 7, "student2_layer_name2": 7, "calcul": [7, 15, 16, 57, 58, 81, 82, 107, 109, 119, 134, 135, 159, 170, 184, 190, 192, 196, 198, 224, 227, 243, 244, 256, 268, 282, 284, 287, 290, 292, 293, 296, 298], "soft": 7, "l2": [7, 284], "hard": [7, 226, 229], "resblock": 7, "featur": [7, 12, 13, 24, 28, 54, 55, 66, 69, 189, 194, 198, 201, 205, 223, 226, 228, 230, 244, 245, 246, 248, 252, 253, 256, 265, 267, 271, 284, 285, 291, 295], "deepst": 7, "fc": [7, 284], "3": [7, 14, 28, 56, 69, 80, 133, 184, 188, 189, 191, 192, 194, 196, 197, 198, 202, 203, 205, 224, 225, 226, 227, 230, 232, 234, 236, 237, 240, 243, 244, 245, 247, 248, 252, 256, 258, 262, 267, 272, 273, 275, 276, 278, 282, 284, 286, 287, 290, 291, 292, 293, 295, 296, 299], "02": [7, 242, 299], "nn": [7, 74, 138, 150, 176, 179, 183, 192, 193, 198, 202, 230, 244, 246, 290, 293, 294], "crossentropyloss": [7, 230, 244], "sgd": [7, 35, 230, 244, 286, 298], "lr": [7, 192, 230, 232, 244], "0001": [7, 230, 244, 286], "learning_r": [7, 244, 286, 298], "callabl": [7, 82, 135, 169, 193, 196, 225, 226], "altern": [7, 150], "distil_loss": [7, 244], "mixedprecisionconfig": [7, 138, 244, 245], "mixedprecis": [7, 85, 244], "target": [7, 108, 111, 116, 154, 179, 193, 227, 232, 244, 284, 294, 295, 296, 298], "convers": [7, 86, 189, 190, 198, 201, 206, 207, 244, 245, 287, 289, 293], "fp16": [7, 126, 166, 198, 287], "fallback": [7, 119, 120, 157, 159, 160, 189, 190, 191, 234, 245, 268, 289, 296], "won": [7, 287, 290], "work": [7, 75, 112, 193, 198, 204, 207, 225, 226, 230, 260, 263, 271, 289, 290, 291, 293, 294], "tensor": [7, 28, 69, 72, 74, 107, 109, 119, 146, 159, 174, 176, 179, 183, 184, 187, 188, 193, 196, 202, 208, 225, 226, 227, 229, 247, 284, 287, 291, 294, 295, 296], "trace": [7, 74, 157, 176, 191, 193, 202, 255, 296], "mix_precis": [7, 129, 244, 245], "converted_model": [7, 138, 244, 245], "exportconfig": 7, "opset_vers": [7, 73, 74, 175, 176, 234], "14": [7, 73, 74, 175, 176, 205, 234, 240, 242, 280, 299], "input_nam": [7, 73, 74, 146, 175, 176, 234], "output_nam": [7, 73, 74, 146, 175, 176, 234], "dynamic_ax": [7, 74, 176, 234], "common": [7, 26, 76, 86, 90, 91, 92, 172, 190, 194, 195, 196, 200, 225, 227, 231, 232, 234, 238, 240, 244, 287, 293], "export": [7, 76, 80, 133, 177, 187, 191, 205, 237, 251, 266, 268, 294, 297], "select": [7, 12, 54, 179, 192, 198, 202, 203, 224, 239, 240, 265, 284, 287, 290, 294, 296], "opset": [7, 73, 74, 175, 176, 234], "version": [7, 73, 74, 129, 175, 176, 190, 200, 202, 206, 225, 236, 240, 241, 244, 258, 260, 262, 263, 285, 293, 296, 297], "qlinear": [7, 14, 21, 56, 63, 84, 137, 174, 206, 255], "ax": [7, 74, 176], "inform": [7, 10, 11, 31, 33, 34, 42, 43, 107, 109, 110, 111, 113, 137, 184, 188, 190, 192, 196, 200, 201, 204, 205, 206, 207, 208, 209, 211, 215, 218, 221, 224, 225, 230, 236, 244, 246, 247, 260, 263, 266, 267, 270, 271, 273, 274, 278, 279, 284, 289, 290, 291, 293, 294, 298, 299, 300], "onnxqlinear2qdqconfig": 7, "onnxqlinear2qdq": 7, "torch2onnxconfig": [7, 234], "torch2onnx": [7, 71, 173], "qdq_op_fp32_bia": 7, "qdq_op_int32_bia": 7, "qdq_op_fp32_bias_qdq": 7, "resnet50": [7, 194, 205, 229, 232, 234, 245, 248, 252, 284, 287, 292, 299], "int8_onnx_config": [7, 234], "randn": [7, 234], "224": [7, 24, 66, 205, 227, 232, 234, 237, 244, 248, 267, 295, 298], "batch_siz": [7, 12, 13, 31, 44, 46, 52, 53, 54, 55, 74, 176, 203, 226, 227, 232, 234, 238, 244, 248, 287], "q_model": [7, 86, 150, 187, 190, 191, 195, 197, 202, 226, 227, 229, 232, 234, 237, 238, 243, 244, 246, 267, 268, 287, 288, 289, 290], "tf2onnxconfig": [7, 234], "tf2onnx": [7, 71, 173], "axi": 7, "addit": [7, 169, 192, 207, 208, 230, 259, 267, 273, 290, 291, 296], "keyword": 7, "argument": [7, 193, 196, 197, 203, 229, 269, 270, 273, 276, 278, 279, 280, 290], "output_graph": 7, "nasconfig": [7, 88, 90, 203], "search_algorithm": [7, 89, 203], "dyna": [7, 89, 203, 239, 286], "na": [7, 76, 142, 239, 299], "mxnet": [7, 14, 17, 21, 28, 49, 53, 56, 59, 63, 69, 75, 84, 112, 137, 138, 143, 150, 201, 205, 206, 207, 224, 226, 233, 236, 239, 244, 245, 246, 286, 296, 298], "kera": [7, 14, 21, 35, 56, 63, 141, 146, 194, 196, 207, 226, 232, 246, 255, 256], "pytorch": [7, 12, 14, 17, 21, 28, 30, 35, 37, 53, 54, 56, 59, 63, 69, 74, 75, 84, 85, 105, 107, 110, 112, 120, 137, 138, 147, 150, 160, 176, 177, 184, 188, 193, 201, 202, 203, 205, 206, 207, 208, 224, 225, 226, 230, 231, 233, 236, 239, 240, 242, 244, 245, 246, 247, 248, 250, 253, 254, 255, 256, 265, 267, 276, 279, 280, 284, 285, 286, 290, 291, 293, 296, 298], "built": [8, 9, 12, 13, 18, 20, 22, 23, 24, 25, 28, 33, 35, 40, 41, 45, 48, 50, 54, 55, 60, 62, 64, 65, 66, 67, 69, 113, 137, 140, 148, 150, 169, 197, 203, 206, 227, 232, 244, 258, 262, 282, 287, 292, 295, 296, 298], "multipl": [8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 35, 40, 41, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 138, 139, 140, 142, 148, 196, 223, 227, 234, 244, 272, 275, 283, 284, 292, 293, 296], "sigopt": [9, 41, 285], "tpe": [9, 41], "provid": [10, 11, 28, 42, 43, 69, 75, 80, 99, 104, 112, 113, 133, 138, 150, 169, 177, 179, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 203, 205, 206, 207, 208, 223, 226, 229, 231, 232, 233, 239, 240, 242, 243, 244, 245, 246, 248, 252, 256, 259, 265, 266, 267, 273, 274, 284, 286, 287, 290, 293, 294, 296, 297, 298, 299], "sigopttunestrategi": [10, 42], "q_dataload": [10, 11, 42, 43, 116, 119, 121, 122, 151, 154, 155, 159, 161, 162, 238, 296], "q_func": [10, 11, 42, 43, 116, 119, 121, 122, 151, 154, 155, 159, 161, 162, 206, 207, 244, 296], "eval_func": [10, 11, 42, 43, 113, 116, 119, 121, 122, 138, 150, 151, 154, 155, 159, 161, 162, 169, 202, 226, 227, 229, 230, 231, 232, 244, 268, 287, 288, 289, 290, 296, 298], "eval_metr": [10, 11, 138, 150, 151, 154, 155, 159, 161, 162, 169, 243, 267, 287], "q_hook": [10, 11, 42, 43, 116, 119, 121, 122, 151, 154, 155, 159, 161, 162], "hpo": [10, 42, 284], "low": [10, 11, 15, 16, 42, 43, 57, 58, 75, 85, 112, 138, 189, 192, 197, 198, 206, 207, 223, 224, 227, 232, 244, 245, 270, 285, 287, 290, 293, 296], "initi": [10, 11, 12, 30, 42, 43, 51, 54, 108, 109, 126, 150, 166, 169, 196, 198, 203, 208, 227, 243, 264, 284, 287, 293, 296], "loader": [10, 11, 42, 43, 138, 150, 169, 179, 226, 287], "mandatori": [10, 11, 42, 43, 150, 244, 298], "It": [10, 11, 37, 42, 43, 82, 84, 91, 107, 112, 119, 135, 137, 138, 150, 155, 159, 169, 188, 191, 192, 193, 194, 196, 197, 198, 206, 207, 208, 224, 229, 230, 244, 247, 251, 254, 259, 265, 266, 267, 268, 270, 271, 273, 284, 287, 290, 291, 292, 296, 298], "yield": [10, 11, 31, 42, 43, 52, 116, 138, 150, 154, 169, 198, 226, 287, 296], "dataset": [10, 11, 23, 31, 42, 43, 44, 46, 47, 51, 52, 53, 65, 80, 81, 82, 84, 113, 133, 134, 135, 137, 138, 150, 169, 172, 190, 192, 194, 195, 196, 198, 203, 205, 206, 207, 226, 232, 237, 243, 244, 253, 267, 268, 278, 284, 287, 290, 291, 293, 296, 298, 299], "_": [10, 11, 42, 43, 150, 189, 190, 192, 193, 196, 198, 202, 203, 205, 206, 207, 224, 229, 230, 232, 234, 236, 244, 245, 246, 248, 254, 258, 260, 262, 263, 270, 273, 274, 282, 284, 287, 290, 291, 292, 293, 294, 296, 298], "depend": [10, 11, 29, 42, 43, 138, 150, 169, 201, 235, 236, 271, 286, 287, 296], "implement": [10, 11, 12, 14, 42, 43, 49, 52, 53, 54, 56, 77, 130, 138, 148, 150, 157, 169, 192, 208, 226, 227, 243, 244, 256, 266, 284, 287, 290, 291, 294, 296, 298], "well": [10, 11, 42, 43, 138, 150, 169, 188, 198, 203, 205, 225, 227, 247, 284, 287, 291, 293, 298], "taken": [10, 11, 42, 43, 138, 150, 169, 287], "reserv": [10, 11, 42, 43], "abl": [10, 11, 42, 43, 138, 150, 169, 196, 198, 256, 265, 287], "pre": [10, 11, 12, 42, 43, 54, 138, 150, 169, 191, 192, 197, 198, 225, 227, 230, 231, 244, 253, 270, 284, 285, 287, 290, 294, 296], "through": [10, 11, 42, 43, 137, 138, 150, 191, 192, 193, 198, 205, 223, 236, 238, 239, 243, 251, 272, 282, 283, 284, 286, 287, 290], "tuner": [10, 11, 42, 43, 75, 112, 138, 150, 169, 287], "encapsul": [10, 11, 42, 43, 138, 150, 169, 246], "scalar": [10, 11, 42, 43, 138, 150, 169, 243, 287, 296], "pseudo": [10, 11, 42, 43, 150, 169, 192, 290, 294], "code": [10, 11, 29, 42, 43, 86, 110, 113, 150, 169, 192, 194, 202, 205, 206, 207, 208, 227, 230, 231, 232, 238, 239, 241, 243, 248, 250, 252, 253, 254, 256, 259, 265, 269, 270, 272, 273, 274, 282, 283, 284, 285, 286, 287, 292, 293, 294, 295], "someth": [10, 11, 14, 42, 43, 56, 150, 169], "def": [10, 11, 42, 43, 150, 169, 189, 190, 193, 194, 196, 197, 198, 202, 206, 225, 226, 227, 230, 231, 232, 243, 244, 287, 293, 294, 296], "fefin": [11, 43], "tpetunestrategi": [11, 43], "pytorchbertdataset": [12, 54], "task": [12, 19, 54, 61, 84, 137, 190, 192, 198, 227, 230, 231, 234, 239, 243, 244, 268, 272, 275, 284, 288, 290, 293, 299], "model_typ": [12, 54, 184, 227], "transform": [12, 13, 14, 15, 16, 17, 19, 21, 23, 54, 55, 56, 57, 58, 59, 61, 63, 65, 190, 191, 192, 195, 198, 202, 203, 205, 224, 227, 230, 231, 232, 233, 237, 242, 244, 248, 253, 254, 255, 256, 268, 276, 279, 280, 284, 285, 289, 290, 293, 294, 296, 298], "filter": [12, 13, 14, 15, 16, 17, 19, 23, 54, 55, 56, 57, 58, 59, 61, 65, 184, 208, 227, 239, 284, 294], "construct": [12, 15, 16, 19, 26, 31, 33, 34, 36, 54, 57, 58, 61, 137, 142, 146, 168, 172, 197, 200, 207, 208, 227, 232, 284, 296], "tensordataset": [12, 54, 227], "full": [12, 13, 14, 54, 55, 56, 179, 184, 192, 205, 224, 227, 229, 235, 241, 266, 271, 284, 290, 291], "repo": [12, 54, 199, 201, 227, 233, 258, 260, 262, 263, 300], "http": [12, 14, 54, 56, 77, 78, 80, 81, 82, 107, 109, 110, 130, 131, 133, 134, 135, 137, 150, 192, 202, 227, 229, 237, 240, 241, 244, 254, 260, 263, 267, 269, 270, 271, 272, 273, 276, 278, 279, 280, 284, 291], "github": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 192, 201, 205, 227, 229, 233, 240, 241, 244, 254, 260, 263, 267, 269, 270, 271, 272, 273, 276, 279, 280, 291], "com": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 200, 225, 227, 229, 237, 240, 241, 244, 248, 254, 267, 269, 270, 272, 273, 276, 279, 280, 291, 292, 299], "huggingfac": [12, 54, 179, 188, 227, 233, 237, 247, 253, 254, 255, 256, 276, 277, 279, 280, 293, 299], "your": [12, 52, 54, 191, 201, 205, 225, 226, 227, 229, 232, 241, 244, 248, 251, 252, 253, 258, 259, 260, 262, 263, 265, 267, 271, 273, 278, 279, 280, 284, 285, 292, 294, 296, 297], "todo": [12, 15, 54, 57, 80, 126, 133, 166], "easi": [12, 54, 112, 191, 193, 196, 234, 244, 268, 272, 285, 287, 290, 292], "ad": [12, 54, 77, 116, 130, 154, 187, 189, 192, 207, 208, 229, 245, 248, 253, 256, 260, 263, 273, 284, 290, 294], "load": [12, 27, 28, 54, 68, 69, 138, 146, 150, 183, 184, 196, 207, 226, 258, 262, 266, 268, 286, 287, 288, 293], "arg": [12, 13, 14, 54, 55, 56, 107, 116, 154, 179, 180, 188, 192, 193, 227, 232, 244, 247, 254, 284, 287, 290, 293, 294, 295], "classifi": [12, 54, 84, 137, 227, 230], "squad": [12, 28, 54, 69, 81, 82, 84, 134, 135, 137, 227, 243, 284, 295, 299], "distilbert": [12, 54, 227, 245, 285, 299], "xlnet": [12, 54, 227], "xlm": [12, 54, 227, 299], "condit": [12, 13, 14, 28, 54, 55, 56, 69, 115, 151, 153, 197, 227, 241, 295, 296], "101": [12, 54, 84, 137, 198, 243, 274, 293, 299], "2043": [12, 54], "2001": [12, 54], "onnxrtbertdataset": [12, 54], "data_dir": [12, 54, 227], "model_name_or_path": [12, 54, 227, 244, 253, 254, 269, 276, 279, 280, 288], "max_seq_length": [12, 28, 54, 69, 227, 295], "128": [12, 15, 16, 28, 54, 57, 58, 69, 192, 197, 198, 227, 244, 287, 290, 295, 299], "do_lower_cas": [12, 27, 28, 54, 68, 69, 227, 295], "mrpc": [12, 54, 84, 137, 227, 243, 253, 276, 279, 280, 284, 296, 299], "dynamic_length": [12, 54, 227], "onnxrt": [12, 14, 21, 28, 54, 56, 63, 69, 84, 137, 182, 206, 229, 245, 267, 287, 299], "dir": [12, 54, 179, 183, 227, 235, 238], "path": [12, 13, 14, 28, 54, 55, 56, 69, 70, 73, 74, 75, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 126, 138, 146, 150, 166, 175, 176, 179, 181, 184, 191, 192, 193, 202, 203, 206, 227, 229, 232, 238, 243, 244, 245, 246, 251, 254, 265, 268, 270, 273, 278, 279, 280, 283, 290, 295, 298], "shortcut": [12, 54, 227], "token": [12, 25, 28, 54, 67, 69, 77, 78, 130, 131, 179, 190, 192, 198, 205, 227, 243, 244, 267, 268, 290, 292, 293, 295, 296], "longer": [12, 28, 54, 69, 227, 295], "than": [12, 28, 54, 69, 184, 188, 192, 198, 203, 205, 223, 227, 238, 247, 270, 278, 282, 283, 284, 287, 290, 292, 295, 296], "truncat": [12, 28, 54, 69, 227, 295], "shorter": [12, 28, 54, 69, 227, 295], "pad": [12, 28, 54, 69, 227, 295], "lowercas": [12, 54, 227], "fine": [12, 54, 193, 225, 227, 251, 284, 285, 287], "choic": [12, 54, 192, 196, 198, 206, 227, 243, 271, 293], "qqp": [12, 54, 227, 243, 299], "qnli": [12, 54, 227, 243, 299], "rte": [12, 54, 227, 243, 299], "st": [12, 54, 227, 243], "b": [12, 54, 184, 192, 198, 201, 224, 227, 243, 284, 290, 293, 296], "cola": [12, 54, 227, 243, 299], "mnli": [12, 54, 227, 243, 299], "wnli": [12, 54, 227, 243], "mobilebert": [12, 54, 227, 230], "roberta": [12, 54, 227, 299], "fix": [12, 54, 109, 192, 226, 227, 252, 284, 287, 290, 296], "uncas": [12, 28, 54, 69, 227, 295, 299], "load_and_cache_exampl": [12, 54], "cach": [12, 54, 192, 198, 235, 287, 290], "helper": [12, 13, 14, 27, 54, 55, 56, 68, 72, 73, 74, 146, 174, 175, 176, 182], "convert_examples_to_featur": [12, 28, 54, 69], "max_length": [12, 54], "label_list": [12, 54, 84, 137], "output_mod": [12, 54], "classif": [12, 28, 54, 69, 84, 110, 137, 230, 234, 243, 254, 268, 276, 279, 280, 284, 285], "pad_token": [12, 54], "pad_token_segment_id": [12, 54], "mask_padding_with_zero": [12, 54], "inputfeatur": [12, 28, 54, 69], "properti": [12, 54, 168, 241], "input_id": [12, 28, 54, 69, 244], "vocabulari": [12, 27, 28, 54, 68, 69, 295], "attention_mask": [12, 54, 244], "avoid": [12, 54, 202, 225, 294], "usual": [12, 54, 196, 198, 207, 229, 230, 270, 283, 284, 287, 288, 293], "NOT": [12, 54, 236], "token_type_id": [12, 54, 244], "segment": [12, 54, 78, 80, 131, 133, 201], "portion": [12, 54], "them": [12, 54, 192, 198, 202, 208, 226, 229, 234, 236, 238, 268, 271, 283, 284, 290, 296], "problem": [12, 54, 84, 137, 189, 243, 245, 266], "regress": [12, 54, 201, 229], "seq_length": [12, 54], "tensorflowbertdataset": [12, 54], "root": [12, 13, 14, 17, 54, 55, 56, 59, 84, 137, 227, 232, 243, 244, 298], "label_fil": [12, 28, 54, 69, 227, 295], "tfrecord": [12, 13, 14, 54, 55, 56, 227], "guid": [12, 54, 196, 202, 205, 225, 227, 230, 240, 248, 256, 265, 300], "parsedecodebert": [12, 54], "tensorflowmodelzoobertdataset": [12, 13, 54, 55], "pars": [12, 13, 24, 28, 54, 55, 66, 69, 207, 208, 295], "num_cor": [12, 13, 17, 54, 55, 59, 227], "28": [12, 13, 17, 54, 55, 59, 227, 299], "three": [12, 54, 115, 151, 153, 189, 193, 197, 198, 202, 206, 207, 224, 240, 245, 259, 273, 283, 287, 289, 292, 293, 294], "tf": [12, 13, 14, 28, 53, 54, 55, 56, 69, 144, 146, 194, 196, 225, 232, 240, 246, 285, 289, 295], "record": [12, 13, 14, 20, 30, 37, 54, 55, 56, 62, 184, 197, 227, 270, 290, 292, 294, 296], "resiz": [12, 13, 24, 28, 54, 55, 66, 69, 227, 295], "coco": [13, 20, 55, 62, 80, 84, 133, 137, 243, 284], "parsedecodecoco": [13, 55], "cocorecorddataset": [13, 55], "interleav": [13, 55, 227], "parallel": [13, 55, 227, 244, 272, 275, 296], "cocoraw": [13, 55, 227], "img_dir": [13, 55, 227], "val2017": [13, 55, 227], "anno_dir": [13, 55, 227], "annot": [13, 55, 80, 133, 207, 208, 227, 243, 284, 296], "instances_val2017": [13, 55, 227], "json": [13, 28, 55, 69, 183, 192, 227, 246, 266, 273, 274, 278, 279, 280, 290, 295], "arrang": [13, 14, 17, 55, 56, 59, 227, 284], "wai": [13, 14, 17, 55, 56, 59, 146, 192, 195, 198, 203, 208, 226, 227, 229, 243, 244, 248, 251, 266, 267, 271, 272, 273, 283, 284, 287, 290, 293, 296, 298], "jpg": [13, 17, 19, 55, 59, 61, 205, 227], "imag": [13, 14, 17, 19, 24, 28, 55, 56, 59, 61, 66, 69, 80, 133, 198, 205, 227, 232, 234, 284, 286, 293, 294, 295, 299], "coconpi": [13, 55, 227], "npy_dir": [13, 55, 227], "npy": [13, 55, 227], "tensorflowdataset": [14, 56], "pytorchdataset": [14, 56], "mxnetdataset": [14, 56], "onnxrtqldataset": [14, 56], "onnxrtitdataset": [14, 56], "IT": [14, 21, 56, 63, 285], "pytorchmxnetwrapdataset": [14, 56], "datafunc": [14, 56], "pytorchmxnetwrapfunct": [14, 28, 56, 69], "framework_dataset": [14, 56], "convent": [14, 56, 80, 133, 188, 201, 230, 247], "imageclassifi": [14, 56], "choos": [14, 56, 179, 193, 198, 239, 253, 285, 291, 293, 296, 298], "tensorflow_itex": [14, 17, 19, 21, 56, 59, 61, 63, 226, 286], "onnxrt_qdq": [14, 21, 56, 63, 286], "onnxrt_qlinearop": [14, 21, 28, 56, 63, 69, 286], "onnxrt_integerop": [14, 21, 28, 56, 63, 69, 286], "pytorch_ipex": [14, 21, 56, 63, 244, 286, 298], "pytorch_fx": [14, 21, 56, 63, 244, 286], "dataset_registri": [14, 56], "dataset_typ": [14, 56], "dataset_format": [14, 56], "data_format": [14, 24, 56, 66], "eg": [14, 56, 227, 286], "raw_imag": [14, 56], "overwrit": [14, 56, 258, 262], "__getitem__": [14, 28, 52, 56, 69, 226, 227, 244], "__len__": [14, 52, 56, 227], "size": [14, 20, 24, 28, 46, 47, 53, 56, 62, 66, 69, 107, 146, 148, 184, 188, 191, 192, 198, 200, 207, 226, 227, 232, 235, 244, 247, 265, 266, 282, 284, 287, 288, 290, 293, 295, 298, 299], "iterabledataset": [14, 52, 56], "also": [14, 28, 53, 56, 69, 77, 130, 137, 148, 150, 192, 193, 194, 195, 198, 201, 203, 206, 207, 208, 226, 229, 233, 237, 239, 243, 244, 248, 253, 258, 259, 262, 265, 266, 267, 270, 271, 282, 284, 285, 287, 289, 290, 293, 296], "__iter__": [14, 52, 56, 226, 227, 244], "over": [14, 56, 84, 137, 207, 233, 237, 239, 243, 256, 265, 271, 275, 284, 286, 293, 296], "download_url": [14, 56], "url": [14, 56, 201, 241, 276, 277, 284], "filenam": [14, 56, 184, 227, 271], "md5": [14, 56], "download": [14, 56, 227, 229, 240, 270, 276, 291], "address": [14, 56, 189, 197, 200, 225, 245, 267, 270, 273, 285], "gen_bar_updat": [14, 56], "progress": [14, 56, 259, 265, 267, 284, 287], "bar": [14, 56, 265, 285], "check_integr": [14, 56], "fpath": [14, 56], "check": [14, 56, 72, 108, 174, 183, 184, 196, 205, 229, 232, 240, 249, 251, 253, 260, 263, 264, 268, 271, 274, 275, 291], "checksum": [14, 56], "calculate_md5": [14, 56], "chunk_siz": [14, 56], "1024": [14, 56, 251], "cifar10": [14, 56, 227], "cifar100": [14, 56, 227], "databas": [14, 56, 273], "extract": [14, 56, 128, 168, 227], "otherwis": [14, 28, 56, 69, 184, 192, 200, 207, 227, 260, 263, 286, 290, 295], "www": [14, 56, 227, 299], "c": [14, 56, 184, 192, 198, 227, 235, 290, 296], "toronto": [14, 56, 227], "edu": [14, 56, 227], "kriz": [14, 56, 227], "cifar": [14, 56, 227, 299], "python": [14, 32, 56, 76, 129, 184, 186, 202, 205, 225, 227, 229, 232, 235, 240, 244, 250, 256, 259, 265, 269, 270, 272, 273, 275, 278, 280, 284, 285, 295], "tar": [14, 56, 227, 229, 260, 263], "gz": [14, 56, 227, 229, 260, 263], "manual": [14, 56, 227, 248, 254, 256, 259, 273, 278, 279, 280, 284], "subset": [14, 17, 56, 59, 227, 270], "internet": [14, 56, 227, 267], "put": [14, 56, 227, 230], "again": [14, 56, 227, 268, 270, 289], "pytorchcifar10": [14, 56], "mxnetcifar10": [14, 56], "tensorflowcifar10": [14, 56], "pytorchcifar100": [14, 56], "mxnetcifar100": [14, 56], "tensorflowcifar100": [14, 56], "mnist": [14, 56, 227, 232], "modifi": [14, 56, 168, 202, 208, 232, 236, 269, 270, 284, 298], "nation": [14, 56, 200], "institut": [14, 56], "standard": [14, 28, 56, 69, 201, 207, 225, 229, 234, 243, 295, 296], "technologi": [14, 56, 188, 242, 244, 247], "fashionmnist": [14, 56, 227], "npz": [14, 56, 227], "idx1": [14, 56, 227], "ubyt": [14, 56, 227], "idx3": [14, 56, 227], "t10k": [14, 56, 227], "pytorchmnist": [14, 56], "mxnetmnist": [14, 56], "tensorflowmnist": [14, 56], "pytorchfashionmnist": [14, 56], "mxnetfashionmnist": [14, 56], "tensorflowfashionmnist": [14, 56], "imagefold": [14, 56, 227, 232, 244], "expect": [14, 56, 192, 194, 198, 200, 201, 235, 242, 265, 287, 290, 296], "folder": [14, 19, 56, 61, 138, 150, 183, 192, 193, 227, 253, 258, 262, 271, 278, 279, 280, 290, 294], "subfold": [14, 56, 268], "repres": [14, 19, 56, 61, 80, 82, 84, 133, 135, 137, 191, 196, 198, 200, 208, 224, 227, 234, 273, 284, 287, 288, 296], "belong": [14, 56, 142, 287], "class_1": [14, 56, 227], "xxx": [14, 56, 227, 244], "png": [14, 56, 227], "xxy": [14, 56, 227], "xxz": [14, 56, 227], "class_n": [14, 56, 227], "123": [14, 56, 227, 295], "nsdf3": [14, 56, 227], "asd932_": [14, 56, 227], "categori": [14, 56, 79, 132, 223, 227, 255], "mxnetimagefold": [14, 56], "tensorflowtfrecorddataset": [14, 56], "tensorflowimagerecord": [14, 56], "imagenet": [14, 17, 24, 56, 59, 66, 194, 203, 229, 244, 254, 270, 284, 294, 295, 298, 299], "000": [14, 56, 205, 227], "001": [14, 56, 198, 227, 232, 293, 298], "099": [14, 56, 227], "follow": [14, 56, 77, 80, 130, 133, 188, 189, 190, 195, 198, 200, 201, 202, 203, 205, 206, 207, 208, 225, 226, 227, 230, 231, 232, 236, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 258, 262, 267, 269, 270, 273, 278, 283, 284, 286, 287, 290, 293, 294, 296], "tensorflowvocrecord": [14, 56], "pascal": [14, 56], "voc": [14, 56, 84, 137], "2012": [14, 56], "val": [14, 17, 56, 59, 108, 229, 244, 270], "00000": [14, 56], "00004": [14, 56], "00001": [14, 56], "00003": [14, 56], "dummi": [15, 16, 57, 58, 84, 137, 196, 205, 227, 237, 243, 244, 267], "dummydataset": [15, 16, 57, 58, 196], "shape": [15, 16, 24, 28, 57, 58, 66, 69, 80, 133, 192, 196, 198, 205, 227, 236, 237, 244, 267, 268, 290, 293, 295], "high": [15, 16, 57, 58, 196, 227, 229, 240, 270, 285, 296], "127": [15, 16, 57, 58, 198, 227, 287, 293], "float32": [15, 16, 28, 57, 58, 69, 80, 133, 179, 192, 198, 206, 223, 227, 244, 287, 290, 293, 295], "rang": [15, 16, 28, 57, 58, 69, 169, 179, 187, 188, 189, 192, 193, 196, 198, 205, 206, 208, 224, 227, 229, 230, 231, 232, 244, 247, 268, 270, 283, 284, 287, 290, 293, 295], "stand_norm": [15, 16, 57, 58, 227], "real": [15, 31, 57, 198, 207, 224, 232, 267, 274, 285, 287], "dummy_v2": [16, 58, 227], "sparse_dummy_v2": [16, 58, 227], "input_shap": [16, 58, 227], "label_shap": [16, 58, 227], "sparsedummydataset": [16, 58], "dense_shap": [16, 58, 227], "sparse_ratio": [16, 58, 227], "imagenetraw": [17, 59, 227], "data_path": [17, 59, 227], "image_list": [17, 59, 227], "img1": [17, 59, 227], "img2": [17, 59, 227], "imgx": [17, 59, 227], "read": [17, 28, 59, 69, 108, 227, 289, 292], "val_map": [17, 59, 227], "txt": [17, 59, 227, 229, 240, 267, 269, 270, 272, 273], "pytorchimagenetraw": [17, 59], "mxnetimagenetraw": [17, 59], "tensorflowimagenetraw": [17, 59], "inteltensorflow": [17, 19, 59, 61], "tensorflowimagenetdataset": [17, 59], "onnxrtimagenetdataset": [17, 59], "class": [18, 60, 91, 138, 150, 192, 193, 194, 196, 197, 202, 203, 207, 225, 226, 227, 230, 243, 244, 256, 282, 283, 287, 291, 294, 296, 298], "bert_dataset": [18, 60], "coco_dataset": [18, 60], "dummy_dataset": [18, 60], "dummy_dataset_v2": [18, 60], "imagenet_dataset": [18, 60], "style_transfer_dataset": [18, 60], "style": [19, 47, 61, 225, 227, 238], "transfer": [19, 61, 70, 198, 227, 230, 231, 244, 293], "styletransferdataset": [19, 61], "content_fold": [19, 61, 227], "style_fold": [19, 61, 227], "crop_ratio": [19, 61, 227], "resize_shap": [19, 61, 227], "256": [19, 24, 61, 66, 227, 232, 244, 295], "image_format": [19, 61, 227], "holder": [19, 61, 227], "labelbalancecocorecordfilt": [20, 62], "balanc": [20, 62, 188, 190, 192, 196, 198, 247, 290, 293], "labelbalancecocorawfilt": [20, 62], "tensorflowfilt": [21, 63], "onnxrtqlfilt": [21, 63], "mode": [21, 63, 80, 126, 133, 146, 166, 181, 183, 184, 192, 193, 206, 207, 229, 239, 258, 262, 270, 271, 287, 289, 290, 296], "onnxrtitfilt": [21, 63], "pytorchfilt": [21, 63], "mxnetfilt": [21, 63], "filter_registri": [21, 63], "filter_typ": [21, 63], "__call__": [21, 63], "write": [21, 63, 184, 232, 238, 244, 248, 294], "coco_filt": [22, 64], "quantizedinput": [24, 66, 295], "uint8": [24, 66, 80, 128, 133, 168, 196, 198, 206, 227, 236, 286, 287, 295, 298], "point": [24, 66, 81, 82, 91, 116, 134, 135, 154, 184, 187, 188, 189, 190, 191, 192, 195, 198, 243, 247, 265, 270, 271, 287, 290, 293, 295, 296], "labelshift": [24, 66, 295], "label_shift": [24, 66, 295], "parsedecodeimagenet": [24, 66, 295], "proto": [24, 28, 66, 69, 295], "parsedecodeimagenettransform": [24, 66], "decod": [24, 66, 77, 130, 243, 295], "v1": [24, 66, 81, 82, 84, 134, 135, 137, 146, 190, 232, 234, 235, 243, 246, 269, 284, 291, 292, 293, 299], "tensorflowtransposelastchannel": 24, "transpos": [24, 28, 69, 73, 107, 175, 290, 295], "nhwc": 24, "nchw": 24, "tensorflowshiftrescal": 24, "rescal": [24, 28, 69, 295], "tensorflowresizecropimagenettransform": [24, 66], "height": [24, 28, 66, 69, 107, 232, 295, 298], "width": [24, 28, 66, 69, 107, 198, 224, 232, 284, 287, 295, 298], "random_crop": [24, 66, 295], "resize_sid": [24, 66, 295], "resize_method": [24, 66], "bilinear": [24, 28, 66, 69, 295], "random_flip_left_right": [24, 66, 295], "mean_valu": [24, 66, 295], "channels_last": [24, 66, 248], "subpixel": [24, 66], "rgb": [24, 66], "seri": [24, 66, 205, 240, 244, 295], "applic": [24, 66, 192, 194, 198, 208, 234, 248, 265, 267, 273, 274, 278, 279, 285, 290, 293, 294, 295, 297], "result": [24, 28, 66, 69, 77, 80, 81, 82, 84, 130, 133, 134, 135, 137, 150, 157, 169, 183, 184, 187, 190, 192, 195, 197, 198, 200, 203, 205, 226, 229, 230, 232, 239, 241, 243, 244, 253, 254, 265, 266, 269, 273, 274, 275, 276, 282, 284, 285, 287, 290, 292, 293, 294, 295, 296, 297, 299], "crop": [24, 28, 66, 69, 227, 295], "flip": [24, 28, 66, 69, 295], "left": [24, 28, 66, 69, 198, 259, 265, 293, 295], "right": [24, 66, 80, 133, 198, 200, 201, 202, 265, 271, 293, 295], "std": [24, 28, 66, 69, 244, 295], "bilinearimagenettransform": [24, 66], "central_fract": [24, 66, 295], "875": [24, 66, 295], "fraction": [24, 66, 295], "onnxbilinearimagenettransform": [24, 66], "onnxresizecropimagenettransform": [24, 66], "std_valu": [24, 66], "229": [24, 66, 244], "225": [24, 66, 244, 299], "resizewithaspectratio": [24, 66], "87": [24, 66, 299], "inter_pol": [24, 66], "cv2": [24, 66], "inter_area": [24, 66], "aspect": [24, 28, 66, 69, 295], "imagenet_transform": [25, 67], "postprocess_cl": [26, 36, 244], "user_postprocess": [26, 36], "just": [26, 28, 31, 33, 34, 36, 44, 69, 148, 191, 196, 198, 203, 244, 255, 259, 265, 273, 283, 287, 293, 295, 296], "collect": [26, 28, 31, 33, 34, 36, 69, 82, 84, 135, 137, 170, 184, 196, 198, 207, 287, 294, 296], "info": [26, 31, 36, 107, 142, 179, 180, 184, 202, 225, 229, 246, 275, 280], "convert_to_unicod": [27, 68], "text": [27, 28, 68, 69, 77, 82, 110, 130, 135, 188, 190, 192, 198, 234, 241, 247, 254, 276, 279, 280, 284, 285, 290, 293, 295, 299], "unicod": [27, 68], "assum": [27, 68, 80, 91, 133, 206, 236, 265], "utf": [27, 68], "load_vocab": [27, 68], "vocab_fil": [27, 28, 68, 69, 295], "convert_by_vocab": [27, 68], "vocab": [27, 68], "whitespace_token": [27, 68], "whitespac": [27, 68, 82, 135], "clean": [27, 68, 244], "split": [27, 28, 68, 69, 198, 202, 288, 290, 293, 295], "piec": [27, 68, 77, 130, 192, 198, 243, 290], "fulltoken": [27, 68], "tokenzi": [27, 68], "basictoken": [27, 68], "punctuat": [27, 68, 77, 82, 130, 135], "lower": [27, 28, 68, 69, 82, 135, 155, 187, 188, 191, 196, 198, 231, 247, 284, 285, 287, 293, 295, 296], "wordpiecetoken": [27, 68], "unk_token": [27, 68], "unk": [27, 68], "max_input_chars_per_word": [27, 68], "200": [27, 68, 192, 202, 274, 296], "wordpiec": [27, 28, 68, 69, 295], "concat_gener": [28, 69], "inc": [28, 69, 196, 197, 200, 205, 207, 242, 248, 255, 265, 267, 272, 285, 286, 291, 296], "abstract": [28, 69, 70, 75, 112, 206, 208, 238], "own": [28, 52, 69, 148, 198, 203, 207, 226, 227, 239, 243, 267, 271, 282, 290, 292, 297], "inherit": [28, 30, 38, 51, 69, 109, 111, 203, 206, 207, 227], "tensorflowtransform": [28, 69], "mxnettransform": [28, 69], "pytorchtransform": [28, 69], "onnxrtqltransform": [28, 69], "onnxrtittransform": [28, 69], "transform_registri": [28, 69], "transform_typ": [28, 69], "basetransform": [28, 69], "tensorflowwrapfunct": [28, 69], "transform_func": [28, 69], "wrapper": [28, 30, 31, 33, 34, 53, 69, 80, 84, 133, 137, 142, 146, 196, 289], "pytorchmxnettransform": [28, 69], "get_torchvision_map": [28, 69], "interpol": [28, 69, 243, 284, 295], "torchvis": [28, 69, 205, 233, 237, 248, 254, 268], "composetransform": [28, 69], "transform_list": [28, 69, 295], "compos": [28, 69, 172, 295], "sever": [28, 69, 111, 113, 188, 189, 198, 203, 229, 230, 231, 239, 244, 245, 247, 258, 262, 273, 284, 286, 288, 293, 295, 296, 298], "croptoboundingbox": [28, 69, 295], "offset_height": [28, 69, 295], "offset_width": [28, 69, 295], "target_height": [28, 69, 295], "target_width": [28, 69, 295], "box": [28, 69, 80, 84, 133, 137, 202, 243, 248, 259, 265, 294, 295, 296], "vertic": [28, 69, 107, 295], "coordin": [28, 69, 116, 154, 272, 295, 296], "top": [28, 69, 75, 84, 99, 104, 112, 137, 201, 243, 265, 268, 270, 295], "corner": [28, 69, 201, 206, 208, 295], "horizont": [28, 69, 295], "mxnetcroptoboundingbox": [28, 69], "onnxrtcroptoboundingbox": [28, 69], "tensorflowcroptoboundingbox": [28, 69], "resizewithratio": [28, 69, 295], "min_dim": [28, 69, 295], "800": [28, 69, 295], "max_dim": [28, 69, 295], "1365": [28, 69, 295], "constant_valu": [28, 69], "np": [28, 69, 116, 154, 232, 275, 293, 295, 296], "arrai": [28, 69, 80, 91, 133, 184, 295], "smaller": [28, 69, 188, 230, 244, 247, 284, 295], "dimens": [28, 46, 69, 192, 227, 230, 290, 295], "ensur": [28, 69, 116, 154, 191, 194, 232, 287, 295], "longest": [28, 69, 295], "side": [28, 69, 227, 259, 295], "doesn": [28, 69, 189, 196, 206, 232, 244, 245, 266, 298], "exce": [28, 69, 290, 295], "zero": [28, 69, 109, 184, 188, 191, 192, 198, 205, 247, 270, 284, 287, 290, 293, 295, 296], "so": [28, 69, 168, 188, 192, 193, 196, 198, 202, 206, 229, 235, 239, 245, 247, 251, 253, 269, 270, 271, 287, 289, 290, 293, 294, 295, 297], "tensorflowresizewithratio": [28, 69], "perm": [28, 69, 295], "permut": [28, 69, 295], "tensorflowtranspos": [28, 69], "mxnettranspos": [28, 69], "pytorchtranspos": [28, 69], "randomverticalflip": [28, 69, 295], "given": [28, 69, 80, 133, 150, 193, 197, 203, 208, 284, 293, 295], "randomli": [28, 69, 92, 116, 154, 198, 203, 293, 295, 296], "tensorflowrandomverticalflip": [28, 69], "randomhorizontalflip": [28, 69, 244, 295], "tensorflowrandomhorizontalflip": [28, 69], "toarrai": [28, 69, 295], "pil": [28, 69, 295], "ndarrai": [28, 69, 170, 235, 295], "numpi": [28, 69, 80, 91, 133, 235, 293, 295], "casttftransform": [28, 69], "castonnxtransform": [28, 69], "castpytorchtransform": [28, 69], "centercroptftransform": [28, 69], "center": [28, 69, 204, 205, 240, 295, 296], "paddedcentercroptransform": [28, 69], "crop_pad": [28, 69], "resizetftransform": [28, 69], "nearest": [28, 69, 192, 193, 198, 290, 295], "bicub": [28, 69, 295], "resizepytorchtransform": [28, 69], "randomcroptftransform": [28, 69], "randomresizedcroppytorchtransform": [28, 69], "08": [28, 69, 295, 299], "randomresizedcropmxnettransform": [28, 69], "randomresizedcroptftransform": [28, 69], "normalizetftransform": [28, 69], "normal": [28, 69, 82, 135, 192, 198, 244, 274, 282, 290, 293, 295], "deviat": [28, 69, 229, 295], "broadcast": [28, 69, 232, 295], "rescalekeraspretraintransform": [28, 69], "rescaletftransform": [28, 69], "rescaletransform": [28, 69], "alignimagechanneltransform": [28, 69], "dim": [28, 69, 192, 198, 293, 295], "align": [28, 69, 200, 290, 295], "w": [28, 69, 190, 198, 284, 293, 295], "must": [28, 69, 80, 133, 201, 202, 207, 223, 226, 240, 287, 295], "pytorchalignimagechannel": [28, 69], "tondarraytransform": [28, 69], "resizemxnettransform": [28, 69], "resizetransform": [28, 69], "cropresizetftransform": [28, 69], "boundari": [28, 69, 295], "area": [28, 69, 80, 133, 188, 243, 247, 295], "pytorchcropresizetransform": [28, 69], "mxnetcropresizetransform": [28, 69], "cropresizetransform": [28, 69], "centercroptransform": [28, 69], "mxnetnormalizetransform": [28, 69], "pytorchnormalizetransform": [28, 69], "normalizetransform": [28, 69], "randomcroptransform": [28, 69], "randomresizedcroptransform": [28, 69], "get_final_text": [28, 69], "pred_text": [28, 69], "orig_text": [28, 69], "project": [28, 69, 199, 200, 201, 271, 285, 292, 296, 300], "predict": [28, 33, 69, 77, 81, 82, 84, 130, 134, 135, 137, 150, 192, 198, 203, 230, 243, 256, 290, 293, 294, 295], "back": [28, 34, 69, 229, 265, 271], "squadexampl": [28, 69], "qas_id": [28, 69], "question_text": [28, 69], "doc_token": [28, 69], "orig_answer_text": [28, 69], "start_posit": [28, 69], "end_posit": [28, 69], "is_imposs": [28, 69], "simpl": [28, 69, 196, 198, 240, 244, 284, 292, 293, 296], "without": [28, 69, 109, 128, 168, 188, 198, 200, 230, 232, 244, 247, 256, 267, 270, 284, 285, 286, 287, 296, 297], "answer": [28, 69, 81, 82, 134, 135, 200, 270, 284, 295, 299], "posit": [28, 69, 200, 243, 248, 273, 278, 279, 280], "unique_id": [28, 69], "example_index": [28, 69], "doc_span_index": [28, 69], "token_to_orig_map": [28, 69], "token_is_max_context": [28, 69], "input_mask": [28, 69, 244], "segment_id": [28, 69, 244], "read_squad_exampl": [28, 69], "input_fil": [28, 69], "doc_strid": [28, 69, 295], "max_query_length": [28, 69, 295], "output_fn": [28, 69], "inputbatch": [28, 69], "collecttransform": [28, 69], "10833": [28, 69], "tfsquadv1posttransform": [28, 69], "n_best_siz": [28, 69, 295], "20": [28, 69, 270, 273, 278, 279, 280, 284, 295, 298, 299], "384": [28, 69, 295], "64": [28, 69, 189, 197, 198, 203, 242, 290, 293, 295, 299], "max_answer_length": [28, 69, 295], "30": [28, 69, 233, 237, 239, 295, 299], "total": [28, 69, 84, 109, 137, 192, 227, 229, 284, 290, 295, 299], "best": [28, 69, 70, 75, 112, 119, 159, 192, 193, 194, 195, 197, 200, 203, 205, 225, 240, 248, 254, 265, 271, 282, 287, 290, 293, 295, 296], "nbest_predict": [28, 69, 295], "question": [28, 69, 81, 82, 134, 135, 198, 200, 201, 205, 206, 240, 248, 272, 284, 293, 295, 299], "becaus": [28, 69, 107, 195, 198, 202, 270, 287, 293, 295, 296], "anoth": [28, 69, 77, 86, 130, 184, 229, 230, 258, 262, 295, 296], "up": [28, 69, 108, 198, 205, 232, 233, 236, 239, 256, 260, 263, 265, 284, 285, 286, 287, 292, 295, 296, 298], "long": [28, 69, 192, 225, 235, 290, 295], "document": [28, 69, 189, 194, 195, 198, 207, 208, 213, 232, 242, 245, 250, 260, 263, 264, 271, 272, 274, 284, 291, 295, 297], "chunk": [28, 69, 295], "stride": [28, 69, 295], "tfmodelzoocollecttransform": [28, 69], "zoo": [28, 53, 69, 205, 233, 237, 299], "tfsquadv1modelzooposttransform": [28, 69], "squadv1": [28, 69, 295], "see": [28, 69, 77, 130, 192, 198, 200, 201, 202, 204, 225, 241, 244, 258, 259, 262, 265, 266, 270, 271, 290, 293, 294, 296], "parsedecodevoctransform": [28, 69], "measur": [29, 138, 178, 192, 196, 198, 203, 206, 223, 229, 230, 243, 244, 290, 294, 296], "conf_fname_or_obj": [29, 38, 70, 75, 85, 86, 87, 88, 90, 99, 104, 112], "thei": [29, 200, 225, 230, 236, 244, 253, 268, 271, 282], "ha": [29, 77, 107, 109, 130, 189, 194, 196, 198, 201, 203, 206, 207, 208, 226, 234, 239, 244, 245, 251, 265, 270, 271, 273, 276, 284, 286, 287, 289, 292, 293, 296], "possibl": [29, 229, 267, 283, 284, 288, 289, 296], "unnecessari": [29, 244], "critet": 30, "tensorflowcrossentropyloss": 30, "pytorchcrossentropyloss": 30, "tensorflowknowledgedistillationloss": 30, "pytorchknowledgedistillationloss": [30, 244], "pytorchintermediatelayersknowledgedistillationloss": 30, "tensorflowcriterion": 30, "pytorchcriterion": 30, "integr": [30, 193, 196, 198, 206, 244, 266, 267, 272, 290], "criterion_registri": 30, "criterion_typ": 30, "registry_criterion": 30, "knowledgedistillationframework": 30, "knowledgedistillationloss": [30, 244, 298], "pytorchknowledgedistillationlosswrapp": 30, "param_dict": [30, 35], "wrap": [30, 80, 133, 202, 232, 260, 263], "tensorflowknowledgedistillationlossextern": 30, "intermediatelayersknowledgedistillationloss": 30, "pytorchintermediatelayersknowledgedistillationlosswrapp": 30, "selfknowledgedistillationloss": 30, "selfknowledg": 30, "collate_fn": [31, 44, 46, 47, 226, 227], "last_batch": [31, 44, 46, 53, 226], "rollov": [31, 44, 46, 53, 226], "sampler": [31, 44, 46, 48, 125, 165, 192, 197, 226, 232], "batch_sampl": [31, 44, 46, 226], "num_work": [31, 44, 46, 226, 244, 287], "pin_memori": [31, 44, 46, 226], "shuffl": [31, 44, 46, 226, 244, 287], "batch": [31, 44, 46, 47, 52, 53, 169, 192, 226, 230, 231, 244, 283, 284, 287, 293, 295, 296, 299], "setter": 31, "calib_dataload": [31, 113, 150, 194, 195, 196, 197, 202, 205, 226, 227, 229, 237, 238, 243, 244, 267, 268, 287, 288, 289, 290], "reason": [31, 192, 198, 200, 207, 226, 270, 290, 294, 296], "have": [31, 52, 77, 80, 107, 109, 130, 133, 137, 150, 168, 188, 189, 190, 192, 197, 198, 200, 201, 207, 208, 225, 226, 227, 229, 232, 236, 241, 243, 244, 245, 247, 248, 265, 268, 271, 273, 278, 279, 280, 282, 284, 287, 288, 290, 293, 296, 297], "know": [31, 225, 232, 291], "known": [31, 116, 154, 188, 244, 247, 284, 287, 294, 296], "intel": [32, 35, 71, 76, 83, 84, 107, 110, 118, 124, 129, 136, 137, 149, 150, 158, 164, 173, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 224, 227, 228, 230, 231, 233, 234, 236, 237, 241, 242, 245, 246, 248, 253, 255, 256, 267, 268, 269, 270, 272, 273, 282, 283, 284, 285, 287, 289, 290, 291, 293, 294, 296, 297, 298, 299], "open": [32, 76, 129, 172, 186, 200, 205, 234, 235, 244, 260, 263, 266, 267, 271, 272, 273, 285], "librari": [32, 76, 129, 186, 189, 196, 205, 240, 244, 245, 250, 259, 265, 285, 287], "torch_util": [32, 205, 288, 293], "metric_cl": [33, 137, 150, 244], "user_metr": [33, 137, 150], "alwai": [33, 80, 133, 137, 150, 197, 229, 243, 244, 270, 290], "recommend": [33, 137, 205, 206, 227, 236, 256, 259, 264, 266, 284, 286, 296], "design": [33, 38, 53, 137, 155, 191, 193, 196, 203, 205, 244, 253, 256, 284, 287, 297], "set_backend": 34, "tensorflowoptim": 35, "onc": [35, 111, 115, 151, 153, 207, 208, 226, 265, 271, 284, 285, 296, 299], "pytorchoptim": 35, "main": [35, 110, 192, 193, 194, 196, 198, 202, 226, 229, 232, 244, 252, 254, 266, 275, 284, 287, 290], "entri": [35, 75, 113, 184, 193, 225, 241], "optimizer_registri": 35, "optimizer_typ": 35, "cross": [35, 84, 137, 238, 296], "tensorflowsgd": 35, "tensorflowadamw": 35, "tensorflow_addon": 35, "adamw": 35, "pytorchsgd": 35, "record_output": 37, "output_process": 37, "help": [37, 86, 197, 198, 225, 242, 246, 248, 254, 265, 273, 278, 279, 280, 290, 296, 297], "get_activ": 37, "hook": [37, 38, 99, 104, 172, 230, 231, 244, 284, 293, 294], "mainli": [38, 111, 198, 205, 244, 284, 287], "shot": [38, 109, 111, 192, 196, 203, 239, 244, 284, 285, 290], "appli": [38, 78, 131, 188, 191, 195, 196, 197, 198, 200, 207, 208, 244, 247, 248, 250, 256, 265, 269, 270, 275, 283, 284, 287, 289, 292, 293, 296, 297, 298], "api": [39, 75, 80, 112, 125, 126, 133, 137, 150, 165, 166, 184, 190, 192, 197, 198, 202, 205, 209, 211, 215, 218, 221, 229, 234, 239, 240, 244, 250, 254, 255, 256, 272, 273, 277, 291, 292, 296, 300], "basedatalod": 44, "basedataload": [44, 49, 51], "_generate_dataload": 44, "default_col": 46, "merg": [46, 126, 166, 260, 263, 294, 296], "outer": 46, "defaultdataload": [46, 53], "definit": [47, 52], "drop_last": [47, 52], "iterablefetch": 47, "next": [47, 192, 198, 203, 207, 208, 226, 286, 290, 296], "indexfetch": 47, "base_dataload": 48, "default_dataload": 48, "fetcher": 48, "mxnet_dataload": 48, "onnxrt_dataload": 48, "pytorch_dataload": 48, "tensorflow_dataload": 48, "mxnetdataload": 49, "onnxrtbertdataload": 50, "variant": 50, "onnxrtdataload": 50, "pytorchdataload": 51, "data_sourc": [52, 172], "matter": [52, 289], "iterablesampl": 52, "squential": 52, "clear": [52, 206, 236, 243, 244], "what": [52, 137, 150, 169, 196, 200, 285], "try": [52, 146, 196, 198, 202, 205, 229, 268, 284, 287, 293, 296], "indexdataset": 52, "intern": [52, 126, 166, 226, 227, 243, 284], "element": [52, 80, 107, 133, 184, 188, 192, 198, 227, 239, 243, 247, 284, 290, 293], "retriev": [52, 284], "act": [52, 192, 200], "placehold": [52, 225], "sequentialsampl": 52, "sequenti": [52, 113, 115, 151, 153, 197, 296], "batchsampl": 52, "tfdatadataload": 53, "tensorflow1": 53, "coupl": 53, "graph": [53, 75, 139, 146, 187, 191, 198, 202, 206, 227, 230, 232, 238, 246, 248, 267, 270, 287, 288, 289, 294], "feed_dict": 53, "session": [53, 146, 244, 294], "satisfi": [53, 229, 240, 271], "usag": [53, 80, 86, 113, 133, 193, 194, 198, 207, 227, 232, 233, 248, 256, 267, 273, 278, 279, 280, 282, 286, 290, 295], "feed": [53, 230, 284], "tf1": [53, 246], "although": [53, 292], "obj": [53, 70, 75, 86, 87, 88, 90, 99, 104, 108, 112, 138, 148, 150, 169, 172, 184], "tensorflowbertdataload": 53, "tensorflowmodelzoobertdataload": 53, "tensorflowdataload": 53, "tensorflowimagefold": 56, "deriv": [70, 107, 109, 111], "compon": [70, 76, 113, 197, 202, 225, 229, 232, 240, 241, 248, 265, 273, 283, 284], "pipelin": [70, 87, 88, 113, 201, 231, 244, 283], "distillation_conf": 70, "relat": [70, 80, 99, 104, 107, 133, 168, 172, 208, 248, 272, 273, 284, 290, 298], "_epoch_ran": 70, "epoch": [70, 109, 169, 226, 230, 231, 232, 244, 283, 284, 298], "ran": 70, "eval_frequ": 70, "term": [70, 193, 196, 201, 224, 230, 241, 243, 282, 283, 296], "best_scor": 70, "best_model": [70, 183, 189, 194, 195, 196, 197, 290], "found": [70, 189, 205, 225, 230, 242, 245, 253, 270, 274, 293, 296, 299], "qlinear2qdq": [71, 173], "qlinearop": [72, 174, 229, 239, 256, 287, 299], "check_model": [72, 174], "modelproto": [72, 138, 174, 246], "onnx_qlinear_to_qdq": [72, 174], "input_name_to_nod": [72, 174], "destin": [72, 86, 174], "node": [72, 74, 146, 174, 176, 206, 229, 232, 268, 272, 275, 278, 279, 280, 288, 294, 296, 299], "tf_to_fp32_onnx": [73, 175], "graph_def": [73, 138, 146, 150, 175], "save_path": [73, 74, 175, 176, 206, 246], "inputs_as_nchw": [73, 175], "tool": [73, 175, 184, 198, 205, 206, 244, 258, 262, 268, 271, 272, 273, 284, 285, 287], "tf_to_int8_onnx": [73, 175], "int8_model": [73, 74, 175, 176, 206], "get_node_map": [74, 176], "fp32_model": [74, 176, 184, 190, 191, 195, 196, 206, 288, 290], "fp32_onnx_path": [74, 176], "module_node_map": [74, 176], "get_quantizable_onnx_op": [74, 176], "quantize_nod": [74, 176], "dynamic_quant_export": [74, 176], "pt_fp32_model": [74, 176], "pt_int8_model": [74, 176], "q_config": [74, 176, 206], "weight_typ": [74, 176], "s8": [74, 176], "static_quant_export": [74, 176], "_quantiz": [74, 176], "torch_to_fp32_onnx": [74, 176], "do_constant_fold": [74, 176], "verbos": [74, 116, 154, 176], "constant": [74, 116, 124, 154, 164, 176, 177, 225, 226, 236, 268, 295], "fold": [74, 176, 190, 192, 236, 290, 293], "torch_to_int8_onnx": [74, 176], "infer": [75, 112, 146, 148, 150, 169, 189, 190, 191, 192, 195, 196, 198, 205, 206, 207, 224, 230, 231, 244, 245, 265, 282, 284, 285, 287, 290, 293, 294, 296], "achiev": [75, 112, 190, 191, 192, 193, 194, 197, 198, 234, 242, 244, 268, 283, 284, 285, 287, 293, 294, 296], "within": [75, 80, 112, 133, 146, 189, 200, 202, 208, 224, 245, 258, 262, 265, 273, 284, 285, 290, 293, 296], "across": [75, 85, 112, 138, 188, 197, 228, 244, 247, 272, 275, 284, 288, 293, 296], "variou": [75, 85, 112, 138, 188, 191, 193, 196, 208, 239, 247, 248, 275, 284, 286, 288], "dl": [75, 85, 99, 104, 112, 138, 229, 238, 252, 265, 285, 299], "bring": [75, 112, 198, 259, 272, 293], "unifi": [75, 112, 206, 207, 208, 226, 238, 239, 243, 244, 246], "vari": [75, 99, 104, 112, 270, 284, 293, 299], "roc": [75, 84, 99, 104, 112, 137], "memori": [75, 99, 104, 112, 148, 184, 188, 189, 190, 192, 195, 198, 224, 226, 231, 244, 245, 247, 248, 282, 284, 287, 288, 290, 293, 296, 299], "flexibl": [75, 99, 104, 112, 192, 196, 205, 230, 272, 284, 290], "interfac": [75, 99, 104, 112, 113, 172, 189, 191, 193, 196, 198, 239, 244, 256, 274, 287, 291], "via": [75, 99, 104, 112, 192, 198, 200, 205, 232, 239, 244, 248, 265, 284, 285], "graph_optimization_conf": 75, "popular": [76, 129, 186, 193, 197, 198, 205, 206, 207, 224, 230, 233, 234, 237, 242, 244, 284, 287, 290, 296, 297], "compress": [76, 99, 104, 129, 148, 169, 179, 186, 190, 192, 193, 195, 197, 198, 205, 213, 230, 239, 244, 265, 267, 282, 283, 284, 285, 287, 293, 297, 299], "techniqu": [76, 129, 186, 191, 196, 197, 198, 205, 239, 244, 248, 267, 283, 284, 285, 286, 287, 297, 298, 299], "contrib": [76, 129], "pruner_legaci": 76, "pruning_recip": 76, "pytorch_prun": 76, "graph_optim": 76, "mixed_precis": [76, 138, 244], "model_convers": 76, "pruning_v2": 76, "script": [77, 78, 81, 82, 130, 131, 134, 135, 201, 205, 232, 239, 248, 252, 255, 256, 259, 276, 278, 285], "unicoderegex": [77, 130], "hoc": [77, 130], "hack": [77, 130], "recogn": [77, 130, 296], "symbol": [77, 130, 138, 150, 202, 246], "nondigit_punct_r": [77, 130], "compil": [77, 130, 187, 191, 244], "regular": [77, 108, 130], "express": [77, 130, 200], "preced": [77, 130, 198, 293, 296], "digit": [77, 130, 184, 285], "punct_nondigit_r": [77, 130], "symbol_r": [77, 130], "bleu_token": [77, 130], "offici": [77, 81, 82, 130, 134, 135, 200, 293], "mose": [77, 130], "smt": [77, 130], "mosesdecod": [77, 130], "blob": [77, 78, 81, 82, 107, 130, 131, 134, 135, 137, 150, 244, 254, 276, 279, 280], "master": [77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 244, 296], "mteval": [77, 130], "v14": [77, 130], "pl": [77, 130], "l954": [77, 130], "l983": [77, 130], "comput": [77, 78, 81, 82, 84, 130, 131, 134, 135, 137, 169, 184, 188, 189, 191, 192, 198, 224, 226, 231, 234, 243, 244, 245, 247, 248, 259, 268, 284, 285, 287, 290, 293, 296], "bilingu": [77, 130], "understudi": [77, 130], "qualiti": [77, 130, 225], "been": [77, 107, 109, 130, 189, 192, 196, 198, 203, 208, 225, 230, 244, 245, 265, 290, 293], "machin": [77, 130, 192, 234, 240, 251, 265, 267, 273, 285, 293, 294], "translat": [77, 78, 130, 131, 188, 247, 284, 296], "natur": [77, 130, 192, 234], "approxim": [77, 78, 130, 131, 192, 207, 243, 290], "glue": [77, 84, 130, 137, 227, 243, 244, 254], "word": [77, 130, 192, 198, 225, 243, 284, 290, 299], "ngram": [77, 130, 243], "order": [77, 78, 113, 116, 119, 128, 130, 131, 154, 159, 168, 192, 197, 198, 202, 229, 243, 268, 286, 290, 293, 294, 296], "breviti": [77, 78, 130, 131, 243], "penalti": [77, 78, 130, 131, 243], "doe": [77, 130, 168, 191, 192, 225, 226, 227, 243, 244, 290, 291, 295], "beam": [77, 130, 243], "bleu": [78, 83, 131, 136, 243, 284], "tensor2tensor": [78, 131], "bleu_hook": [78, 131], "compute_bleu": [78, 131], "reference_corpu": [78, 131], "translation_corpu": [78, 131], "max_ord": [78, 131], "use_bp": [78, 131], "against": [78, 131], "gram": [78, 131], "bleu_scor": [78, 131], "third": [80, 133, 201, 241], "parti": [80, 133, 198, 201, 241, 287], "pycocotool": [80, 133, 235], "note": [80, 120, 133, 160, 187, 190, 191, 192, 195, 198, 203, 205, 207, 208, 225, 226, 229, 232, 234, 236, 240, 242, 244, 250, 253, 258, 262, 265, 267, 271, 273, 275, 284, 287, 290, 293, 294, 296, 297, 298], "noth": [80, 133, 296], "thu": [80, 133, 198, 244, 284, 287], "cannot": [80, 133, 192, 202, 225, 235, 290, 294], "slim": [80, 133, 144, 146, 246, 284], "jonathanhuang": [80, 133], "image_id": [80, 133, 243], "encod": [80, 133, 268, 295], "invok": [80, 133, 207], "groundtruth_dict": [80, 133], "exportgroundtruthtococo": [80, 133], "groundtruth_boxes_list": [80, 133], "groundtruth_classes_list": [80, 133], "max_num_class": [80, 133], "output_path": [80, 133], "detections_list": [80, 133], "exportdetectionstococo": [80, 133], "detection_boxes_list": [80, 133], "detection_scores_list": [80, 133], "detection_classes_list": [80, 133], "cocowrapp": [80, 133], "loadannot": [80, 133], "cocoevalwrapp": [80, 133], "agnostic_mod": [80, 133], "computemetr": [80, 133], "ani": [80, 82, 125, 133, 135, 165, 181, 184, 193, 196, 200, 205, 208, 225, 232, 248, 253, 266, 267, 271, 272, 284, 292, 296], "detection_typ": [80, 133], "bbox": [80, 133, 202, 243], "hold": [80, 116, 133, 154, 227], "being": [80, 133, 208, 273], "iou_typ": [80, 133], "iou_thr": [80, 84, 133, 137, 243], "map_point": [80, 84, 133, 137, 243], "cocoev": [80, 133], "To": [80, 133, 148, 188, 189, 190, 191, 192, 195, 197, 198, 201, 205, 207, 208, 225, 227, 229, 232, 245, 247, 249, 252, 258, 260, 262, 263, 267, 271, 284, 286, 289, 290, 291, 293, 296, 298], "mscoco": [80, 133], "org": [80, 109, 133, 202, 229, 240, 260, 263, 284], "Then": [80, 133, 198, 207, 229, 258, 260, 262, 263, 270, 293, 296], "exportsingleimagegroundtruthtococo": [80, 133], "next_annotation_id": [80, 133], "category_id_set": [80, 133], "groundtruth_box": [80, 133], "groundtruth_class": [80, 133], "groundtruth_mask": [80, 133], "groundtruth_is_crowd": [80, 133], "ingest": [80, 133], "here": [80, 133, 190, 191, 195, 196, 198, 207, 227, 232, 233, 234, 236, 237, 242, 243, 253, 260, 263, 265, 268, 271, 273, 287, 291, 292, 293, 299], "match": [80, 81, 133, 134, 191, 205, 230, 266, 290], "ones": [80, 133, 284], "exportsingleimagedetectionstococo": [80, 133], "associ": [80, 133], "uniqu": [80, 113, 133, 198, 287], "identifi": [80, 133, 146, 197, 273, 284, 290], "assign": [80, 133, 184, 232, 286, 296], "continu": [80, 107, 133, 203, 242, 244, 266, 284, 297], "drop": [80, 108, 133, 189, 190, 192, 198, 201, 244, 245, 259, 284, 290, 293, 299], "num_gt_box": [80, 133], "num_detect": [80, 84, 133, 137, 243, 244, 298], "image_height": [80, 133], "image_width": [80, 133], "detection_mask": [80, 133], "crowd": [80, 133], "rais": [80, 107, 108, 109, 133, 138, 205, 225, 267, 284, 285], "valueerror": [80, 133, 235], "insid": [80, 133, 230, 231, 266, 284, 288, 296], "exportsingleimagedetectionboxestococo": [80, 133], "detection_box": [80, 133, 244, 298], "detection_scor": [80, 133, 244, 298], "detection_class": [80, 133, 244, 298], "exporsingleimagedetectionboxestococo": [80, 133], "exportsingleimagedetectionmaskstococo": [80, 133], "allenai": [81, 82, 134, 135], "bi": [81, 82, 134, 135], "att": [81, 82, 134, 135], "flow": [81, 82, 134, 135, 198, 202, 203, 244], "f1_score": [81, 82, 134, 135], "ground_truth": [81, 82, 134, 135], "f1": [81, 83, 84, 134, 136, 137, 232, 243, 244, 268, 292, 299], "ground": [81, 82, 134, 135], "truth": [81, 82, 134, 135], "metric_max_over_ground_truth": [81, 82, 134, 135], "metric_fn": [81, 82, 134, 135], "exact_match_scor": [81, 134], "exact": [81, 134], "averag": [81, 82, 84, 134, 135, 137, 192, 243, 244, 290, 296, 299], "articl": [81, 82, 134, 135], "paragraph": [81, 82, 134, 135], "qa": [81, 82, 134, 135, 205], "normalize_answ": [82, 135], "remov": [82, 135, 200, 244, 258, 262, 271, 278, 279, 284, 294], "extra": [82, 135, 192, 244, 290], "replac": [82, 135, 187, 188, 191, 225, 232, 244, 247, 256, 291], "newlin": [82, 135, 184], "tab": [82, 135, 265, 294], "abc": [82, 135, 206, 294, 296], "harmon": [82, 84, 135, 137], "recal": [82, 84, 135, 137], "equat": [82, 84, 135, 137, 198, 287, 293], "answer_start": [82, 135], "177": [82, 135, 299], "denver": [82, 135], "bronco": [82, 135], "nfl": [82, 135], "team": [82, 135, 200, 289], "afc": [82, 135], "super": [82, 135, 203], "bowl": [82, 135], "50": [82, 135, 198, 203, 207, 270, 284, 293, 299], "56be4db0acb8001400a502ec": [82, 135], "form": [82, 135, 229, 230, 265], "percentag": [82, 135, 192, 224, 290, 298], "bleu_util": [83, 136], "coco_label_map": [83, 136], "coco_tool": [83, 136], "evaluate_squad": [83, 136], "tensorflowmetr": [84, 137], "maintain": [84, 137, 191, 192, 196, 198, 200, 201, 225, 246, 248, 260, 263, 267, 272, 273, 284, 290, 291], "pytorchmetr": [84, 137], "mxnetmetr": [84, 137], "onnxrtqlmetr": [84, 137], "onnxrtitmetr": [84, 137], "metric_registri": [84, 137], "metric_typ": [84, 137], "decorator_metr": [84, 137], "basemetr": [84, 137, 150], "single_output": [84, 137], "hvd": [84, 137, 232], "wrappytorchmetr": [84, 137], "wrapmxnetmetr": [84, 137], "wraponnxrtmetr": [84, 137], "binari": [84, 137, 235, 243, 260, 263, 291], "proport": [84, 137], "were": [84, 137, 251, 284], "pred_list": [84, 137], "pytorchloss": [84, 137], "print": [84, 137, 184, 198, 232, 243, 244, 267, 268, 284, 293, 296], "mae": [84, 137, 243], "compare_label": [84, 137, 150, 243], "error": [84, 119, 137, 159, 180, 192, 198, 229, 243, 249, 270, 271, 274, 290, 293, 296], "actual": [84, 137, 191, 232], "compar": [84, 137, 184, 188, 191, 192, 197, 198, 231, 243, 247, 268, 284, 287, 290, 292, 294, 296], "pred": [84, 137, 243], "rmse": [84, 137, 243, 296], "squar": [84, 119, 137, 159, 192, 229, 243, 270, 296], "estim": [84, 137, 146, 296], "tensorflowtopk": [84, 137], "k": [84, 137, 150, 243, 267, 284], "among": [84, 137, 188, 198, 247, 259, 293], "outcom": [84, 137], "consid": [84, 137, 200, 224, 225, 230, 266, 296], "find": [84, 91, 116, 137, 154, 184, 197, 206, 229, 242, 251, 258, 262, 265, 266, 268, 270, 284, 290, 292, 293, 294, 296], "num_correct": [84, 137], "num_sampl": [84, 137], "generaltopk": [84, 137], "cocomapv2": [84, 137, 243], "anno_path": [84, 137, 243], "95": [84, 137, 242, 243, 299], "map_kei": [84, 137], "detectionboxes_precis": [84, 137], "output_index_map": [84, 137, 243], "tensorflowmap": [84, 137], "tensorflowcocomap": [84, 137], "tensorflowvocmap": [84, 137], "squadf1": [84, 137, 243], "miou": [84, 137], "num_class": [84, 137], "21": [84, 137, 198, 242, 253, 254, 276, 279, 280, 285, 293, 299], "iou": [84, 137], "intersect": [84, 137, 206, 243], "union": [84, 137, 169, 196, 243, 276], "onnxrtglu": [84, 137], "dlrm": [84, 137], "modelconvers": 86, "typic": [86, 113, 203, 205, 231, 233, 237, 270, 284, 299], "saved_model": [86, 196, 288], "basicna": 87, "model_build": [87, 90], "conf_fnam": 87, "modul": [89, 95, 105, 106, 189, 192, 193, 197, 202, 225, 226, 230, 239, 243, 244, 246, 284, 286, 289, 290, 294, 297], "basic_na": 89, "nas_util": 89, "nasbas": [90, 203], "nas_registri": 91, "nas_method": 91, "create_search_space_pool": 91, "idx": [91, 227], "enumer": [91, 169, 188, 206, 230, 231, 232, 244, 247, 283, 284, 294], "find_pareto_front": 91, "pareto": [91, 203], "front": [91, 203], "n_point": 91, "n_metric": 91, "n_pareto_point": 91, "gridsearch": 92, "whole": [92, 187, 198, 208, 267, 287, 299], "randomsearch": 92, "bayesianoptimizationsearch": 92, "gradient": [93, 192, 198, 205, 239, 244, 284, 285, 299], "sensit": [93, 109, 239, 284], "pruner": [93, 94, 95, 96, 97, 99, 104, 105, 107, 110, 244, 284, 298], "gradientsensitivityprun": 93, "global_config": [93, 94, 96, 97, 98], "pytorchmodel": [93, 94, 96, 97, 98, 147], "mai": [93, 94, 96, 97, 98, 189, 192, 195, 198, 200, 201, 207, 224, 225, 229, 234, 235, 241, 245, 258, 262, 268, 271, 273, 285, 287, 290, 293, 296], "overwritten": [93, 94, 96, 97, 98, 253], "group": [94, 192, 198, 205, 239, 284, 290, 294, 295, 296, 299], "lasso": [94, 239, 284], "grouplassoprun": 94, "legaci": 95, "gradient_sensit": 95, "group_lasso": 95, "basicmagnitudeprun": 96, "lock": [97, 98, 239, 283, 284], "patternlockprun": [97, 109], "pruner_registri": 98, "clase": 98, "pruningconf": [99, 104], "tfpruningcallback": [99, 104], "nc_model": [99, 104], "input_model": [99, 104, 246, 268, 269, 270, 294], "callback": [99, 104, 169, 172, 202, 244, 283, 284, 287], "pure": [99, 104, 284], "tile_pattern": 101, "pattern_registri": 102, "pattern_typ": 102, "patternbas": 102, "mask_shap": [102, 103], "is_contigu": 102, "tile": [103, 225], "tilepatternbas": 103, "parent": [103, 109, 111, 294], "tilepattern_1x1": 103, "1x1": [103, 230, 244, 284], "tilepattern_2x2": 103, "2x2": [103, 198, 293], "tilepattern_1x16": 103, "1x16": 103, "tilepattern_4x1": 103, "tilepattern_1x2": 103, "1x2": [103, 198, 293], "logger": [105, 170, 177, 184], "prune_util": 105, "register_pattern": 107, "registri": [107, 109, 111, 203], "sure": [107, 109, 111, 223, 267], "get_pattern": 107, "assertionerror": [107, 108, 109, 138], "unit": [107, 201, 273, 284], "part": [107, 109, 189, 198, 202, 240, 245, 260, 263, 273, 275, 284, 288, 293, 297], "is_glob": 107, "contrast": [107, 295], "individu": [107, 198, 200, 273, 284, 293], "patternnxm": 107, "kept": 107, "block_siz": [107, 290], "direct": [107, 193, 284], "hidden": [107, 206], "patternninm": 107, "check_config": 108, "prune_config": 108, "everyth": [108, 253], "reset_non_value_to_default": 108, "undefin": 108, "process_and_check_config": 108, "non": [108, 184, 192, 202, 229, 290, 296], "process_config": 108, "obtain": [108, 198, 202, 207, 273, 284, 292, 293, 296], "parse_to_prun": 108, "keep": [108, 155, 202, 206, 225, 264, 265, 291], "parse_not_to_prun": 108, "register_prun": 109, "get_prun": 109, "module_nam": [109, 184], "begin": [109, 191, 225, 226, 230, 231, 244, 284, 296], "current_sparsity_ratio": 109, "global_step": 109, "update_frequency_on_step": [109, 286], "target_sparsity_ratio": 109, "final": [109, 191, 198, 207, 244, 251, 282, 284, 287, 291, 296], "max_sparsity_ratio_per_lay": [109, 286], "magnitudeprun": 109, "snipprun": 109, "network": [109, 157, 188, 198, 203, 224, 230, 231, 234, 244, 247, 267, 285, 287, 293, 296], "connect": [109, 265, 267, 274, 284, 292], "arxiv": [109, 188, 192, 198, 205, 224, 247, 284, 285, 290, 293], "ab": [109, 196, 198, 284, 287, 293], "1810": 109, "02340": 109, "snipmomentumprun": 109, "moreoev": 109, "updat": [109, 137, 150, 181, 192, 235, 242, 243, 244, 251, 256, 259, 275, 284, 290, 293, 296, 297], "momentum": [109, 239, 244, 284, 298], "while": [109, 116, 154, 189, 191, 192, 196, 198, 206, 207, 227, 233, 239, 245, 248, 253, 265, 267, 284, 286, 287, 290, 293], "spars": [109, 227, 285], "least": [110, 201, 244, 284, 296], "templat": [110, 244, 284], "tree": [110, 126, 166, 273], "huggingface_model": [110, 269], "eager": [110, 187, 191, 192, 193, 205, 232, 239, 287, 289, 294], "config_file_path": 110, "pruner_info": 110, "register_schedul": 111, "get_schedul": 111, "gradual": [111, 284], "oneshotschedul": 111, "iterativeschedul": 111, "quantconf": 112, "separ": [113, 200, 225, 238, 241, 273, 275, 283, 286], "append": [113, 116, 154, 202, 231, 244, 283], "There": [113, 115, 151, 153, 187, 191, 195, 198, 225, 229, 230, 236, 239, 244, 248, 270, 272, 273, 290, 293, 296, 298], "opt_model": [113, 187, 191, 244], "fulli": [113, 194, 244, 273, 287, 293], "train_func": [113, 169, 232, 244, 287], "automixedprecisiontunestrategi": [114, 152], "basictunestrategi": [115, 153], "stage": [115, 120, 151, 153, 160, 230, 284, 294, 296], "polici": [115, 119, 151, 153, 159, 197, 200, 205, 298, 300], "bayesiantunestrategi": [116, 154], "acq_max": [116, 154], "ac": [116, 154], "gp": [116, 154], "y_max": [116, 154], "n_warmup": [116, 154], "10000": [116, 154, 284], "n_iter": [116, 154], "acquisit": [116, 154], "gaussian": [116, 154, 296], "relev": [116, 154, 207, 208, 225, 270, 284], "limit": [116, 154, 184, 188, 192, 193, 196, 205, 229, 230, 242, 247, 287, 290, 291, 294], "acq": [116, 154], "randomst": [116, 154], "scipi": [116, 154], "x_max": [116, 154], "targetspac": [116, 154], "pbound": [116, 154], "9527": [116, 154, 244, 298], "allow": [116, 154, 189, 191, 192, 197, 230, 232, 243, 244, 245, 267, 272, 284, 286, 290, 293, 296, 298], "duplic": [116, 154], "bayesianoptim": [116, 154], "exhaustivetunestrategi": [117, 156], "auto_mixed_precis": [118, 158], "msetunestrategi": [119, 159], "those": [119, 159, 184, 191, 196, 198, 229, 230, 231, 238, 244, 245, 283, 284, 287, 296], "mse_v2tunestrategi": [120, 160], "revert": [120, 128, 160, 168, 296], "fx": [120, 160, 187, 189, 191, 239, 245, 254, 255, 269, 285, 287, 289], "randomtunestrategi": [121, 161], "strategy_registri": [122, 162, 296], "tunestrategi": [122, 162, 296], "tuning_sampl": [124, 164], "tuning_spac": [124, 125, 127, 164, 165, 167], "tuning_struct": [124, 125, 126, 164, 165, 166], "tuningsamplerregistri": 125, "tuningsampl": [125, 165], "tuningord": [125, 165], "Not": [125, 126, 165, 166, 184, 203, 225], "tuningspac": [125, 126, 165, 166], "tuning_order_lst": [125, 165], "initial_op_tuning_cfg": [125, 165], "modelwisetuningsampl": [125, 165], "tuning_items_prior": [125, 165], "op_dtype_dict": [125, 165], "optuningconfig": [125, 126, 127, 165, 166, 167], "optypewisetuningsampl": [125, 165], "opwisetuningsampl": [125, 165], "fallbacktuningsampl": [125, 165], "op_dtyp": [125, 165], "accumul": [125, 165, 188, 192, 247, 296], "skip_first": [125, 165], "smoothquantsampl": [125, 165], "tuningitem": [126, 166], "item_typ": [126, 166], "capabl": [126, 166, 189, 192, 198, 207, 208, 223, 236, 244, 245, 256, 267, 272, 284, 286, 287, 296, 298], "pattern_to_intern": [126, 166], "default_dtyp": [126, 166], "pattern_to_path": [126, 166], "quant_mode_from_pattern": [126, 166], "internal_pattern": [126, 166], "initial_tuning_cfg_with_quant_mod": [126, 166], "op_name_typ": [126, 166], "quant_mod": [126, 166, 207, 208], "cfg": [126, 166, 172, 207, 208], "step1": [126, 166], "step2": [126, 166], "complet": [126, 166, 206, 207, 284, 287, 296, 298, 299], "step3": [126, 166], "step4": [126, 166], "step5": [126, 166], "op_typ": [127, 167, 190, 191], "op_quant_mod": [127, 167], "ordereddefaultdict": [128, 168], "extract_data_typ": [128, 168], "data_typ": [128, 168], "sign": [128, 168, 192, 198, 201, 205, 208, 224, 267, 285, 287, 290, 292], "unsign": [128, 168, 208, 290], "reverted_data_typ": [128, 168], "signed_flag": [128, 168], "get_adaptor_nam": [128, 168], "experiment": [129, 203, 227, 231, 232, 234, 240, 244, 284, 286, 287, 291, 295], "sub_class": [137, 150], "register_customer_metr": 137, "mani": [137, 150, 192, 196, 198, 225, 226, 240, 290, 296, 298], "tell": [137, 150, 286], "topk": [137, 150, 232, 243, 244, 267, 287], "matrix": [137, 150, 195, 198, 205, 256, 297], "frozen": [138, 146, 150, 246], "ckpt": [138, 146, 150, 299], "savedmodel": [138, 146, 150], "onnx_ml_pb2": [138, 246], "gluon": [138, 150, 246], "hybirdblock": [138, 150], "basemodel": [139, 196], "plai": [139, 192, 198, 285, 290, 293], "role": [139, 192, 198, 290, 293], "base_model": 140, "keras_model": 140, "mxnet_model": 140, "nets_factori": 140, "onnx_model": [140, 268], "tensorflow_model": [140, 270], "torch_model": 140, "kerasmodel": 141, "get_model_fwk_nam": 142, "fwk": 142, "mxnetmodel": 143, "net": [144, 205], "factori": 144, "tfslimnetsfactori": 144, "onnxmodel": 145, "get_model_typ": 146, "validate_graph_nod": 146, "node_nam": [146, 207], "compat": [146, 201, 232, 246, 260, 263, 265, 284, 291], "graphdef": [146, 246], "validate_and_inference_input_output": 146, "input_tensor_nam": 146, "output_tensor_nam": 146, "graph_sess": 146, "sess": 146, "graph_def_sess": 146, "frozen_pb_sess": 146, "load_saved_model": 146, "saved_model_tag": 146, "signatur": 146, "tag": [146, 198, 293, 294], "metagraphdef": 146, "analyz": [146, 292, 293, 294], "input_tensor": 146, "output_tensor": 146, "try_loading_kera": 146, "keras_sess": 146, "slim_sess": 146, "checkpoint_sess": 146, "estimator_sess": 146, "input_fn": 146, "saved_model_sess": 146, "tensorflowbasemodel": 146, "tensorflowsavedmodelmodel": 146, "tensorflowllmmodel": 146, "exceed": 146, "protobuf": [146, 268], "2gb": 146, "tensorflowqatmodel": 146, "tensorflowcheckpointmodel": 146, "checkpoint": [146, 183, 246], "tensorflowmodel": 146, "pytorchbasemodel": 147, "pytorchfxmodel": 147, "ipexmodel": 147, "driven": [148, 205, 244, 265, 282, 294], "develop": [148, 188, 189, 201, 202, 225, 240, 244, 245, 247, 248, 254, 265, 271, 284, 285, 289, 292], "objective_registri": 148, "objective_custom_registri": 148, "obj_cl": 148, "eural_compressor": 148, "objective_cl": 148, "user_object": 148, "__class__": 148, "__name__": 148, "objective_cfg": 148, "deep_get": 148, "usr_cfg": 148, "deep_set": 148, "user_obj_cfg": 148, "With": [148, 196, 198, 202, 206, 208, 226, 244, 253, 258, 262, 266, 272, 282, 284, 285, 287, 292, 293, 296, 299], "easili": [148, 197, 198, 206, 249, 253, 265, 282, 293], "special": [148, 193, 202, 226, 243, 244, 282, 284, 290, 297], "peak": [148, 282], "multiobject": 148, "metric_criterion": 148, "metric_weight": 148, "obj_criterion": 148, "obj_weight": 148, "is_measur": 148, "calib_func": [150, 289], "entir": [150, 169, 190, 195, 202, 207, 208, 224, 272, 284], "autotunestrategi": 151, "level": [155, 180, 188, 198, 200, 247, 275, 293, 296], "conservativetunestrategi": 155, "o0": [155, 296], "who": [155, 200], "hawq_v2tunestrategi": 157, "hawq": [157, 296], "v2": [157, 190, 226, 232, 234, 235, 242, 254, 291, 293, 296, 297, 299], "hessian": [157, 192, 290, 296], "made": [157, 198, 206, 287, 291, 296], "small": [157, 192, 198, 203, 270, 271, 284, 290, 296, 299], "impact": [157, 284, 291, 296], "tunestrategymeta": 162, "metaclass": 162, "lowerbitssampl": 165, "blockfallbacktuningsampl": 165, "op_block_lst": 165, "target_dtyp": 165, "alpha_list": 165, "weightonlyquantsampl": 165, "quanttyp": 168, "quantopt": 168, "quant_typ": 168, "quant_opt": 168, "preprocess_user_cfg": 168, "op_user_cfg": 168, "op_user_cfg_modifi": 168, "group_siz": [168, 192, 197, 290], "32": [168, 188, 189, 196, 197, 232, 238, 247, 290, 299], "build_slave_faker_model": 168, "slave": [168, 296], "virtual": [168, 285], "classregist": 168, "loop": [169, 202, 203, 207, 208, 236, 275, 292, 296], "compressionmanag": 169, "deal": 169, "pruningconfig": 169, "orchestr": [169, 205, 239, 297], "on_train_begin": [169, 202, 230, 231, 244, 283, 284, 287], "train_loop": [169, 244, 283], "on_epoch_begin": [169, 172, 230, 231, 244, 283], "on_step_begin": [169, 172, 230, 231, 244, 283, 284], "on_after_compute_loss": [169, 230, 231, 244, 283], "backward": [169, 198, 230, 231, 232, 244, 283, 284, 287, 291], "on_before_optimizer_step": [169, 230, 231, 244, 283, 284], "on_step_end": [169, 172, 230, 231, 244, 283], "on_epoch_end": [169, 172, 230, 231, 244, 283], "on_train_end": [169, 230, 231, 244, 283, 284, 287], "path_to_sav": 169, "manag": [169, 172, 244, 248, 249, 259], "top1": [169, 243, 267, 284, 287, 299], "callbacks_list": 169, "layerhistogramcollector": 170, "histogram": [170, 184, 267, 294], "num_bin": 170, "8001": [170, 273, 278, 279, 280], "layer_tensor": 170, "include_lay": 170, "collector": 170, "diverg": [170, 178, 208, 224, 230, 296], "get_func_from_config": 172, "func_dict": 172, "get_preprocess": 172, "get_metr": 172, "get_postprocess": 172, "get_algorithm": 172, "algo": 172, "create_dataset": 172, "cfg_preprocess": 172, "cfg_filter": 172, "create_dataload": 172, "dataloader_cfg": 172, "create_eval_func": 172, "postprocess_cfg": 172, "fp32_baselin": [172, 206], "baselin": [172, 197, 292, 293, 294], "create_train_func": 172, "train_cfg": 172, "Their": 172, "auxiliari": 177, "collect_layer_histogram": 177, "create_obj_from_config": 177, "kl_diverg": 177, "load_huggingfac": [177, 244], "neural_insights_util": 177, "weights_detail": 177, "pretrain": [179, 248, 254], "optimizedmodel": 179, "from_pretrain": [179, 205, 244], "save_for_huggingface_upstream": [179, 244], "output_dir": [179, 193, 244, 253, 254, 269, 270, 276, 279, 280], "export_compressed_model": [179, 290], "saved_dir": [179, 290], "use_optimum_format": [179, 290], "enable_full_rang": [179, 288, 290], "compression_dtyp": [179, 290], "int32": [179, 192, 227, 290], "compression_dim": [179, 290], "scale_dtyp": [179, 290], "_type_": 179, "leverag": [179, 187, 191, 194, 197, 198, 203, 205, 230, 234, 248, 265, 283, 287, 290, 296], "symmetr": [179, 196, 208, 287, 290, 295, 296], "comoress": 179, "float16": [179, 192, 227, 290], "msg": [180, 274, 278, 279], "debug": [180, 229, 258, 262, 266, 296, 297], "fatal": 180, "warn": [180, 225], "alia": [180, 184, 250, 255], "register_neural_insights_workload": 181, "workload_loc": [181, 184], "workload_mod": 181, "workload_nam": 181, "uuid": 181, "update_neural_insights_workload": 181, "workload_uuid": 181, "statu": [181, 193, 200, 226, 247, 275, 278, 279, 280, 282, 284], "update_neural_insights_workload_accuracy_data": 181, "baseline_accuraci": 181, "optimized_accuraci": 181, "get_model_path": 181, "is_int8_model": 183, "load_weight_onli": 183, "checkpoint_dir": 183, "layer_wis": [183, 288], "qconfig": [183, 192, 290, 294], "pt": [183, 192, 240, 246, 269, 285, 287, 289, 290], "history_cfg": 183, "best_configur": 183, "best_model_weight": 183, "snapshot": [183, 269], "recover_model_from_json": 183, "json_file_path": 183, "recov": [183, 184, 206, 231], "cfg_from_fil": 184, "yaml_fil": [184, 227, 232], "version1_lt_version2": 184, "version1": 184, "version2": 184, "version1_gt_version2": 184, "greater": [184, 196, 278, 284, 296], "version1_eq_version2": 184, "version1_gte_version2": 184, "version1_lte_version2": 184, "lazyimport": 184, "lazi": 184, "till": [184, 296], "singleton": 184, "time_limit": 184, "context": [184, 192, 198, 286, 290], "get_siz": 184, "seen": [184, 206], "recurs": 184, "compute_spars": 184, "fault_tolerant_fil": 184, "temporari": [184, 200], "equal_dict": 184, "d1": 184, "d2": 184, "compare_kei": 184, "ignore_kei": 184, "except": [184, 225, 271, 287, 288], "ignor": [184, 192, 198, 224, 227, 290, 293, 296], "cpuinfo": 184, "dump_elapsed_tim": [184, 206], "customized_msg": 184, "elaps": 184, "combine_histogram": 184, "old_hist": 184, "arr": 184, "old": [184, 190, 244, 291], "get_tensor_histogram": 184, "tensor_data": [184, 185], "bin": [184, 235], "2048": [184, 192, 205, 290], "get_all_fp32_data": 184, "get_tuning_histori": 184, "tuning_history_path": 184, "num": 184, "offlin": [184, 190, 195, 196, 198, 200, 244, 287, 293], "str2arrai": 184, "dequantize_weight": 184, "weight_tensor": 184, "min_filter_tensor": 184, "max_filter_tensor": 184, "dequant": [184, 198, 202, 207, 293, 294], "scale_info": 184, "captureoutputtofil": 184, "tmp_file_path": 184, "stream": [184, 299], "sy": [184, 225, 251], "stderr": 184, "captur": [184, 191, 192], "statist": [184, 185], "header": [184, 235], "field_nam": 184, "output_handl": 184, "printer": 184, "global_st": 184, "load_data_from_pkl": 184, "pkl": [184, 269], "dump_data_to_loc": 184, "show_memory_info": 184, "hint": 184, "show": [184, 188, 198, 200, 230, 232, 244, 247, 251, 266, 267, 268, 270, 273, 278, 279, 280, 293, 296, 297], "dump_class_attr": 184, "compare_object": 184, "obj1": 184, "obj2": 184, "ignore_attr": 184, "comparison": [184, 290, 291, 294], "alias_param": 184, "param_nam": 184, "param_alia": 184, "alias": [184, 225], "print_tabl": 184, "column_map": 184, "table_entri": 184, "titl": [184, 241, 266, 296], "insert_newlin": 184, "tabl": [184, 188, 208, 229, 234, 247, 268, 270, 299], "prettyt": 184, "column": [184, 192, 198, 290, 293], "func": [184, 287, 298], "handler": [184, 296], "row": [184, 198, 229, 268, 293], "decim": 184, "get_tensors_info": 184, "about": [184, 200, 225, 226, 244, 270, 271, 284, 289, 296, 297, 299], "get_weights_detail": 184, "weightdetail": 184, "dump_tabl": 184, "filepath": [184, 225], "file_typ": 184, "csv": [184, 203, 268, 269], "extens": [184, 189, 190, 191, 193, 198, 203, 205, 206, 225, 236, 239, 240, 242, 244, 245, 246, 249, 254, 255, 256, 260, 263, 264, 268, 284, 285, 287, 290, 293, 296, 297, 298], "dump_table_to_csv": 184, "get_number_of_socket": 184, "platform": [184, 198, 205, 239, 248, 256, 275, 285, 287], "opentri": 184, "activation_min": 184, "activation_max": 184, "print_op_list": 184, "get_op_list": 184, "minmax_file_path": 184, "input_model_tensor": 184, "optimized_model_tensor": 184, "activation_min_max": 184, "calculate_ms": 184, "mse_metric_gap": 184, "fp32_tensor": 184, "dequantize_tensor": 184, "euclidean": [184, 230], "distanc": [184, 230], "check_key_exist": 184, "weightsdetail": 185, "input_tensor_data": 185, "optimized_tensor_data": 185, "weightsstatist": 185, "bitwidth": 187, "factor": [187, 190, 192, 196, 198, 290, 293, 299], "observ": [187, 191, 192, 193, 208, 290, 292, 294, 296], "runtim": [187, 198, 201, 205, 206, 207, 209, 226, 229, 233, 236, 239, 245, 247, 250, 255, 256, 286, 290, 291, 296], "w8a8": [187, 191, 192, 198, 288, 290], "x86inductorquant": 187, "four": [187, 191, 197, 275, 294, 299], "prepar": [187, 188, 190, 191, 192, 193, 196, 198, 202, 227, 232, 237, 267, 278, 279, 280, 284, 287], "neural_compressor": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 205, 208, 223, 225, 226, 227, 229, 230, 231, 232, 234, 237, 238, 243, 244, 245, 246, 247, 267, 268, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 298], "dynamicquantconfig": 187, "userfloatmodel": [187, 191], "exported_model": [187, 191], "quant_config": [187, 188, 190, 191, 192, 193, 194, 195, 196, 247], "prepared_model": [187, 190, 191], "q": [187, 191, 193, 198, 290, 293], "dq": [187, 191, 193, 198, 293], "_inductor": [187, 191], "freez": [187, 191, 248, 284], "set_loc": [187, 190, 191, 192, 194], "releas": [187, 191, 205, 240, 254, 256, 258, 262, 264, 276, 279, 280, 300], "breakthrough": [188, 247], "emerg": [188, 247, 293], "analysi": [188, 247, 248, 265, 284, 292], "chatbot": [188, 247, 285], "fuel": [188, 247], "llm": [188, 190, 191, 192, 195, 198, 247, 284, 285, 288, 290, 293], "nevertheless": [188, 247], "power": [188, 196, 230, 244, 247, 259, 285], "come": [188, 242, 247, 296], "challeng": [188, 247, 288], "explos": [188, 247], "growth": [188, 189, 244, 245, 247, 284], "pose": [188, 247, 288], "obstacl": [188, 247], "practic": [188, 247], "preserv": [188, 192, 224, 247, 284, 290], "ai": [188, 205, 247, 248, 285, 289, 297], "mx": [188, 193, 247], "promot": [188, 192, 247], "microsoft": [188, 205, 206, 247], "msfp": [188, 247], "mxfp8": [188, 247], "fp8": [188, 193, 205, 247, 285], "e5m2": [188, 247], "e8m0": [188, 247], "e4m3": [188, 247], "mxfp6": [188, 247], "fp6": [188, 247], "e3m2": [188, 247], "e2m3": [188, 247], "mxfp4": [188, 247], "fp4": [188, 192, 205, 247, 290], "e2m1": [188, 192, 247, 290], "mxint8": [188, 247], "At": [188, 201, 207, 247, 271, 275, 296], "equival": [188, 190, 192, 195, 198, 205, 247, 285, 290, 293], "demonstr": [188, 197, 205, 233, 247, 248, 278, 279, 280, 294], "abil": [188, 206, 207, 227, 236, 247, 293], "occupi": [188, 247], "incur": [188, 247], "energi": [188, 247], "cost": [188, 192, 198, 247, 287, 290], "silicon": [188, 247], "seamlessli": [188, 247, 272, 284, 296], "offer": [188, 196, 227, 247], "meticul": [188, 247], "craft": [188, 247], "empow": [188, 247], "sacrif": [188, 247, 285], "workflow": [188, 205, 207, 208, 229, 230, 234, 240, 245, 247, 260, 263, 267, 294, 297], "shown": [188, 190, 198, 203, 226, 229, 230, 243, 244, 247, 259, 268, 270, 282, 283, 284, 288, 293, 296], "explor": [188, 206, 247], "focus": [188, 192, 196, 200, 206, 247], "distinct": [188, 247], "hardwar": [188, 191, 205, 206, 230, 239, 244, 247, 265, 284, 285, 286], "friendli": [188, 198, 236, 244, 247, 285, 293, 297, 298], "adapt": [188, 200, 207, 227, 247, 256, 285], "granular": [188, 198, 206, 207, 208, 236, 239, 247, 251, 287, 293, 298], "fall": [188, 247], "consumpt": [188, 198, 247, 293], "frac": [188, 198, 229, 247, 293], "amax": [188, 247], "blocksiz": [188, 247], "expon": [188, 247], "floor": [188, 247], "log2": [188, 247], "represent": [188, 192, 198, 200, 202, 224, 231, 247, 284, 287], "rmin": [188, 196, 198, 247, 287], "mxquantconfig": [188, 247], "w_dtype": [188, 190, 191, 247], "act_dtyp": [188, 190, 191, 194, 247], "woq": [188, 242, 247], "user_model": [188, 247], "darvish": [188, 247], "rouhani": [188, 247], "bita": [188, 247], "et": [188, 192, 198, 224, 247, 290, 293], "al": [188, 192, 198, 224, 247, 290, 293], "push": [188, 192, 198, 201, 247, 284, 290, 293], "narrow": [188, 247], "inferenc": [188, 247], "cloud": [188, 201, 205, 247, 275, 285], "33": [188, 242, 247, 299], "2020": [188, 247], "10271": [188, 247], "10281": [188, 247], "ocp": [188, 247], "deep": [188, 189, 196, 198, 205, 206, 207, 226, 239, 240, 244, 245, 247, 248, 250, 253, 254, 256, 259, 265, 285, 287, 296, 297], "learn": [188, 189, 192, 196, 198, 205, 206, 207, 226, 227, 234, 238, 239, 240, 244, 245, 247, 248, 250, 253, 254, 256, 259, 260, 263, 265, 284, 285, 287, 293, 294, 296, 297], "preprint": [188, 192, 198, 224, 247, 284, 290, 293], "2310": [188, 247], "10537": [188, 247], "2023": [188, 192, 198, 205, 247, 280, 284, 290, 293], "recent": [189, 244, 245], "complex": [189, 225, 244, 245, 284], "significantli": [189, 192, 244, 245, 268, 270, 284, 296], "propos": [189, 192, 198, 203, 206, 230, 245, 290, 293], "googl": [189, 205, 225, 245, 285], "bfloat16": [189, 245, 248, 256, 289], "ieee": [189, 198, 245, 293], "half": [189, 192, 245, 256], "wide": [189, 192, 198, 205, 233, 245, 284, 287], "sixteen": [189, 245], "bandwidth": [189, 192, 198, 244, 245, 290], "3rd": [189, 198, 245, 285, 287, 289], "gen": [189, 198, 242, 245, 285, 287, 289], "xeon": [189, 198, 205, 240, 241, 242, 245, 285, 287, 289, 299], "scalabl": [189, 196, 198, 205, 240, 242, 245, 285, 287, 289], "processor": [189, 198, 205, 242, 245, 273, 285, 287, 289], "codenam": [189, 242, 245], "cooper": [189, 240, 245, 285], "lake": [189, 240, 245, 285], "boost": [189, 205, 245, 249, 265, 284, 285], "purpos": [189, 190, 191, 192, 194, 236, 245, 265, 267, 286, 287], "x86": [189, 245], "instruct": [189, 190, 198, 207, 208, 230, 240, 245, 260, 263, 267, 268, 269, 270, 284, 285, 286, 287, 293, 299], "avx512": [189, 198, 245, 287], "vcvtne2ps2bf16": [189, 245], "vcvtneps2bf16": [189, 245], "vdpbf16p": [189, 245], "dot": [189, 198, 245, 287], "product": [189, 198, 205, 239, 245, 248, 249, 265, 271, 285, 287, 292, 296], "publish": [189, 200, 241, 242, 245, 266, 293], "4th": [189, 198, 242, 285, 287], "isa": [189, 256], "vector": 189, "512": [189, 192], "avx": 189, "16": [189, 227, 240, 278, 290, 299], "754": 189, "complement": [189, 284], "fbgemm": [189, 245, 287], "10004": [189, 192, 193, 202, 203, 206, 226, 230, 231, 232, 236, 239, 245, 247, 283, 286, 288, 290, 298], "avx512_bf16": [189, 245], "11": [189, 198, 240, 243, 245, 267, 293, 296, 299], "avx512_fp16": 189, "eval_fn": [189, 193, 194, 195, 196, 197], "eval_arg": [189, 193, 194, 196], "mixprecisionconfig": 189, "tuningconfig": [189, 193, 194, 195, 196, 197], "eval_acc_fn": [189, 194, 196], "acc": [189, 194, 203, 242, 275, 284, 294, 299], "might": [189, 202, 225, 267, 296], "custom_tune_config": [189, 194, 195, 196, 197], "config_set": [189, 194, 195, 196, 197], "build_torch_model": 189, "tune_config": [189, 193, 194, 195, 196, 197, 207], "acceler": [190, 192, 195, 198, 205, 230, 244, 248, 256, 265, 268, 272, 284, 285, 289, 290, 293, 296], "gigant": [190, 195, 293], "systemat": [190, 195, 293], "outlier": [190, 192, 195, 198, 207, 224, 229, 270, 290, 293], "quantif": [190, 192, 195, 290, 293], "difficult": [190, 195, 197, 198, 206, 293], "migrat": [190, 195, 198, 293, 297], "difficulti": [190, 195, 198, 293], "mathemat": [190, 195, 198, 293], "smoothquantconfig": [190, 195, 196], "run_fn": [190, 191, 192, 193], "descript": [190, 202, 207, 208, 226, 273, 277, 293], "stai": [190, 192, 193, 290, 293], "abov": [190, 191, 192, 194, 198, 206, 207, 208, 230, 267, 268, 270, 273, 284, 287, 293, 296], "lambada": [190, 293], "openai": [190, 293], "sweet": [190, 293], "spot": [190, 293], "region": [190, 293], "paper": [190, 192, 198, 230, 284, 290, 293], "bigscienc": [190, 242, 293, 299], "bloom": [190, 198, 205, 242, 284, 293, 299], "560m": [190, 293], "354": [190, 293], "3542": [190, 293], "1b7": [190, 242, 293], "4634": [190, 293], "4936": [190, 293], "3b": [190, 242, 293], "518": [190, 293], "5185": [190, 293], "7b1": [190, 293, 299], "5764": [190, 293, 299], "5977": [190, 293], "bloomz": [190, 293, 299], "3947": [190, 293], "3930": [190, 293], "4828": [190, 293], "4906": [190, 293], "5018": [190, 293], "4980": [190, 293], "5593": [190, 293, 299], "5552": [190, 293], "facebook": [190, 242, 271, 293, 299], "opt": [190, 198, 205, 242, 253, 284, 293, 296, 299], "125m": [190, 205, 293], "379": [190, 293], "3757": [190, 293], "350m": [190, 293], "4516": [190, 293], "4533": [190, 293], "5789": [190, 293], "5742": [190, 293], "7b": [190, 242, 293, 299], "6365": [190, 293], "6404": [190, 293], "6769": [190, 293, 299], "6804": [190, 293, 299], "13b": [190, 242, 293, 299], "6872": [190, 293], "6814": [190, 293], "30b": [190, 242, 293, 299], "7149": [190, 293], "7128": [190, 293], "66b": [190, 293], "7398": [190, 293], "7326": [190, 293], "llama": [190, 205, 242, 284, 285, 288, 290, 293, 299], "7361": [190, 293, 299], "7357": [190, 293], "7627": [190, 293, 299], "7590": [190, 293], "7759": [190, 293, 299], "7840": [190, 293], "65b": [190, 293], "7908": [190, 293], "7957": [190, 293], "eleutherai": [190, 205, 242, 269, 293, 299], "gpt": [190, 205, 242, 269, 284, 293, 299], "j": [190, 198, 205, 242, 269, 284, 293, 299], "6b": [190, 242, 269, 293, 299], "6831": [190, 293, 299], "6821": [190, 198, 293], "mbzuai": [190, 293], "lamini": [190, 284, 293], "124m": [190, 293], "3804": [190, 293], "3887": [190, 293], "774m": [190, 293], "5048": [190, 293], "5057": [190, 293], "5b": [190, 293], "5443": [190, 293, 299], "5436": [190, 293], "mosaicml": [190, 293, 299], "mpt": [190, 284, 293, 299], "chat": [190, 242, 293, 299], "655": [190, 293, 299], "6499": [190, 293], "stabilityai": [190, 293], "stablelm": [190, 293], "4172": [190, 293], "4149": [190, 293], "togethercomput": [190, 293], "redpajama": [190, 293], "incit": [190, 293], "6542": [190, 293], "6735": [190, 293], "6718": [190, 293], "6740": [190, 293, 299], "6569": [190, 293], "6621": [190, 293], "v0": [190, 229, 242, 270, 293, 294], "7143": [190, 293], "7221": [190, 293], "6895": [190, 293], "6953": [190, 293, 299], "databrick": [190, 242, 293, 299], "dolli": [190, 242, 284, 293, 299], "6866": [190, 293, 299], "6297": [190, 293], "6247": [190, 293], "tiiuae": [190, 242, 293, 299], "falcon": [190, 205, 242, 284, 293, 299], "6437": [190, 293, 299], "6392": [190, 293], "asterisk": [190, 293], "gt": [190, 192, 227, 293, 295], "retrain": [191, 231], "involv": 191, "improv": [191, 192, 198, 201, 224, 225, 244, 248, 265, 266, 268, 284, 285, 287, 289, 290, 296, 297, 299], "philosophi": [191, 196, 287], "request": [191, 205, 273, 274, 275, 278, 279, 280, 287], "would": [191, 198, 201, 244, 269, 284, 287, 293], "appropri": [191, 197, 198, 200, 224, 293], "crucial": [191, 284], "occur": 191, "jit": [191, 248, 250, 255, 293, 294], "effect": [191, 192, 206, 284, 285], "intel_extension_for_pytorch": 191, "staticquantconfig": [191, 194, 195, 196, 197], "act_sym": [191, 194, 196, 197], "act_algo": 191, "minmax": [191, 192, 207, 208, 224, 236, 287, 298], "program": [191, 205, 232, 241, 248, 265], "fc1": 191, "dynamo": [191, 193], "qd": 191, "As": [192, 198, 202, 207, 226, 230, 243, 244, 259, 270, 284, 290, 296], "becom": [192, 198, 206, 234, 284, 290], "preval": [192, 198, 290], "grow": [192, 198, 290], "demand": [192, 198, 290], "modern": [192, 198, 250, 290], "trade": [192, 198, 290], "off": [192, 198, 201, 290], "bottleneck": [192, 198, 290], "deploi": [192, 197, 198, 201, 230, 244, 271, 275, 290, 296], "roughli": [192, 198, 290], "speak": [192, 198, 290], "move": [192, 198, 202, 271, 286, 290, 291], "count": [192, 198, 203, 227, 290], "p": [192, 198, 205, 266, 267, 290], "theoret": [192, 198, 287, 290], "capac": [192, 198, 290, 292], "flop": [192, 198, 290], "forward": [192, 198, 207, 244, 267, 284, 286, 287, 290, 293, 294], "f": [192, 198, 225, 230, 232, 287, 290, 293], "famou": [192, 198, 290], "scenario": [192, 193, 198, 206, 223, 230, 244, 284, 290], "approx": [192, 198, 290], "bmm": [192, 198, 290], "past": [192, 198, 206, 290], "howev": [192, 198, 271, 284, 290, 293], "100x": [192, 198, 290], "besid": [192, 198, 206, 230, 270, 290], "mention": [192, 198, 284, 290], "caus": [192, 198, 207, 226, 249, 268, 270, 284, 290], "straightforward": [192, 196, 198, 284, 290, 293], "larger": [192, 198, 207, 284, 290, 293], "introduc": [192, 198, 206, 207, 208, 236, 244, 287, 290, 291, 293, 297], "think": [192, 290], "veri": [192, 198, 244, 266, 270, 287, 290, 296, 297], "intuit": [192, 198, 290, 293], "uniformli": [192, 290], "qlora": [192, 198, 290], "uniform": [192, 224, 290], "nf4": [192, 205, 290], "prove": [192, 198, 224, 290, 293], "highli": [192, 285, 290], "invers": [192, 290], "share": [192, 198, 235, 236, 290, 293, 296], "restor": [192, 290], "tailor": 192, "consist": [192, 201, 202, 225, 273, 293, 296], "deliv": [192, 244, 285, 291], "often": [192, 226, 230, 270, 283, 284], "outperform": [192, 203], "signround": 192, "protect": [192, 290], "salient": [192, 284, 290], "greatli": [192, 288, 290], "big": [192, 229, 290], "trainabl": [192, 205, 285, 290], "inspir": [192, 290], "rather": [192, 238, 290], "addition": [192, 208, 232, 284, 296], "incorpor": [192, 207, 208, 231, 284, 296], "l": [192, 224, 230, 294, 296], "norm": 192, "hyper": [192, 298], "laplacian": 192, "heavi": [192, 231], "tail": 192, "nuanc": 192, "weightonlyqu": 192, "sym": [192, 207, 208, 236, 287, 290, 298], "doubl": [192, 285], "along": [192, 240, 284, 290], "normalfloat": [192, 290], "bnb": [192, 290], "comment": [192, 200, 207, 227, 243, 244, 290, 295], "state": [192, 208, 251, 284], "model_path": [192, 229, 278], "rtnconfig": [192, 197], "diagon": [192, 290], "rearrang": [192, 284, 290], "percdamp": [192, 290], "stabil": [192, 290], "mitig": [192, 290], "actord": [192, 290], "gptqconfig": [192, 197], "rate": [192, 198, 244, 284, 287], "mem": 192, "seqlen": [192, 205], "rand": [192, 198, 248, 293], "gap": [192, 229, 246], "autoroundconfig": 192, "clip": [192, 198, 290, 293], "awqconfig": 192, "teqconfig": 192, "train_fn": 192, "skip": [192, 294, 296], "lm": [192, 284], "head": [192, 284], "hqqconfig": 192, "use_sym": [192, 197], "lm_head": [192, 284, 290], "lm_head_config": 192, "quantit": 192, "weightonlylinear": [192, 290], "storag": [192, 198, 237, 243, 267, 270, 290, 293], "date": [192, 290], "saved_result": [192, 193, 246, 269, 290], "orig_model": 192, "yourmodel": 192, "loaded_model": 192, "original_model": 192, "xiao": [192, 198, 290, 293], "guangxuan": [192, 198, 290, 293], "2211": [192, 198, 290, 293], "10438": [192, 198, 290, 293], "wei": [192, 198, 290, 293], "xiui": [192, 198, 290, 293], "suppress": [192, 198, 290, 293], "2209": [192, 198, 290, 293, 299], "13325": [192, 198, 290, 293], "lin": [192, 198, 290], "ji": [192, 198, 290], "2306": [192, 198, 290], "00978": [192, 198, 290], "frantar": [192, 198, 284, 290], "elia": [192, 198, 290], "2210": [192, 198, 290], "17323": [192, 198, 290], "cheng": [192, 198], "wenhua": [192, 198], "descent": [192, 198, 205, 285], "2309": [192, 198], "05516": [192, 198], "badri": 192, "hicham": 192, "shaji": 192, "appu": 192, "quadrat": 192, "onlin": [192, 200, 292], "mobiusml": 192, "io": [192, 271], "blog": [192, 205, 285], "dettmer": [192, 198, 290], "tim": [192, 198, 290], "finetun": [192, 198, 268, 284, 290], "2305": [192, 198, 290], "14314": [192, 198, 290], "grain": [193, 284, 285, 296], "comprehens": [193, 196, 244, 297], "varieti": [193, 197, 233, 286, 296], "classic": [193, 296], "latest": [193, 205, 240, 285, 291], "research": [193, 205, 241, 293, 299], "simul": [193, 208], "emul": [193, 198, 244, 287], "eas": [193, 196, 240, 250, 285], "commit": [193, 196, 200, 201], "extend": [193, 207, 208], "hand": [193, 196, 203], "reus": 193, "conveni": [193, 244, 272], "discuss": [193, 205], "far": 193, "still": [193, 195, 198, 224, 244, 271, 285, 287, 289], "reli": [193, 244, 293], "plan": [193, 239], "agnost": [193, 230], "arbitrari": [193, 244, 283], "deploy": [193, 228, 248, 265, 285, 288, 293], "One": [193, 208, 225, 227, 232, 239, 270, 284, 285, 296], "scope": [193, 201, 207, 244], "baseconfig": [193, 196, 225], "inplac": 193, "monitor": [193, 273, 278, 279, 280], "place": [193, 231, 240, 278, 284, 294, 296], "run_arg": 193, "_description_": 193, "renam": [193, 291], "previou": [193, 198, 207, 208, 244, 284, 291, 293, 294, 296, 297, 299], "orig_sav": 193, "suggest": [193, 202, 225, 292], "rtn": [193, 198, 225, 288, 290], "gptq": [193, 198, 225, 242, 288, 290], "awq": [193, 198, 288, 290], "autoround": [193, 198, 205, 242], "teq": [193, 205, 285, 288, 290], "hqq": 193, "trane": 193, "torchdynamo": [193, 255], "pytorchdynamo": 193, "logic": [193, 298], "torchimport": 193, "fundament": [194, 195, 224, 244], "respons": [194, 278, 279, 280, 287], "val_dataset": [194, 244, 287], "val_dataload": [194, 244, 287], "mydataload": [194, 196, 197], "quantize_model": [194, 195, 196, 198], "qmodel": [194, 196], "good": [194, 200, 287, 296], "base_tun": [194, 196], "autotun": [194, 195, 196, 198, 225], "weight_sym": [194, 196, 197], "static_qu": [194, 225], "weight_dtyp": 194, "weight_granular": 194, "per_tensor": [194, 207, 208, 236, 287, 298], "act_granular": 194, "from_dict": 194, "conv2d_config": 194, "output_graph_def": 195, "sq_config": 195, "static_config": 195, "fusion": [195, 202, 206, 236], "look": [195, 206, 208, 236, 243, 267, 268, 270, 293, 298], "eval_fn_wrapp": 195, "consider": [195, 293], "amount": [195, 293], "experi": [196, 200, 248, 270, 292, 293, 296], "calib_iter": [196, 207], "rule": [196, 229, 248, 284], "partial": [196, 284, 287], "particularli": 196, "critic": [196, 200], "toler": [196, 270], "And": [196, 198, 201, 202, 223, 225, 244, 251, 293], "supplement": 196, "baseline_model": [196, 197], "asymmetr": [196, 208, 287, 290, 296], "onednn": [196, 245, 287], "rmax": [196, 198, 287], "sq": [196, 242, 293], "unseen": [196, 198, 287], "zeropoint": [196, 198, 287], "enough": [196, 198, 287], "unlik": 196, "tradit": [196, 251, 284], "signific": [196, 198, 284, 285, 288, 293], "refin": [196, 238, 284], "instal": [196, 232, 235, 237, 248, 250, 253, 256, 260, 263, 265, 266, 268, 269, 270, 300], "aim": [197, 203, 205, 242, 248, 284, 293, 296, 297], "quickli": [197, 242, 296, 297], "despit": 197, "consum": [197, 226], "certain": [197, 292], "predefin": 197, "primari": [197, 224, 296], "get_woq_tuning_config": 197, "travers": [197, 207, 208, 290, 296], "default_sampl": 197, "trial": [197, 296], "met": [197, 198, 203, 236, 287, 294], "invent": [198, 287], "speed": [198, 224, 244, 256, 284, 285, 287, 296], "int4": [198, 205, 242, 287, 299], "miss": [198, 284, 287], "On": [198, 287, 299], "4x": [198, 203, 287], "speedup": [198, 233, 239, 287], "z": [198, 224, 225, 230, 293], "255": [198, 287, 293], "math": [198, 287], "sometim": [198, 202, 229, 287], "overflow": [198, 287], "issu": [198, 200, 201, 204, 205, 240, 268, 270, 287, 294], "due": [198, 208, 234, 284, 287, 293, 294], "vnni": [198, 233, 239, 286, 287], "solv": [198, 201, 287, 291], "coarsest": [198, 293], "finer": [198, 293, 296], "2d": [198, 293], "matric": [198, 293], "3d": [198, 285, 293], "similarli": [198, 293], "finest": [198, 293], "adopt": [198, 201, 248, 284, 285, 293], "why": [198, 293, 294], "suppos": [198, 293], "6839": [198, 293], "4741": [198, 293], "7451": [198, 293], "9301": [198, 293], "1742": [198, 293], "6835": [198, 293], "formula": [198, 284, 293], "num_bit": [198, 293], "q_min": [198, 293], "q_max": [198, 293], "zp": [198, 293], "q_x": [198, 293], "clamp_": [198, 293], "round_": [198, 293], "w_q": [198, 293], "00296431384049356": [198, 293], "59": [198, 242, 293, 299], "172": [198, 293, 299], "192": [198, 293], "w_dq": [198, 293], "2220": [198, 293], "1510": [198, 293], "2420": [198, 293], "2570": [198, 293], "0500": [198, 293], "1890": [198, 293], "mseloss": [198, 293], "1983354538679123": [198, 293], "6848": [198, 293], "4743": [198, 293], "7440": [198, 293], "9308": [198, 293], "1749": [198, 293], "385297635664756e": [198, 293], "07": [198, 242, 293, 298, 299], "affect": [198, 293], "quantize_per_channel": [198, 293], "x_tmp": [198, 293], "detach": [198, 293], "reshap": [198, 293], "keepdim": [198, 293], "divid": [198, 226, 275, 293, 296], "dequantize_per_channel": [198, 293], "0029": [198, 293, 299], "0036": [198, 293], "162": [198, 293, 299], "48": [198, 293, 299], "72": [198, 242, 293, 299], "93": [198, 242, 293, 299], "207": [198, 293, 299], "139": [198, 293, 299], "6837": [198, 293], "4734": [198, 293], "1751": [198, 293], "637690492221736e": [198, 293], "6376e": [198, 293], "3852e": [198, 293], "cdot": [198, 293], "quantize_per_tensor_absmax": [198, 293], "n_bit": [198, 293], "div_": [198, 293], "0806": [198, 293], "7589": [198, 293], "6038": [198, 293], "3815": [198, 293], "5040": [198, 293], "7174": [198, 293], "5444": [198, 293], "5826": [198, 293], "7772": [198, 293], "5555": [198, 293], "3740": [198, 293], "3253": [198, 293], "0698": [198, 293], "1381": [198, 293], "5972": [198, 293, 299], "0086": [198, 293], "0737": [198, 293], "8298": [198, 293], "6883": [198, 293], "2991": [198, 293], "1601": [198, 293], "6506": [198, 293], "8246": [198, 293], "3924": [198, 293], "3845": [198, 293], "8768": [198, 293], "w_scale": [198, 293], "x_q": [198, 293], "x_scale": [198, 293], "13": [198, 235, 240, 267, 291, 293, 299], "84": [198, 242, 293, 299], "120": [198, 293], "0059755356051027775": [198, 293], "83": [198, 292, 293, 299], "89": [198, 242, 293, 299], "119": [198, 293], "85": [198, 292, 293, 299], "57": [198, 242, 293, 299], "91": [198, 290, 293, 299], "006533813662827015": [198, 293], "y_q": [198, 293], "17509": [198, 293], "7608": [198, 293], "4055": [198, 293], "16599": [198, 293], "21020": [198, 293], "10016": [198, 293], "9860": [198, 293], "22444": [198, 293], "y_dq": [198, 293], "6836": [198, 293], "2970": [198, 293], "1583": [198, 293], "6481": [198, 293], "8207": [198, 293], "3911": [198, 293], "3850": [198, 293], "8763": [198, 293], "major": [198, 238, 270, 287, 293], "peopl": [198, 287], "though": [198, 293], "simplic": [198, 293], "present": [198, 229, 273, 285, 293], "middl": [198, 271, 293], "denot": [198, 293], "fp1": [198, 293], "fp2": [198, 293], "subsect": [198, 293, 298], "explain": [198, 208, 229, 293], "even": [198, 288, 290, 293], "lot": [198, 202, 270, 293], "briefli": [198, 244, 293], "similar": [198, 244, 269, 286, 293, 296, 298], "idea": [198, 205, 267, 284, 293, 296], "attach": [198, 230, 244, 293], "x1": [198, 293, 296], "x2": [198, 293, 296], "layernorm": [198, 293], "excel": [198, 290], "mimic": [198, 287], "done": [198, 202, 230, 231, 249, 265, 274, 278, 279, 284, 287], "adjust": [198, 256, 287, 293], "fact": [198, 287], "ultim": [198, 287], "therefor": [198, 202, 244, 268, 270, 284, 287, 288, 291, 293], "pain": [198, 287], "brought": [198, 246, 249, 256, 287], "lossi": [198, 287], "respect": [198, 200, 236, 284, 293, 298], "chart": [198, 270, 287, 292, 294], "understand": [198, 271, 287, 294, 297], "yvinec": [198, 293], "edouard": [198, 293], "proceed": [198, 293], "cvf": [198, 293], "winter": [198, 293], "confer": [198, 284, 293], "vision": [198, 205, 234, 252, 293], "welcom": [199, 200, 201, 205, 267, 274, 300], "interest": [200, 205, 267, 294], "foster": 200, "particip": [200, 275], "commun": [200, 267], "harass": 200, "everyon": 200, "regardless": 200, "ag": 200, "bodi": 200, "ethnic": 200, "sex": 200, "characterist": 200, "gender": 200, "ident": [200, 230], "educ": 200, "socio": 200, "econom": 200, "person": [200, 285], "appear": [200, 259, 265, 267], "race": 200, "religion": 200, "sexual": 200, "orient": 200, "behavior": [200, 206, 207, 208, 236, 246, 290, 294, 296, 298], "contribut": [200, 205, 284], "inclus": 200, "Being": 200, "viewpoint": 200, "gracefulli": 200, "empathi": 200, "toward": [200, 230], "member": [200, 206], "unaccept": 200, "imageri": 200, "unwelcom": 200, "troll": 200, "insult": 200, "derogatori": 200, "polit": 200, "attack": 200, "public": [200, 260, 263], "privat": 200, "electron": 200, "explicit": 200, "permiss": 200, "inappropri": 200, "profession": 200, "clarifi": 200, "fair": 200, "action": [200, 260, 263], "edit": 200, "reject": 200, "wiki": 200, "ban": 200, "temporarili": 200, "perman": [200, 284], "deem": 200, "threaten": 200, "offens": 200, "harm": 200, "mail": 200, "social": [200, 285], "media": [200, 285], "account": [200, 292, 296], "appoint": 200, "event": [200, 294], "abus": 200, "report": [200, 201, 205, 275, 292], "contact": [200, 291, 292], "complaint": 200, "review": [200, 201, 205, 285], "investig": [200, 225, 270], "necessari": [200, 203, 207, 246, 266, 284, 292, 296], "circumst": [200, 286], "oblig": [200, 271], "confidenti": [200, 267], "regard": [200, 289], "incid": 200, "faith": 200, "face": [200, 205, 213, 248, 252, 272, 274, 285, 291, 299], "repercuss": 200, "leadership": 200, "faq": [200, 205], "page": [200, 201, 267, 270, 271], "send": [201, 207], "view": [201, 205, 233, 256, 265, 271, 291], "star": 201, "repositori": [201, 260, 263], "button": [201, 239, 259, 265], "fork": [201, 260, 263], "clone": [201, 229, 240, 258, 262, 267, 269, 270, 272, 273], "pc": 201, "git": [201, 229, 235, 240, 267, 269, 270, 272, 273], "branch": 201, "modif": [201, 206, 236, 253, 272], "checkout": 201, "my": 201, "messag": [201, 273, 274, 278, 279, 280, 296], "cover": [201, 234, 238, 285], "certif": [201, 267], "agre": 201, "pr": [201, 226, 243, 260, 263, 291], "approv": 201, "licens": 201, "azur": [201, 205, 285], "devop": 201, "ci": 201, "e16": 201, "v5": 201, "scan": [201, 205], "pylint": 201, "bandit": 201, "copyright": [201, 241], "docstyl": 201, "spellcheck": 201, "dco": 201, "pytest": 201, "No": [201, 225, 235, 244, 273, 274, 285], "failur": [201, 202], "fault": 201, "coverag": 201, "submit": [201, 272, 275, 285], "bug": [201, 205], "intend": 201, "safe": 201, "collabor": [201, 205, 250, 256], "adher": 201, "toolkit": [202, 240, 248, 256, 285, 297], "tracer": 202, "graphmodul": [202, 289], "resolv": [202, 204], "floatfunct": 202, "cat": [202, 234, 251, 278, 279, 280], "relu": [202, 236, 293, 294], "batchnorm": [202, 293], "eval": [202, 225, 226, 229, 248, 287, 294], "fail": [202, 226, 234, 274], "conduct": [202, 244, 253, 265, 296, 297], "imper": 202, "successfulli": [202, 205, 232, 274, 278, 279, 280, 285], "traceabl": 202, "proxi": 202, "tutori": [202, 256, 285, 297], "prototyp": 202, "html": [202, 205, 207, 224, 232, 239, 260, 263, 266, 268, 274, 278, 287], "highlight": 202, "untrac": 202, "ssd": [202, 234, 299], "resnet34": [202, 299], "r34": 202, "bboxes_labels_scor": 202, "prob": 202, "45": [202, 242, 299], "max_output": 202, "zip": [202, 274, 278, 279], "squeez": 202, "dbox": 202, "dlabel": 202, "dscore": 202, "decode_singl": 202, "autom": [203, 248, 265, 266, 285, 293], "artifici": 203, "ann": 203, "par": [203, 275], "potenti": [203, 229], "procedur": [203, 284, 296], "lie": [203, 224], "predictor": 203, "figur": [203, 258, 259, 262, 288], "popul": 203, "inner": 203, "evolutionari": 203, "cycl": 203, "until": [203, 207, 296], "conclud": 203, "yet": [203, 260, 263, 266, 273, 287], "simplest": [203, 224, 251], "launcher": [203, 205, 230, 231, 256, 297], "agent": 203, "nsga2": 203, "supernet": 203, "ofa_mbv3_d234_e346_k357_w1": 203, "mac": [203, 266], "num_ev": 203, "250": [203, 284], "results_csv_path": 203, "search_result": 203, "dataset_path": 203, "ilsvrc2012": 203, "mobilenetv3": 203, "lt": [203, 227], "wmt": 203, "en": 203, "de": 203, "guidelin": [204, 205], "mainstream": [205, 297], "particular": [205, 284, 290], "flex": [205, 240], "amd": [205, 240, 299], "arm": [205, 239, 240, 299], "nvidia": [205, 224, 239, 240, 299], "llama2": 205, "broad": [205, 239, 254, 297], "stabl": [205, 240, 284, 285], "diffus": [205, 285], "hub": [205, 233, 237, 256], "hug": [205, 272, 285], "coder": [205, 239, 249, 250, 253, 256, 259, 272, 276, 285], "marketplac": [205, 266, 285], "amazon": [205, 248, 256], "web": [205, 267, 273, 278, 279, 280, 294], "servic": [205, 265, 272, 285], "softwar": [205, 241, 284, 285, 291], "alibaba": [205, 255, 262, 263, 285], "tencent": [205, 285], "taco": [205, 285], "oliv": [205, 285], "ecosystem": [205, 285], "lightn": [205, 255], "2024": [205, 299], "03": [205, 242, 299], "sota": [205, 285], "gaudi2": 205, "pip": [205, 229, 232, 235, 237, 240, 250, 253, 258, 260, 262, 263, 267, 268, 269, 270, 291], "34": [205, 242, 280, 299], "packag": [205, 206, 225, 235, 240, 265, 266, 285, 291, 296], "gauid2": 205, "docker": 205, "gaudi": 205, "stack": 205, "setup": [205, 229, 236, 240, 260, 263, 267, 269, 270, 272, 273, 284], "habana": 205, "habana_visible_devic": 205, "ompi_mca_btl_vader_single_copy_mechan": 205, "cap": 205, "sys_nic": 205, "host": [205, 232, 273, 275, 278, 279, 280], "ipc": 205, "vault": 205, "ubuntu22": 205, "04": [205, 240, 299], "habanalab": 205, "login": [205, 260, 263, 292], "exec": 205, "container_id": 205, "bash": [205, 270, 294], "optimum": [205, 255, 256, 268, 290], "upgrad": [205, 244], "auto_round": 205, "automodel": 205, "autotoken": [205, 244], "get_dataload": 205, "neo": [205, 299], "float_model": 205, "trust_remote_cod": 205, "woq_conf": 205, "quantized_model": [205, 274, 278, 279], "resnet18": [205, 245, 250, 299], "static_quant_conf": 205, "overview": [205, 296], "jupyterlab": [205, 248, 254, 256, 258, 262, 297], "studio": [205, 256, 265, 275, 297], "topic": 205, "innov": [205, 256, 285], "june": [205, 285], "qwen2": [205, 285], "meta": [205, 242, 285, 299], "apr": [205, 285], "emnlp": [205, 285], "sep": [205, 285], "legal": [205, 300], "secur": [205, 267, 285, 300], "ask": [205, 240], "email": 205, "discord": 205, "join": [205, 268, 273, 278, 279], "technic": 205, "wechat": [205, 285], "img": 205, "bridg": [206, 207, 239], "vanilla": [206, 207, 239], "adaptor_registri": 206, "abcadaptor": 206, "__init__": [206, 225, 226, 227, 243, 296], "framework_specific_info": 206, "tune_cfg": [206, 208, 296], "query_fw_cap": [206, 208], "query_fused_pattern": 206, "he": 206, "describ": [206, 208, 225, 229, 236, 267, 294], "mainten": 206, "fragment": 206, "scheme": [206, 207, 208, 226, 236, 256, 290, 296, 298], "semant": [206, 236], "querybackendcap": [206, 207], "tensorflowqueri": 206, "mla": [206, 245, 287], "qtype": 206, "onnxrt_qlinearopsadaptor": 206, "data_load": 206, "inspect_tensor": 206, "op_list": [206, 294], "iteration_list": 206, "inspect_typ": 206, "save_to_disk": 206, "quantization_cfg": 206, "set_tensor": 206, "tensor_dict": 206, "input_graph": 206, "diagnosis_help": 206, "fw": 207, "outlin": [207, 208], "accommod": [207, 208], "give": [207, 265, 296], "diagram": [207, 208, 229, 296], "illustr": [207, 208, 231, 296], "sequencediagram": [207, 208, 275], "autonumb": [207, 208], "query_framework_cap": 207, "opwis": 207, "optypewis": 207, "\u2776": 207, "\u2777": 207, "\u2778": 207, "\u2779": 207, "\u277a": 207, "\u277b": 207, "\u277c": 207, "These": [207, 239, 268], "chapter": 207, "node_op": 207, "confirm": 207, "chosen": [207, 224], "conv2d": [207, 208, 229, 234, 236, 270, 293, 294, 296], "int8_conv_config": 207, "optype_wise_": 207, "per_channel": [207, 208, 236, 287, 298], "tuning_cfg_to_fw": 207, "Its": [207, 224, 284], "quantize_config": 207, "op_wise_config": 207, "dispatch": [207, 239, 272, 275], "is_perchannel": 207, "is_asymmetr": 207, "weight_bit": 207, "bf16_op": [207, 289], "convert_bf16": 207, "got": [207, 235, 294], "subsequ": [207, 248, 265], "calib": 207, "somewhat": 207, "distort": 207, "line": [207, 225, 232, 239, 248, 253, 254, 273, 294], "let": [208, 236, 253, 284, 286, 298], "overal": [208, 273, 290, 298], "drive": 208, "section": [208, 225, 229, 230, 231, 265, 268, 271, 284, 286, 290, 298], "uint4": 208, "asym": [208, 236, 290, 298], "independ": 208, "kullback": [208, 230], "leibler": [208, 230], "pytorch_cpu": 208, "1_11_capabl": 208, "cap_s8_1_11": 208, "conv1d": 208, "cap_s8_1_11_conv1d": 208, "per_channel_symmetr": 208, "per_tensor_symmetr": 208, "nativ": 208, "with_arg": 208, "qscheme": 208, "torch_dtyp": 208, "quant_min": 208, "quant_max": 208, "linux": [223, 235, 259, 265], "x86_64": 223, "aarch64": 223, "benefici": 224, "\u03b2": 224, "\u03b1": 224, "focu": [224, 296], "essenti": [224, 235], "percentil": 224, "remaind": 224, "enhanc": [224, 248, 284, 285, 289], "resolut": 224, "extrem": 224, "retain": 224, "noteworthi": 224, "vanhouck": 224, "vincent": 224, "andrew": 224, "senior": 224, "mark": 224, "mao": 224, "2011": 224, "szymon": 224, "migacz": 224, "tensorrt": [224, 245, 287], "2017": 224, "mckinstri": 224, "jeffrei": 224, "discov": [224, 294], "embed": [224, 284], "1809": 224, "04191": 224, "2018": 224, "mostli": 225, "summar": [225, 230], "conflict": [225, 235], "overli": 225, "argu": 225, "decis": [225, 243], "prioriti": [225, 276], "pep": 225, "o": [225, 240, 250, 268], "sub_modul": 225, "namespac": 225, "pollut": 225, "subprocess": [225, 226], "popen": 225, "statement": 225, "pipe": 225, "long_str": 225, "extran": 225, "__version__": 225, "pager": 225, "getenv": 225, "readabl": 225, "seem": 225, "worth": [225, 284], "4f": 225, "65421": 225, "sentenc": 225, "register_config": 225, "framework_nam": 225, "algo_nam": 225, "eval_result": 225, "declar": [225, 266], "typealia": 225, "_lossandgradi": 225, "complextfmap": 225, "xx_func": 225, "ordereddict": 225, "pylanc": 225, "cheeseshopaddress": 225, "chees": 225, "shop": 225, "outofcheeseerror": 225, "crbug": 225, "192795": 225, "cpufreq": [225, 251], "deprec": [225, 260, 263, 291, 295], "facilit": [225, 248], "__all__": 225, "get_all_config_set_from_config_registri": 225, "composableconfig": 225, "fwk_name": 225, "algorithm_entri": 225, "snippet": [225, 239], "register_algo": 225, "rtn_algo_entri": 225, "smooth_quant_entri": 225, "vscode": [225, 264, 266], "settings_recommend": 225, "encount": 226, "previous": 226, "lack": [226, 235], "faster": [226, 228, 234, 285, 296, 299], "treat": 226, "Of": 226, "evenli": 226, "discard": 226, "throw": 226, "awai": 226, "draw": [226, 292, 296], "pin": [226, 258, 262], "reshuffl": 226, "manner": [226, 230, 246], "newdataload": 226, "input_data": 226, "customis": [226, 227, 243], "ensp": [227, 295], "imagerecord": [227, 232, 298], "image_nam": 227, "cocorecord": 227, "int64": 227, "style_transf": 227, "content": [227, 273, 274, 278, 279, 280], "tfrecorddataset": 227, "post_training_static_qu": [227, 244, 286, 296], "labelbal": 227, "300": [227, 284], "helloworld": [227, 245, 295], "aid": 228, "infrastructur": 228, "diagnos": 229, "gui": [229, 239, 270, 284], "termin": [229, 258, 259, 262, 268], "repeat": [229, 296], "durat": [229, 274, 278, 279, 292], "cd": [229, 232, 240, 267, 269, 270, 272, 273, 278, 279, 280], "ilsvr2012": 229, "wget": [229, 235, 237, 267, 270], "caff": 229, "berkeleyvis": 229, "caffe_ilsvrc12": 229, "xvzf": 229, "image_recognit": [229, 270, 294], "resnet50_torchvis": 229, "ptq_static": [229, 269], "resnet50_v1": [229, 232, 244], "dataset_loc": [229, 270, 278, 294], "label_path": 229, "quantiti": 229, "vec": 229, "mu": 229, "sigma": 229, "sqrt": 229, "var": 229, "happen": 229, "dispers": [229, 268], "trust": [229, 267], "cg": [229, 270, 294], "conv0": [229, 270, 294], "expens": [230, 244, 296], "mobil": [230, 244, 299], "produc": 230, "logit": 230, "softmax": 230, "kd": 230, "d": [230, 238, 266, 268, 274, 284], "patient": 230, "compact": [230, 244, 251, 284], "resourc": [230, 272, 275, 296], "convolut": [230, 285], "ia": 230, "shallow": 230, "depth": [230, 289], "deepest": 230, "deeper": 230, "Will": [230, 239], "10006": [230, 231], "student_output": [230, 231], "student_loss": [230, 231], "training_func_for_nc": [230, 231], "distil_loss_conf": 230, "accordingli": [230, 256, 293], "promis": [231, 244, 284], "huge": [231, 270, 284, 288], "light": 231, "booster": 231, "degrad": [231, 284, 296], "novel": [231, 248, 259, 265], "comb": 231, "distillation_criterion": [231, 244, 283], "q_conf": 231, "horovod": 232, "builtin": 232, "enable_eager_execut": 232, "yaml_file_path": 232, "pre_process": 232, "simpli": [232, 246, 248, 250, 253, 265, 273], "evaluation_result": 232, "evaluation_time_cost": 232, "partit": [232, 284], "distributedsampl": 232, "train_sampl": 232, "train_dataset": [232, 287], "num_replica": 232, "rank": 232, "train_load": 232, "train_kwarg": 232, "adadelta": 232, "distributedoptim": 232, "named_paramet": 232, "broadcast_paramet": 232, "state_dict": [232, 290, 294], "root_rank": 232, "broadcast_optimizer_st": 232, "set_epoch": 232, "batch_idx": 232, "zero_grad": [232, 244, 284], "nll_loss": 232, "log_interv": 232, "0f": 232, "tloss": 232, "6f": 232, "dry_run": 232, "break": [232, 244], "test_func": 232, "num_of_process": 232, "002": 232, "ssh": [232, 265], "prompt": 232, "readm": [232, 278], "exactli": [232, 249], "recognit": [232, 234, 284, 294], "resizecropimagenet": [232, 295], "realiz": [232, 282, 289, 292], "tow": 232, "node1": [232, 278, 279], "node2": [232, 278, 279], "TO": [232, 250, 270], "your_node1_nam": 232, "your_node2_nam": 232, "resnet50_fp32_pretrained_model": 232, "nc_resnet50_v1": 232, "resnet": [232, 299], "10k": [233, 237], "2x": [233, 239], "exchang": 234, "hope": 234, "inc_model": [234, 246], "fp32_onnx_config": 234, "verifi": [234, 242], "vgg16": [234, 299], "mobilenet": [234, 292, 299], "rcnn": 234, "torchscript": [234, 288, 293], "unsupport": [234, 244, 284], "add_relu": 234, "conv1d_relu": 234, "conv2d_relu": 234, "group_norm": 234, "hardswish": 234, "instance_norm": 234, "layer_norm": 234, "leaky_relu": 234, "sigmoid": 234, "toolchain": [235, 285], "bare": 235, "metal": 235, "sudo": [235, 251], "apt": [235, 240, 251, 259], "python3": 235, "dev": [235, 258, 262], "distutil": 235, "libgl1": 235, "mesa": 235, "glx": 235, "libglib2": 235, "ln": 235, "sf": 235, "usr": 235, "incompat": 235, "88": [235, 292, 299], "80": [235, 242, 288, 294, 299], "pyobject": 235, "reinstal": 235, "importerror": 235, "libgl": 235, "yum": [235, 240], "opencv": [235, 259], "conda": [235, 251, 259, 278, 279, 280, 291], "pend": [235, 274], "sqlalchemi": 235, "27": [235, 242, 299], "alemb": 235, "forg": 235, "quick": [236, 245, 284, 297, 298], "dive": [236, 297], "unless": 236, "syntax": 236, "go": [236, 260, 263, 271, 286, 290, 295], "15": [236, 240, 279], "up1": 236, "up2": 236, "valid_mixed_precis": 236, "concatv2": 236, "maxpool": 236, "avgpool": 236, "depthwiseconv2dn": 236, "relu6": 236, "biasadd": 236, "addn": 236, "addv2": 236, "grappler": 236, "grappler_optim": 236, "constfold": 236, "arithmet": 236, "debug_stripp": 236, "googleapi": [237, 267, 270], "v1_6": [237, 267, 270], "mobilenet_v1_1": [237, 267, 278], "0_224_frozen": [237, 267, 278], "concept": [238, 292, 297], "custom_metr": 238, "420": 239, "geomean": 239, "upload": [239, 260, 263], "click": [239, 248, 249, 256, 259, 265, 270, 285, 294], "qintegerop": [239, 287], "oneapi": [240, 285, 297], "analyt": [240, 285, 297], "success": [240, 267], "frequent": 240, "pypi": [240, 260, 263], "nightli": 240, "requirements_pt": 240, "requirements_tf": 240, "consolid": 240, "streamlin": [240, 272, 285], "scienc": 240, "websit": 240, "anaconda": [240, 272, 273], "suit": [240, 266, 294], "formerli": 240, "skylak": 240, "cascad": 240, "ic": [240, 285], "sapphir": [240, 242], "rapid": [240, 242], "hbm": 240, "arctic": 240, "sound": 240, "pont": 240, "vecchio": 240, "cento": [240, 299], "ubuntu": 240, "22": [240, 242, 299], "maco": 240, "ventura": 240, "fortensorflow": 240, "forpytorch": 240, "18": [240, 242, 285, 299], "17": [240, 278], "apach": 241, "subject": 241, "accompani": [241, 296], "wish": 241, "bibtex": 241, "misc": 241, "author": 241, "feng": 241, "tian": 241, "hanwen": 241, "haihao": [241, 284], "shen": [241, 284], "suyu": 241, "chen": 241, "howpublish": 241, "year": 241, "logo": 241, "atom": 241, "phi": 241, "pentium": 241, "vtune": 241, "corpor": 241, "subsidiari": 241, "brand": 241, "claim": 241, "hf": [242, 293, 299], "70b": [242, 299], "40b": 242, "baichuan": 242, "baichuan2": 242, "12b": 242, "neox": [242, 299], "20b": [242, 299], "mistralai": 242, "mistral": 242, "thudm": 242, "chatglm2": 242, "chatglm3": 242, "wip": 242, "soon": 242, "lambada_openai": [242, 299], "67": [242, 299], "69": [242, 299], "0222": 242, "55": [242, 280, 299], "9997": 242, "68": [242, 295, 299], "12": [242, 267, 299], "0081": 242, "66": [242, 268, 299], "9905": 242, "71": [242, 299], "51": [242, 299], "75": [242, 284, 299], "0568": 242, "0008": [242, 299], "70": [242, 299], "81": [242, 299], "9902": [242, 299], "06": [242, 280, 298, 299], "0058": [242, 299], "61": [242, 299], "9991": 242, "0034": 242, "46": [242, 299], "47": [242, 299], "99": [242, 299], "0356": 242, "9972": 242, "0121": 242, "35": [242, 284, 299], "63": [242, 284, 299], "92": [242, 299], "9933": [242, 299], "31": [242, 299], "9994": [242, 299], "0006": [242, 299], "9958": [242, 299], "29": [242, 299], "74": [242, 299], "9918": 242, "9964": 242, "58": [242, 279, 299], "0040": 242, "26": [242, 299], "0064": 242, "49": [242, 299], "78": [242, 295, 299], "0041": 242, "53": [242, 299], "0014": 242, "0043": 242, "76": [242, 299], "77": [242, 299], "25": [242, 284, 299], "9932": [242, 299], "0016": 242, "0116": 242, "60": [242, 299], "9978": [242, 299], "79": [242, 294, 299], "9937": [242, 299], "62": [242, 299], "09": [242, 299], "0057": 242, "0005": 242, "73": [242, 299], "9936": 242, "9989": 242, "9987": 242, "0046": [242, 299], "9979": [242, 299], "23": [242, 299], "52": [242, 299], "86": [242, 299], "9930": 242, "00": [242, 299], "9957": [242, 299], "9938": 242, "9942": [242, 299], "9990": 242, "9965": 242, "9995": 242, "82": [242, 299], "0078": 242, "0262": 242, "0052": 242, "9910": 242, "popularli": 243, "industri": [243, 285], "label_map": 243, "ap": 243, "curv": 243, "turn": [243, 259, 288], "target_boxes_num": 243, "str_label": 243, "int_label": 243, "inturn": 243, "cocomap": 243, "vocmap": 243, "categor": 243, "multiclass": 243, "multilabel": 243, "newmetr": 243, "reset": 243, "reflect": [243, 295], "new_metr": 243, "kind": 244, "resort": 244, "inject": 244, "automodelforsequenceclassif": 244, "worker": [244, 275, 278, 279, 280, 287], "ping_memori": [244, 287], "formul": 244, "effort": 244, "written": 244, "onnxrt_integ": [244, 298], "onnxrt_qlinear": [244, 298], "image_tensor": [244, 298], "post_training_dynamic_qu": [244, 286, 296], "1000": [244, 274, 298], "2000": 244, "sampling_s": [244, 298], "model_wis": [244, 298], "op_dict": 244, "op_wis": [244, 294, 298], "sigopt_api_token": [244, 292, 296], "sigopt_project_id": [244, 292, 296], "sigopt_experiment_nam": [244, 292, 296], "performance_onli": 244, "demo": 244, "600": [244, 299], "training_arg": 244, "trainer": [244, 256], "maxim": [244, 284, 296], "pruning_func": 244, "num_train_epoch": [244, 284], "train_dataload": [244, 284, 287], "n_gpu": 244, "gradient_accumulation_step": 244, "clip_grad_norm_": 244, "max_grad_norm": 244, "start_epoch": [244, 286, 298], "end_epoch": [244, 286, 298], "97": [244, 299], "newli": [244, 284], "on_after_optimizer_step": [244, 284], "layer3": [244, 284], "layer2": [244, 284, 287], "lr_schedul": [244, 284], "weight_decai": [244, 298], "0004": 244, "nesterov": [244, 298], "randomresizedcrop": [244, 295], "totensor": [244, 295], "485": 244, "456": 244, "406": [244, 299], "nepoch": 244, "cnt": 244, "loss_sum": 244, "iter_bar": 244, "tqdm": 244, "desc": 244, "teacher_logit": 244, "train_fun": 244, "training_func": 244, "output_model": [244, 268, 270, 294], "exit_polici": [244, 298], "determinist": 244, "meaning": [244, 283], "prune_conf": 244, "quantization_aware_training_conf": 244, "aforement": 244, "inset": 244, "p_conf": [244, 283], "ssd_mobilenet_v1": 244, "benchmarkconf": 244, "launch": [245, 266, 271], "cpuexecutionprovid": [245, 287], "tensorrtexecutionprovid": [245, 287], "cudaexecutionprovid": [245, 287], "cuda": [245, 248, 250, 284, 287], "dnnlexecutionprovid": [245, 287], "plu": 245, "persist": 246, "tf2": 246, "h5": 246, "hybridblock": 246, "0000": 246, "10005": [247, 288], "simplifi": [248, 259, 265, 284, 285], "switch": [248, 294], "acquir": 248, "heurist": [248, 265], "great": 248, "amp": [248, 255, 274, 290], "autocast": 248, "simultan": [248, 272, 283, 286], "my_model": 248, "no_grad": 248, "memory_format": 248, "112": 248, "plugin": [248, 266], "aw": [248, 256, 275, 285, 299], "sagemak": [248, 256], "inlin": [248, 253, 256], "neural_cod": [248, 250, 252, 253, 254, 256], "bench": 248, "superbench": 248, "enjoi": [249, 253, 256], "rebuild": [249, 258, 262], "reload": [249, 266, 268, 271], "democrat": [250, 285], "programm": [250, 256, 265], "nano_bf16_channels_last": 250, "nano_bf16_ipex_channels_last": 250, "nano_bf16_ipex": 250, "nano_bf16": 250, "nano_fp32_channels_last": 250, "nano_fp32_ipex_channels_last": 250, "nano_fp32_ipex": 250, "nano_gpu_to_cpu": 250, "nano_int8": 250, "nano_jit_bf16_channels_last": 250, "nano_jit_bf16_ipex_channels_last": 250, "nano_jit_bf16_ipex": 250, "nano_jit_bf16": 250, "nano_jit_fp32_channels_last": 250, "nano_jit_fp32_ipex_channels_last": 250, "nano_jit_fp32_ipex": 250, "nano_jit_fp32": 250, "nano_onnxruntime_fp32": 250, "nano_onnxruntime_int8_qlinear": 250, "openvino": 250, "nano_openvino_fp32": 250, "nano_openvino_int8": 250, "bc": [251, 259], "conda_prefix": 251, "echo": 251, "libjemalloc": 251, "libiomp5": 251, "home": 251, "lib": 251, "ld_preload": 251, "malloc_conf": 251, "oversize_threshold": 251, "background_thread": 251, "metadata_thp": 251, "dirty_decay_m": 251, "9000000000": 251, "muzzy_decay_m": 251, "kmp_affin": 251, "kmp_blocktim": 251, "dnnl_primitive_cache_capac": 251, "governor": 251, "scaling_governor": 251, "powersav": 251, "tee": 251, "pytorch_jit_script": [252, 255], "pytorch_channels_last": [252, 255], "run_bench": 252, "patch": [252, 265], "patch_path": 252, "your_patch_path": 252, "sweep": 252, "sweep_object": 252, "bench_config": 252, "bench_featur": 252, "sai": 253, "run_glu": [253, 254, 276, 279, 280], "requisit": 253, "task_nam": [253, 254, 276, 279, 280], "do_ev": [253, 254, 269, 276, 279, 280], "remain": 253, "itself": [253, 284], "run_glue_optim": 253, "static_ipex": 253, "stock": [254, 293], "auto_qu": 254, "v4": [254, 276, 279, 280, 299], "albert": [254, 299], "sst2": 254, "alexnet": [254, 299], "pytorch_amp": 255, "optimize_for_infer": 255, "pytorch_jit_trac": 255, "pytorch_jit_script_ofi": 255, "pytorch_jit_trace_ofi": 255, "pytorch_torchdynamo_jit_script": 255, "pytorch_torchdynamo_jit_trac": 255, "pytorch_torchdynamo_jit_script_ofi": 255, "pytorch_torchdynamo_jit_trace_ofi": 255, "pytorch_inc_bf16": 255, "pytorch_inc_static_quant_fx": 255, "pytorch_inc_static_quant_ipex": 255, "pytorch_inc_static_quant_ipex_xpu": 255, "pytorch_inc_dynamic_qu": 255, "pytorch_ipex_fp32": 255, "pytorch_ipex_bf16": 255, "pytorch_ipex_int8_static_qu": 255, "pytorch_ipex_int8_dynamic_qu": 255, "blade": 255, "disc": 255, "pytorch_aliblad": 255, "pytorch_lightning_bf16_cpu": 255, "tensorflow_amp": 255, "keras_amp": 255, "tensorflow_inc": 255, "keras_inc": 255, "onnx_inc_static_quant_qlinear": 255, "onnx_inc_static_quant_qdq": 255, "onnx_inc_dynamic_qu": 255, "pytorch_inc_huggingface_optimum_stat": 255, "pytorch_inc_huggingface_optimum_dynam": 255, "intel_extension_for_transform": 255, "bigdl": [255, 256], "nano": [255, 256], "nano_": 255, "inc_auto": 255, "delight": 256, "announc": 256, "v": [256, 265, 284, 296, 298], "500": [256, 274], "jupyt": [256, 258, 259, 262], "delta": 256, "acc_delta": 256, "int8_acc": 256, "fp32_acc": 256, "ext": [258, 260, 262, 263, 264], "lab": [258, 259, 260, 262, 263], "nodej": [258, 262], "jlpm": [258, 262], "yarn": [258, 262], "npm": [258, 259, 262], "lieu": [258, 262], "labextens": [258, 259, 262], "typescript": [258, 262], "watch": [258, 262, 271], "immedi": [258, 262, 284], "refresh": [258, 262], "browser": [258, 262, 267, 271], "wait": [258, 262, 265, 275], "rebuilt": [258, 262], "easier": [258, 262, 265, 267, 285], "symlink": [258, 262], "down": 259, "finish": [259, 275], "enter": [259, 265, 273], "leav": 259, "blank": 259, "cell": 259, "gain": [259, 283, 285], "mkl": 259, "jemalloc": 259, "pip3": 259, "headless": 259, "pyproject": [260, 263], "toml": [260, 263], "twine": [260, 263], "whl": [260, 263], "dist": [260, 263], "sdist": [260, 263], "bdist_wheel": [260, 263], "frontend": [260, 263, 273, 280], "cut": [260, 263], "admin_github_token": [260, 263], "pypi_token": [260, 263], "npm_token": [260, 263], "secret": [260, 263], "panel": [260, 263, 265], "draft": [260, 263], "changelog": [260, 263, 264], "pkg": [260, 263], "bot": [260, 263], "pick": [260, 263, 266], "feedstock": [260, 263], "hatch": 263, "notabl": 264, "daili": 265, "advantag": [265, 284, 286, 296], "remot": 265, "server": [265, 267, 270, 273, 278, 279, 280], "re": [265, 271, 290], "market": 265, "uninstal": 265, "fill": [265, 292, 295, 296], "upper": 265, "sidebar": 265, "hover": 265, "track": [265, 292], "argpars": 265, "pop": [265, 275], "diff": 265, "manifest": 266, "palett": 266, "src": 266, "registercommand": 266, "amodio": 266, "tsl": 266, "matcher": 266, "dbaeumer": 266, "eslint": [266, 271], "press": 266, "f5": 266, "ctrl": 266, "hello": 266, "world": 266, "breakpoint": 266, "consol": [266, 271], "relaunch": 266, "toolbar": 266, "node_modul": 266, "viewlet": 266, "dropdown": 266, "runner": [266, 271], "startup": 266, "bundl": 266, "neural_insight": [267, 269, 270], "tl": 267, "ui": 267, "5000": 267, "338174d13706855fc6924cec7b3a8ae8": 267, "listen": 267, "port": [267, 274], "firewal": 267, "8080": 267, "cert": 267, "path_to_cert": 267, "crt": 267, "path_to_private_kei": 267, "encrypt": 267, "insecur": 267, "expos": 267, "forfeit": 267, "client": [267, 273, 280], "extern": 267, "threat": 267, "diagnost": 267, "skill": 267, "feel": [267, 271], "layoutlmv3": [268, 299], "seqev": 268, "sentencepiec": 268, "timm": 268, "fvcore": 268, "pillow": 268, "einop": 268, "textdist": 268, "setuptool": 268, "cli": 268, "hypjudi": 268, "funsd": [268, 299], "calib_dataset": 268, "incdataset": 268, "eval_dataset": 268, "poor": [268, 294], "9049": 268, "2989": 268, "9631": 268, "glob": 268, "panda": 268, "pd": 268, "set_opt": 268, "max_row": 268, "max_column": 268, "getmtim": 268, "revers": 268, "activations_t": 268, "weights_tabl": [268, 269], "read_csv": 268, "nweight": 268, "descend": 268, "sorted_data": 268, "sort_valu": 268, "ascend": 268, "evid": 268, "tip": 268, "8981": 268, "7502": 268, "run_clm": 269, "dataset_nam": 269, "wikitext": [269, 299], "dataset_config_nam": 269, "do_train": 269, "inspect_sav": 269, "inspect_result": 269, "quan": 269, "model_summari": 269, "incept": [270, 299], "v3": [270, 299], "inception_v3": [270, 294], "inceptionv3_fp32_pretrained_model": [270, 294], "prepare_dataset": 270, "sh": [270, 294], "raw_dir": 270, "img_raw": 270, "delet": [270, 284], "run_tun": 270, "nc_inception_v3": 270, "decreas": [270, 284], "highest": [270, 276, 296], "satisfactori": 270, "webpag": 270, "spike": 270, "bottom": 270, "concentr": 270, "But": 270, "bigger": 270, "bootstrap": 271, "localhost": [271, 273, 278, 279], "3000": 271, "lint": 271, "interact": [271, 292], "correctli": 271, "hash": [271, 274], "readi": [271, 284], "aren": 271, "transit": 271, "webpack": 271, "babel": 271, "tweak": 271, "ever": 271, "curat": 271, "suitabl": 271, "shouldn": 271, "wouldn": 271, "couldn": 271, "troubleshoot": 271, "effortlessli": 272, "rest": [272, 273, 278, 279, 280], "grpc": [272, 273, 277, 278, 279, 281], "queue": 272, "elimin": 272, "mpi": [272, 273, 296], "neural_solut": [272, 273, 278, 279, 280], "task_monitor_port": [273, 278, 279, 280], "22222": [273, 278, 279, 280], "result_monitor_port": [273, 278, 279, 280], "33333": [273, 278, 279, 280], "restful_api_port": [273, 278, 279, 280], "hostfil": [273, 275, 278, 279, 280], "grpc_api_port": [273, 278, 279, 280], "api_typ": [273, 278, 279, 280], "conda_env": [273, 278, 279, 280], "upload_path": [273, 278, 279, 280], "8000": [273, 278, 279, 280], "3333": [273, 278, 279, 280], "2222": [273, 278, 279, 280], "ns_workspac": [273, 278, 279, 280], "hf_model": [273, 277, 279, 280], "curl": [273, 274, 278, 279], "task_id": [273, 278, 279, 280], "usernam": 273, "db": [273, 275], "serve_log": [273, 278, 279, 280], "frontend_grpc": 273, "task_log": 273, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 273, "task_workspac": 273, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 273, "aliv": 273, "properli": 273, "commonli": [273, 284], "hostnam": 273, "breakdown": 273, "ip": 273, "hous": 273, "host1": [273, 278, 279], "host2": [273, 278, 279], "query_id": 273, "oaa": 274, "host_ip": 274, "task_request": [274, 278, 279, 280], "tuning_info": [274, 278], "optimization_result": [274, 278], "result_path": [274, 278, 279], "closur": 274, "404": [274, 284, 299], "health": 274, "healthi": 274, "400": 274, "alloc": 275, "incom": 275, "taskmonitor": 275, "cluster": [275, 278, 279, 296], "tasklaunch": 275, "resultmonitor": 275, "receiv": [275, 292], "p1": 275, "notif": 275, "p2": 275, "p3": 275, "mpirun": [275, 296], "perf": 275, "p4": 275, "classdiagram": 275, "taskdb": 275, "get_statu": 275, "update_statu": 275, "task_collect": 275, "append_task": 275, "get_all_pending_task": 275, "update_task_statu": 275, "task_db": 275, "wait_new_task": 275, "schedule_task": 275, "dispatch_task": 275, "launch_task": 275, "query_task_statu": 275, "node_list": 275, "reserve_resourc": 275, "get_node_statu": 275, "pool": 275, "gcp": [275, 285], "script_url": [276, 278, 279, 280], "archiv": 276, "tf_example1": [277, 278, 279], "hf_models_grpc": [277, 280], "00173": 278, "01024": 278, "task_request_distribut": 278, "custom_models_optim": 278, "7602cd63d4c849e7a686a8165a77f69d": [278, 279], "151": 278, "8617": 278, "8213": [278, 299], "number_of_socket": [278, 279], "number_of_thread": [278, 279], "cdf419910f9b4d2a8320d0e420ac1d0a": 279, "optimized_result": 279, "3162": 279, "6488": [279, 299], "d3e10a49326449fb9d0d62f2bfc1cb43": 280, "fastapi": 281, "multi_object": 282, "benefit": 283, "instanti": 283, "neuron": 284, "art": 284, "grown": 284, "unpreced": 284, "increasingli": 284, "stand": [284, 296], "consecut": 284, "shrink": 284, "influenc": 284, "mechan": [284, 292, 297], "contextu": 284, "scene": 284, "haven": 284, "color": [284, 288], "lowest": [284, 296], "interv": 284, "emsp": 284, "downstream": 284, "prone": 284, "co": 284, "discourag": 284, "penal": 284, "parameter": 284, "coeffici": 284, "sparsegpt": 284, "lightweight": 284, "perceptron": 284, "mlp": 284, "valuabl": [284, 294], "basi": 284, "mha": 284, "billion": 284, "tend": 284, "exemplifi": 284, "fortieth": 284, "pruner2": 284, "prepare_prun": 284, "retrain_fre": 284, "few": [284, 285, 293, 296], "yourself": 284, "uncertain": 284, "parse_auto_slim_config": 284, "auto_config": 284, "ffn2_sparsiti": 284, "mha_spars": 284, "quit": 284, "carri": 284, "pruning_pattern": 284, "pruning_start": 284, "pruning_end": 284, "sparse_gpt": 284, "embed_out": 284, "card": 284, "hesit": 284, "causal": 284, "clm": 284, "sst": [284, 299], "24": [284, 296, 299], "flan": 284, "t5": 284, "english": 284, "romanian": 284, "381": 284, "yolov5": 284, "2x1": [284, 299], "801": 284, "7895": 284, "reduct": [284, 288, 298], "xgboost": 284, "namhoon": 284, "lee": 284, "thalaiyasingam": 284, "ajanthan": 284, "philip": 284, "torr": 284, "2019": 284, "zafrir": 284, "ofir": 284, "ariel": 284, "larei": 284, "boudoukh": 284, "mosh": 284, "wasserblat": 284, "2111": 284, "05754": 284, "2021": 284, "kwon": 284, "kim": 284, "mahonei": 284, "hassoun": 284, "keutzer": 284, "gholami": 284, "pp": 284, "24101": 284, "24116": 284, "alistarh": 284, "massiv": 284, "2301": 284, "00774": 284, "oct": 285, "medium": 285, "aug": 285, "juli": 285, "onnxcommunitymeetup2023": 285, "msft": 285, "netflix": 285, "mlperf": [285, 299], "5x": 285, "\u96c6\u6210\u82f1\u7279\u5c14": 285, "\u817e\u8baf\u4e91taco": 285, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 285, "mar": 285, "heterogen": 285, "jan": 285, "busi": 285, "amx": 285, "journei": 285, "dec": 285, "mleffici": 285, "deepen": 285, "foundat": 285, "intellig": 285, "vmware": 285, "applianc": 285, "bitnami": 285, "nov": 285, "neurip": 285, "quala": 285, "minilm": [285, 299], "plug": 285, "twitter": 285, "linkedin": 285, "zone": 285, "land": 285, "pat": 285, "keynot": 285, "intelon": 285, "chines": 285, "purif": 285, "jun": 285, "partner": 285, "feb": 285, "joint": 285, "bilibili": 285, "gestalt": 285, "ml": 285, "youtub": 285, "reconstruct": 285, "abound": 285, "lpot": [285, 291], "nextplatform": 285, "cern": 285, "gan": 285, "3dgan": 285, "iml": 285, "workshop": 285, "asplo": 285, "intelcaff": 285, "aris": 286, "henc": 286, "onnxrt_qoper": 286, "quant_aware_train": 286, "use_bf16": 286, "weight_compress": [286, 298], "initial_spars": [286, 298], "prune_typ": [286, 298], "basic_magnitud": [286, 298], "update_frequ": 286, "prune_domain": 286, "tile_pattern_1x1": 286, "affin": 287, "neither": 287, "nor": 287, "val_load": 287, "avg": 287, "themselv": 287, "dmlexecutionprovid": 287, "meanwhil": 288, "substanti": 288, "constrain": 288, "grei": 288, "blue": 288, "rectangl": 288, "subgraph": [288, 296], "load_empty_model": 288, "rtn_arg": [288, 290], "lambda": 288, "ouput_dir": 288, "fp32_model_path": 288, "int8_model_path": 288, "ON": 289, "forc": 289, "postposttrainingquantconfig": 289, "datatyp": [289, 296, 299], "cast": [289, 295], "bf16convert": 289, "bf16wrapper": 289, "retrac": 289, "c_": 290, "enable_mse_search": 290, "805": 290, "005": 290, "return_int": 290, "group_dim": 290, "awq_arg": 290, "enable_auto_scal": 290, "gptq_arg": 290, "nsampl": 290, "pad_max_length": 290, "use_max_length": 290, "static_group": 290, "true_sequenti": 290, "slower": 290, "sym_full_rang": 290, "qweight_config_path": 290, "gptq_config_path": 290, "gptq_config": 290, "use_full_length": 290, "n_block": 290, "compressed_model": 290, "seek": 290, "omit": 290, "rtn_g32asym": 290, "gptq_g32asym": 290, "gptq_g32asym_disable_last_matmul": 290, "gptq_g128asym": 290, "awq_g32asym": 290, "site": 291, "assist": 291, "inspect": [291, 294], "sed": 291, "your_script": 291, "backbon": 292, "sigopt_experiment_id": 292, "nc": [292, 296], "suffici": 292, "ordinari": 292, "latenc": [292, 296], "8266": 292, "8372": 292, "2132": 292, "7495": 292, "8299": 292, "8294": 292, "0837": 292, "8291": 292, "4469": 292, "allevi": 293, "herebi": 293, "optdecoderlay": 293, "blockwis": 293, "waq": 293, "torchsmoothqu": 293, "auto_alpha_arg": 293, "overhead": 293, "leakyrelu": 293, "hardtanh": 293, "instancenorm": 293, "t5norm": 293, "llamanorm": 293, "groupnorm": 293, "7392": [293, 299], "7335": 293, "7058": [293, 299], "6994": 293, "7677": [293, 299], "7615": [293, 299], "7332": 293, "7632": 293, "arang": 293, "tolist": 293, "default_alpha": 293, "alpha_min": 293, "alpha_max": 293, "alpha_step": 293, "step_siz": 293, "shared_criterion": 293, "do_blockwis": 293, "jason": 293, "transact": 293, "instrument": 294, "writer": 294, "_pre_eval_hook": 294, "_post_eval_hook": 294, "submodul": 294, "whitelist": 294, "_recordingobserv": 294, "output_tensors_dict": 294, "current_it": 294, "get_tensor_valu": 294, "_observer_forward_hook": 294, "activation_post_process": 294, "_add_observer_": 294, "child": 294, "named_children": 294, "leaf": 294, "add_modul": 294, "register_forward_hook": 294, "dump_tim": 294, "summarywrit": 294, "_acc": 294, "tune_": 294, "add_graph": 294, "get_observer_dict": 294, "observer_dict": 294, "strip": 294, "is_quant": 294, "add_histogram": 294, "shell": 294, "bind_al": 294, "logdir_spec": 294, "tune_0_acc0": 294, "tune_1": 294, "tune_1_acc0": 294, "baseline_acc_0": 294, "776": 294, "tune_1_acc_0": 294, "095": 294, "runs_v3": 294, "run_tuning_dump_tensor": 294, "inceptionv3": 294, "run_quant": 294, "topologi": 294, "nc_inceptionv3": 294, "inceptionv3_dump_tensor": 294, "eightbit": 294, "requant": 294, "disappear": 294, "centercrop": 295, "randomcrop": 295, "cropres": 295, "decodeimag": 295, "jpeg": 295, "encodejp": 295, "alignimagechannel": 295, "116": 295, "103": [295, 299], "94": [295, 299], "017": 295, "bilinearimagenet": [295, 298], "topilimag": 295, "padding_mod": 295, "border": 295, "pixel": 295, "edg": 295, "colorjitt": 295, "bright": 295, "satur": 295, "hue": 295, "jitter": 295, "tondarrai": 295, "o1": 296, "human": 296, "concret": 296, "aggress": 296, "flowchart": 296, "htmllabel": 296, "td": 296, "classdef": 296, "itemstyl": 296, "cce5ff": 296, "stroke": 296, "99ccff": 296, "s1": 296, "s2": 296, "s3": 296, "s4": 296, "s5": 296, "s6": 296, "s7": 296, "nbsp": [296, 299], "subgraphstyl": 296, "ffffff": 296, "attempt": 296, "post_training_auto_qu": 296, "increment": 296, "ii": 296, "confidence_batch": 296, "spent": 296, "hawq_v2_loss": 296, "model_loss": 296, "black": 296, "discret": 296, "compli": 296, "prior": 296, "posterior": 296, "short": 296, "never": 296, "loglevel": 296, "endlessli": 296, "perspect": 296, "smbo": 296, "appl": 296, "surrog": 296, "quantil": 296, "densiti": 296, "parzen": 296, "greatest": 296, "hour": 296, "dai": 296, "next_tune_cfg": 296, "overridden": 296, "replic": 296, "replica": 296, "fed": 296, "synchron": 296, "number_of_process": 296, "run_cmd": 296, "abctunestrategi": 296, "familiar": 297, "notebook": 297, "introduct": 297, "organ": 298, "mobilenet_v1": 298, "40": [298, 299], "adam": 298, "beta_1": 298, "beta_2": 298, "999": 298, "epsilon": 298, "sparsecategoricalcrossentropi": 298, "sum_over_batch_s": 298, "from_logit": 298, "54": [298, 299], "19": [298, 299], "1x": 299, "platinum": 299, "8480": 299, "8ghz": 299, "56": 299, "ht": 299, "turbo": 299, "256gb": 299, "16x16gb": 299, "ddr5": 299, "4800": 299, "mt": 299, "bio": 299, "3a14": 299, "tel2p1": 299, "microcod": 299, "0x2b0001b0": 299, "gcc": 299, "20210514": 299, "red": 299, "hat": 299, "visit": 299, "1s4c14ins1bsthroughput": 299, "sec": 299, "1720": 299, "582": 299, "95x": 299, "1517": 299, "38": 299, "570": 299, "65": 299, "66x": 299, "resnet101": 299, "41": 299, "1058": 299, "382": 299, "96": 299, "77x": 299, "2080": 299, "951": 299, "19x": 299, "1587": 299, "863": 299, "37": 299, "84x": 299, "1052": 299, "434": 299, "42x": 299, "707": 299, "234": 299, "02x": 299, "320": 299, "179": 299, "79x": 299, "4312": 299, "1512": 299, "85x": 299, "2287": 299, "1406": 299, "63x": 299, "1367": 299, "59x": 299, "vgg19": 299, "1244": 299, "176": 299, "04x": 299, "resnetv2": 299, "780": 299, "34x": 299, "494": 299, "43": 299, "329": 299, "50x": 299, "152": 299, "349": 299, "235": 299, "48x": 299, "densenet": 299, "161": 299, "282": 299, "223": 299, "26x": 299, "1284": 299, "756": 299, "70x": 299, "1280": 299, "530": 299, "cnn": 299, "39": 299, "178": 299, "13x": 299, "yolov3": 299, "249": 299, "44": 299, "64x": 299, "28x": 299, "36": 299, "05x": 299, "390": 299, "212": 299, "83x": 299, "vit": 299, "230": 299, "142": 299, "62x": 299, "1989": 299, "31x": 299, "1165": 299, "303": 299, "953": 299, "302": 299, "15x": 299, "resnest50": 299, "365": 299, "21x": 299, "resnext101_32x8d": 299, "548": 299, "104": 299, "27x": 299, "efficientnet_b0": 299, "636": 299, "566": 299, "12x": 299, "efficientnet_b3": 299, "471": 299, "358": 299, "32x": 299, "peleenet": 299, "790": 299, "504": 299, "57x": 299, "yolo": 299, "137": 299, "88x": 299, "175": 299, "23x": 299, "camembert": 299, "393": 299, "174": 299, "783": 299, "344": 299, "684": 299, "99x": 299, "312": 299, "155": 299, "01x": 299, "funnel": 299, "281": 299, "395": 299, "173": 299, "373": 299, "405": 299, "30x": 299, "stsb": 299, "396": 299, "136": 299, "377": 299, "17x": 299, "391": 299, "25x": 299, "135": 299, "61x": 299, "117": 299, "93x": 299, "lvwerra": 299, "pegasu": 299, "samsum": 299, "1981": 299, "598": 299, "1095": 299, "298": 299, "67x": 299, "549": 299, "29x": 299, "375": 299, "hellaswag": 299, "winogrand": 299, "piqa": 299, "word_perplex": 299, "4954": 299, "6409": 299, "7541": 299, "6434": 299, "8816": 299, "gptqw4g128asym": 299, "679": 299, "4895": 299, "6433": 299, "7476": 299, "6399": 299, "9945": 299, "0999": 299, "gptqw4g32asym": 299, "6829": 299, "4923": 299, "6401": 299, "7486": 299, "6410": 299, "9963": 299, "0141": 299, "gptqw4g128sym": 299, "685": 299, "4907": 299, "6361": 299, "7443": 299, "6390": 299, "1498": 299, "gptqw4g32sym": 299, "6911": 299, "4899": 299, "6448": 299, "7497": 299, "6439": 299, "0927": 299, "5049": 299, "6543": 299, "7628": 299, "6497": 299, "2862": 299, "4984": 299, "6535": 299, "7568": 299, "6473": 299, "9962": 299, "4193": 299, "6885": 299, "4973": 299, "753": 299, "6455": 299, "9935": 299, "4607": 299, "decapoda": 299, "5642": 299, "6709": 299, "7835": 299, "6887": 299, "4202": 299, "7244": 299, "5603": 299, "6614": 299, "6824": 299, "9909": 299, "5881": 299, "5911": 299, "7009": 299, "7878": 299, "7106": 299, "7518": 299, "5843": 299, "6961": 299, "7911": 299, "4319": 299, "7572": 299, "5898": 299, "7056": 299, "7894": 299, "7105": 299, "9998": 299, "3429": 299, "7596": 299, "5841": 299, "6977": 299, "7905": 299, "7080": 299, "4916": 299, "6266": 299, "7277": 299, "8096": 299, "7350": 299, "2384": 299, "778": 299, "624": 299, "7269": 299, "8047": 299, "7334": 299, "4237": 299, "7706": 299, "6239": 299, "7285": 299, "8058": 299, "7322": 299, "4697": 299, "7836": 299, "6195": 299, "7337": 299, "9983": 299, "5604": 299, "5732": 299, "648": 299, "7715": 299, "6746": 299, "7107": 299, "6982": 299, "5637": 299, "6527": 299, "7704": 299, "6713": 299, "9950": 299, "9702": 299, "5682": 299, "6575": 299, "7758": 299, "6742": 299, "9317": 299, "567": 299, "6902": 299, "7353": 299, "6622": 299, "7829": 299, "6862": 299, "9635": 299, "7246": 299, "5617": 299, "6756": 299, "7797": 299, "6854": 299, "9931": 299, "2799": 299, "7312": 299, "6059": 299, "7103": 299, "7077": 299, "2213": 299, "7273": 299, "6018": 299, "7088": 299, "7742": 299, "7030": 299, "9934": 299, "2538": 299, "083": 299, "7283": 299, "6053": 299, "7024": 299, "7764": 299, "7031": 299, "1889": 299, "374": 299, "727": 299, "5997": 299, "7018": 299, "9916": 299, "2504": 299, "497": 299, "7122": 299, "8984": 299, "5933": 299, "689": 299, "7851": 299, "7075": 299, "1556": 299, "448": 299, "7675": 299, "5934": 299, "7856": 299, "7111": 299, "9984": 299, "1514": 299, "927": 299, "7566": 299, "5899": 299, "7032": 299, "9953": 299, "1374": 299, "728": 299, "4628": 299, "6456": 299, "6029": 299, "6438": 299, "5799": 299, "4542": 299, "6004": 299, "0626": 299, "4789": 299, "6134": 299, "7432": 299, "5525": 299, "4731": 299, "6504": 299, "7617": 299, "6094": 299, "7828": 299, "5098": 299, "7622": 299, "6505": 299, "3242": 299, "6878": 299, "5058": 299, "6393": 299, "7633": 299, "6491": 299, "5514": 299, "6864": 299, "5084": 299, "6519": 299, "6509": 299, "4728": 299, "6876": 299, "5045": 299, "6474": 299, "9952": 299, "6379": 299, "5282": 299, "614": 299, "7448": 299, "6312": 299, "6377": 299, "5228": 299, "5991": 299, "6261": 299, "9919": 299, "4096": 299, "6224": 299, "4271": 299, "577": 299, "722": 299, "5871": 299, "9359": 299, "6123": 299, "4227": 299, "5738": 299, "7203": 299, "5823": 299, "9917": 299, "3377": 299, "615": 299, "4259": 299, "5714": 299, "7247": 299, "9951": 299, "2083": 299, "6154": 299, "4208": 299, "5777": 299, "7198": 299, "5834": 299, "3121": 299, "7233": 299, "5359": 299, "7753": 299, "195": 299, "7186": 299, "5328": 299, "7699": 299, "6687": 299, "9922": 299, "3463": 299, "7268": 299, "533": 299, "659": 299, "6726": 299, "2897": 299, "5718": 299, "6859": 299, "7927": 299, "6890": 299, "9324": 299, "7006": 299, "5655": 299, "6803": 299, "7965": 299, "6857": 299, "1515": 299, "5752": 299, "6748": 299, "7845": 299, "6724": 299, "5951": 299, "6472": 299, "5716": 299, "6685": 299, "784": 299, "6678": 299, "8539": 299, "6918": 299, "5819": 299, "678": 299, "6861": 299, "8863": 299, "5765": 299, "6827": 299, "7873": 299, "6832": 299, "1451": 299, "storywrit": 299, "693": 299, "5477": 299, "663": 299, "6719": 299, "9125": 299, "6661": 299, "7813": 299, "6693": 299, "9961": 299, "1137": 299, "rw": 299, "6604": 299, "5419": 299, "6598": 299, "6594": 299, "7616": 299, "6484": 299, "5369": 299, "7807": 299, "6559": 299, "9947": 299, "9411": 299, "6571": 299, "5398": 299, "6582": 299, "6579": 299, "8809": 299, "652": 299, "535": 299, "7682": 299, "6532": 299, "9906": 299, "0048": 299, "5177": 299, "6669": 299, "7824": 299, "5053": 299, "6301": 299, "5142": 299, "6654": 299, "6483": 299, "8146": 299, "517": 299, "9941": 299, "1666": 299, "734": 299, "1658": 299, "1495": 299, "733": 299, "1661": 299, "732": 299, "1713": 299, "767": 299, "1747": 299, "770": 299, "7519": 299, "4430": 299, "4413": 299, "72x": 299, "7190": 299, "4019": 299, "613": 299, "170": 299, "611": 299, "186": 299, "619": 299, "184": 299, "36x": 299, "623": 299, "5711": 299, "2584": 299, "6136": 299, "2630": 299, "33x": 299, "shufflenet": 299, "6820": 299, "3686": 299, "googlenet": 299, "1971": 299, "1120": 299, "76x": 299, "1838": 299, "1142": 299, "squeezenet": 299, "10163": 299, "5771": 299, "10339": 299, "6002": 299, "caffenet": 299, "2805": 299, "1077": 299, "60x": 299, "4351": 299, "822": 299, "2169": 299, "893": 299, "43x": 299, "2232": 299, "841": 299, "65x": 299, "zfnet": 299, "921": 299, "525": 299, "75x": 299, "925": 299, "534": 299, "73x": 299, "1862": 299, "1161": 299, "1956": 299, "1262": 299, "55x": 299, "efficientnet": 299, "2793": 299, "1383": 299, "beit": 299, "206": 299, "91x": 299, "duc": 299, "74x": 299, "ultra": 299, "8780": 299, "1920": 299, "emot": 299, "ferplu": 299, "6360": 299, "3067": 299, "07x": 299, "arcfac": 299, "449": 299, "511": 299, "484": 299, "222": 299, "18x": 299, "integerop": 299, "635": 299, "1324": 299, "244": 299, "47x": 299, "440": 299, "214": 299, "06x": 299, "715": 299, "201": 299, "03x": 299, "714": 299, "213": 299, "339": 299, "58x": 299, "215": 299, "89x": 299, "712": 299, "217": 299, "l12": 299, "h384": 299, "1209": 299, "588": 299, "1268": 299, "16x": 299, "1253": 299, "399": 299, "14x": 299, "l6": 299, "1139": 299, "94x": 299, "2365": 299, "08x": 299, "718": 299, "35x": 299, "electra": 299, "discrimin": 299, "1951": 299, "71x": 299, "2198": 299, "1129": 299, "mini": 299, "5814": 299, "3388": 299, "6396": 299, "3445": 299, "86x": 299, "bart": 299, "126": 299, "spanbert": 299, "multilingu": 299, "82x": 299, "118": 299, "46x": 299, "layoutlmv2": 299, "perplex": 299, "2788": 299, "7002": 299, "4124": 299, "9921": 299, "3950": 299, "9892": 299, "9163": 299, "7240": 299, "0438": 299, "7634": 299, "1186": 299, "9944": 299, "1276": 299, "7543": 299, "6181": 299, "rtnw4g32asym": 299, "6496": 299, "9967": 299, "7964": 299, "6612": 299, "rtnw4g32sym": 299, "7941": 299, "7243": 299, "9971": 299, "taskdataset": 299, "accuracyspars": 299, "ratiospars": 299, "commentsbalancedor": 299, "unbalanc": 299, "answeringsquad": 299, "87f1": 299, "momentumunbalanc": 299, "momentumbalanc": 299, "90f1": 299, "59f1": 299, "23f1": 299, "classificationmrpc": 299, "52f1": 299, "26f1": 299, "classificationsst": 299, "61accuraci": 299, "recognitionimagenet": 299, "95top1": 299, "v5s6": 299, "detectioncoco": 299, "ap0": 299, "6ap0": 299, "584": 299, "34f1": 299, "lassounbalanc": 299, "classificationmnli": 299, "mm": 299, "allbalanc": 299, "32accuraci": 299, "sensitivitybalanc": 299, "classificationqqp": 299, "classificationqnli": 299, "54accuraci": 299, "em": 299, "mobilenetv2": 299, "wideresnet40": 299, "9522": 299, "8178": 299, "0213": 299, "8235": 299, "027": 299, "5494": 299, "7153": 299, "5540": 299, "5523": 299, "vgg": 299, "bn": 299, "7022": 299, "7415": 299, "7025": 299, "0003": 299, "6739": 299, "7399": 299, "6845": 299, "0106": 299, "blendcnn": 299, "7034": 299, "8382": 299, "bilstm": 299, "8314": 299, "9403": 299, "9048": 299, "0734": 299, "7323": 299, "8256": 299, "8084": 299, "8814": 299, "7442": 299, "8371": 299, "0119": 299, "0115": 299, "tinybert": 299, "8018": 299, "8044": 299, "8363": 299, "8411": 299, "8025": 299, "8074": 299, "0007": 299, "0030": 299, "8626": 299, "9091": 299, "8782": 299, "8684": 299, "8259": 299, "distilroberta": 299, "6057": 299, "6187": 299, "0130": 299, "c6i": 299, "2xlarg": 299, "c6a": 299, "c6g": 299, "a100cuda": 299, "executionprovid": 299}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [129, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "contrib"], [23, 0, 0, "-", "data"], [76, 0, 0, "-", "experimental"], [136, 0, 0, "-", "metric"], [138, 0, 0, "-", "mix_precision"], [140, 0, 0, "-", "model"], [148, 0, 0, "-", "objective"], [149, 0, 0, "-", "profiling"], [150, 0, 0, "-", "quantization"], [158, 0, 0, "-", "strategy"], [169, 0, 0, "-", "training"], [177, 0, 0, "-", "utils"], [186, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[1, 0, 0, "-", "algorithm"], [2, 0, 0, "-", "fast_bias_correction"], [4, 0, 0, "-", "smooth_quant"], [5, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[1, 1, 1, "", "ALGORITHMS"], [1, 1, 1, "", "Algorithm"], [1, 1, 1, "", "AlgorithmScheduler"], [1, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[2, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[4, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[5, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[6, 2, 1, "", "benchmark_with_raw_cmd"], [6, 2, 1, "", "call_one"], [6, 2, 1, "", "config_instance"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_prefix"], [6, 2, 1, "", "get_architecture"], [6, 2, 1, "", "get_bounded_threads"], [6, 2, 1, "", "get_core_ids"], [6, 2, 1, "", "get_physical_ids"], [6, 2, 1, "", "get_threads"], [6, 2, 1, "", "get_threads_per_core"], [6, 2, 1, "", "profile"], [6, 2, 1, "", "run_instance"], [6, 2, 1, "", "set_all_env_var"], [6, 2, 1, "", "set_env_var"], [6, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[7, 1, 1, "", "AccuracyCriterion"], [7, 1, 1, "", "BenchmarkConfig"], [7, 1, 1, "", "DistillationConfig"], [7, 1, 1, "", "DotDict"], [7, 1, 1, "", "ExportConfig"], [7, 1, 1, "", "HPOConfig"], [7, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [7, 1, 1, "", "Keras"], [7, 1, 1, "", "KnowledgeDistillationLossConfig"], [7, 1, 1, "", "MXNet"], [7, 1, 1, "", "MixedPrecisionConfig"], [7, 1, 1, "", "NASConfig"], [7, 1, 1, "", "ONNX"], [7, 1, 1, "", "ONNXQlinear2QDQConfig"], [7, 1, 1, "", "Options"], [7, 1, 1, "", "PostTrainingQuantConfig"], [7, 1, 1, "", "PyTorch"], [7, 1, 1, "", "QuantizationAwareTrainingConfig"], [7, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [7, 1, 1, "", "TF2ONNXConfig"], [7, 1, 1, "", "TensorFlow"], [7, 1, 1, "", "Torch2ONNXConfig"], [7, 1, 1, "", "TuningCriterion"], [7, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[9, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[10, 0, 0, "-", "sigopt"], [11, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[10, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[18, 0, 0, "-", "datasets"], [22, 0, 0, "-", "filters"], [25, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[12, 0, 0, "-", "bert_dataset"], [13, 0, 0, "-", "coco_dataset"], [14, 0, 0, "-", "dataset"], [15, 0, 0, "-", "dummy_dataset"], [16, 0, 0, "-", "dummy_dataset_v2"], [17, 0, 0, "-", "imagenet_dataset"], [19, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[12, 1, 1, "", "InputFeatures"], [12, 1, 1, "", "ONNXRTBertDataset"], [12, 1, 1, "", "ParseDecodeBert"], [12, 1, 1, "", "PytorchBertDataset"], [12, 1, 1, "", "TensorflowBertDataset"], [12, 1, 1, "", "TensorflowModelZooBertDataset"], [12, 2, 1, "", "convert_examples_to_features"], [12, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[13, 1, 1, "", "COCONpy"], [13, 1, 1, "", "COCORaw"], [13, 1, 1, "", "COCORecordDataset"], [13, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[14, 1, 1, "", "CIFAR10"], [14, 1, 1, "", "CIFAR100"], [14, 1, 1, "", "Dataset"], [14, 1, 1, "", "Datasets"], [14, 1, 1, "", "FashionMNIST"], [14, 1, 1, "", "ImageFolder"], [14, 1, 1, "", "IterableDataset"], [14, 1, 1, "", "MNIST"], [14, 1, 1, "", "MXNetCIFAR10"], [14, 1, 1, "", "MXNetCIFAR100"], [14, 1, 1, "", "MXNetDatasets"], [14, 1, 1, "", "MXNetFashionMNIST"], [14, 1, 1, "", "MXNetImageFolder"], [14, 1, 1, "", "MXNetMNIST"], [14, 1, 1, "", "ONNXRTITDatasets"], [14, 1, 1, "", "ONNXRTQLDatasets"], [14, 1, 1, "", "PyTorchDatasets"], [14, 1, 1, "", "PytorchCIFAR10"], [14, 1, 1, "", "PytorchCIFAR100"], [14, 1, 1, "", "PytorchFashionMNIST"], [14, 1, 1, "", "PytorchMNIST"], [14, 1, 1, "", "PytorchMxnetWrapDataset"], [14, 1, 1, "", "PytorchMxnetWrapFunction"], [14, 1, 1, "", "Tensorflow"], [14, 1, 1, "", "TensorflowCIFAR10"], [14, 1, 1, "", "TensorflowCIFAR100"], [14, 1, 1, "", "TensorflowDatasets"], [14, 1, 1, "", "TensorflowFashionMNIST"], [14, 1, 1, "", "TensorflowImageRecord"], [14, 1, 1, "", "TensorflowMNIST"], [14, 1, 1, "", "TensorflowTFRecordDataset"], [14, 1, 1, "", "TensorflowVOCRecord"], [14, 2, 1, "", "calculate_md5"], [14, 2, 1, "", "check_integrity"], [14, 2, 1, "", "dataset_registry"], [14, 2, 1, "", "download_url"], [14, 3, 1, "", "framework_datasets"], [14, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[15, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, 1, 1, "", "DummyDataset"], [16, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, 1, 1, "", "ImagenetRaw"], [17, 1, 1, "", "MXNetImagenetRaw"], [17, 1, 1, "", "ONNXRTImagenetDataset"], [17, 1, 1, "", "PytorchImagenetRaw"], [17, 1, 1, "", "TensorflowImagenetDataset"], [17, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[20, 0, 0, "-", "coco_filter"], [21, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[20, 1, 1, "", "LabelBalanceCOCORawFilter"], [20, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[21, 1, 1, "", "FILTERS"], [21, 1, 1, "", "Filter"], [21, 1, 1, "", "MXNetFilters"], [21, 1, 1, "", "ONNXRTITFilters"], [21, 1, 1, "", "ONNXRTQLFilters"], [21, 1, 1, "", "PyTorchFilters"], [21, 1, 1, "", "TensorflowFilters"], [21, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[24, 0, 0, "-", "imagenet_transform"], [26, 0, 0, "-", "postprocess"], [27, 0, 0, "-", "tokenization"], [28, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[24, 1, 1, "", "BilinearImagenetTransform"], [24, 1, 1, "", "LabelShift"], [24, 1, 1, "", "ONNXResizeCropImagenetTransform"], [24, 1, 1, "", "OnnxBilinearImagenetTransform"], [24, 1, 1, "", "ParseDecodeImagenet"], [24, 1, 1, "", "ParseDecodeImagenetTransform"], [24, 1, 1, "", "QuantizedInput"], [24, 1, 1, "", "ResizeWithAspectRatio"], [24, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [24, 1, 1, "", "TensorflowShiftRescale"], [24, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[26, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, 1, 1, "", "BasicTokenizer"], [27, 1, 1, "", "FullTokenizer"], [27, 1, 1, "", "WordpieceTokenizer"], [27, 2, 1, "", "convert_by_vocab"], [27, 2, 1, "", "convert_to_unicode"], [27, 2, 1, "", "load_vocab"], [27, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[28, 1, 1, "", "AlignImageChannelTransform"], [28, 1, 1, "", "BaseTransform"], [28, 1, 1, "", "CastONNXTransform"], [28, 1, 1, "", "CastPyTorchTransform"], [28, 1, 1, "", "CastTFTransform"], [28, 1, 1, "", "CenterCropTFTransform"], [28, 1, 1, "", "CenterCropTransform"], [28, 1, 1, "", "CollectTransform"], [28, 1, 1, "", "ComposeTransform"], [28, 1, 1, "", "CropResizeTFTransform"], [28, 1, 1, "", "CropResizeTransform"], [28, 1, 1, "", "CropToBoundingBox"], [28, 1, 1, "", "InputFeatures"], [28, 1, 1, "", "MXNetCropResizeTransform"], [28, 1, 1, "", "MXNetCropToBoundingBox"], [28, 1, 1, "", "MXNetNormalizeTransform"], [28, 1, 1, "", "MXNetTransforms"], [28, 1, 1, "", "MXNetTranspose"], [28, 1, 1, "", "NormalizeTFTransform"], [28, 1, 1, "", "NormalizeTransform"], [28, 1, 1, "", "ONNXRTCropToBoundingBox"], [28, 1, 1, "", "ONNXRTITTransforms"], [28, 1, 1, "", "ONNXRTQLTransforms"], [28, 1, 1, "", "PaddedCenterCropTransform"], [28, 1, 1, "", "ParseDecodeVocTransform"], [28, 1, 1, "", "PyTorchAlignImageChannel"], [28, 1, 1, "", "PyTorchCropResizeTransform"], [28, 1, 1, "", "PyTorchNormalizeTransform"], [28, 1, 1, "", "PyTorchTransforms"], [28, 1, 1, "", "PyTorchTranspose"], [28, 1, 1, "", "PytorchMxnetTransform"], [28, 1, 1, "", "PytorchMxnetWrapFunction"], [28, 1, 1, "", "RandomCropTFTransform"], [28, 1, 1, "", "RandomCropTransform"], [28, 1, 1, "", "RandomHorizontalFlip"], [28, 1, 1, "", "RandomResizedCropMXNetTransform"], [28, 1, 1, "", "RandomResizedCropPytorchTransform"], [28, 1, 1, "", "RandomResizedCropTFTransform"], [28, 1, 1, "", "RandomResizedCropTransform"], [28, 1, 1, "", "RandomVerticalFlip"], [28, 1, 1, "", "RescaleKerasPretrainTransform"], [28, 1, 1, "", "RescaleTFTransform"], [28, 1, 1, "", "RescaleTransform"], [28, 1, 1, "", "ResizeMXNetTransform"], [28, 1, 1, "", "ResizePytorchTransform"], [28, 1, 1, "", "ResizeTFTransform"], [28, 1, 1, "", "ResizeTransform"], [28, 1, 1, "", "ResizeWithRatio"], [28, 1, 1, "", "SquadExample"], [28, 1, 1, "", "TFModelZooCollectTransform"], [28, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [28, 1, 1, "", "TFSquadV1PostTransform"], [28, 1, 1, "", "TRANSFORMS"], [28, 1, 1, "", "TensorflowCropToBoundingBox"], [28, 1, 1, "", "TensorflowRandomHorizontalFlip"], [28, 1, 1, "", "TensorflowRandomVerticalFlip"], [28, 1, 1, "", "TensorflowResizeWithRatio"], [28, 1, 1, "", "TensorflowTransform"], [28, 1, 1, "", "TensorflowTransforms"], [28, 1, 1, "", "TensorflowTranspose"], [28, 1, 1, "", "TensorflowWrapFunction"], [28, 1, 1, "", "ToArray"], [28, 1, 1, "", "ToNDArrayTransform"], [28, 1, 1, "", "Transforms"], [28, 1, 1, "", "Transpose"], [28, 2, 1, "", "convert_examples_to_features"], [28, 2, 1, "", "get_final_text"], [28, 2, 1, "", "get_torchvision_map"], [28, 2, 1, "", "read_squad_examples"], [28, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[29, 0, 0, "-", "benchmark"], [32, 0, 0, "-", "common"], [38, 0, 0, "-", "component"], [39, 0, 0, "-", "compression"], [40, 0, 0, "-", "contrib"], [65, 0, 0, "-", "data"], [70, 0, 0, "-", "distillation"], [71, 0, 0, "-", "export"], [75, 0, 0, "-", "graph_optimization"], [83, 0, 0, "-", "metric"], [85, 0, 0, "-", "mixed_precision"], [86, 0, 0, "-", "model_conversion"], [89, 0, 0, "-", "nas"], [95, 0, 0, "-", "pruner_legacy"], [99, 0, 0, "-", "pruning"], [100, 0, 0, "-", "pruning_recipes"], [104, 0, 0, "-", "pruning_v2"], [105, 0, 0, "-", "pytorch_pruner"], [112, 0, 0, "-", "quantization"], [113, 0, 0, "-", "scheduler"], [118, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[29, 1, 1, "", "Benchmark"], [29, 2, 1, "", "get_architecture"], [29, 2, 1, "", "get_bounded_threads"], [29, 2, 1, "", "get_core_ids"], [29, 2, 1, "", "get_physical_ids"], [29, 2, 1, "", "get_threads"], [29, 2, 1, "", "get_threads_per_core"], [29, 2, 1, "", "set_all_env_var"], [29, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[30, 0, 0, "-", "criterion"], [31, 0, 0, "-", "dataloader"], [33, 0, 0, "-", "metric"], [34, 0, 0, "-", "model"], [35, 0, 0, "-", "optimizer"], [36, 0, 0, "-", "postprocess"], [37, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[30, 1, 1, "", "Criterions"], [30, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "KnowledgeDistillationFramework"], [30, 1, 1, "", "KnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchCriterions"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "SelfKnowledgeDistillationLoss"], [30, 1, 1, "", "TensorflowCriterions"], [30, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [30, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[31, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[33, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[34, 1, 1, "", "Model"], [34, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[35, 1, 1, "", "Optimizers"], [35, 1, 1, "", "PyTorchOptimizers"], [35, 1, 1, "", "PyTorchSGD"], [35, 1, 1, "", "TensorFlowAdamW"], [35, 1, 1, "", "TensorFlowSGD"], [35, 1, 1, "", "TensorflowOptimizers"], [35, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[36, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, 2, 1, "", "get_activation"], [37, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[38, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[41, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[42, 0, 0, "-", "sigopt"], [43, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[48, 0, 0, "-", "dataloaders"], [60, 0, 0, "-", "datasets"], [64, 0, 0, "-", "filters"], [67, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[44, 0, 0, "-", "base_dataloader"], [45, 0, 0, "-", "dataloader"], [46, 0, 0, "-", "default_dataloader"], [47, 0, 0, "-", "fetcher"], [49, 0, 0, "-", "mxnet_dataloader"], [50, 0, 0, "-", "onnxrt_dataloader"], [51, 0, 0, "-", "pytorch_dataloader"], [52, 0, 0, "-", "sampler"], [53, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, 1, 1, "", "DefaultDataLoader"], [46, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, 1, 1, "", "Fetcher"], [47, 1, 1, "", "IndexFetcher"], [47, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, 1, 1, "", "ONNXRTBertDataLoader"], [50, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, 1, 1, "", "BatchSampler"], [52, 1, 1, "", "IterableSampler"], [52, 1, 1, "", "Sampler"], [52, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, 1, 1, "", "TFDataDataLoader"], [53, 1, 1, "", "TensorflowBertDataLoader"], [53, 1, 1, "", "TensorflowDataLoader"], [53, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[54, 0, 0, "-", "bert_dataset"], [55, 0, 0, "-", "coco_dataset"], [56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "dummy_dataset"], [58, 0, 0, "-", "dummy_dataset_v2"], [59, 0, 0, "-", "imagenet_dataset"], [61, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, 1, 1, "", "InputFeatures"], [54, 1, 1, "", "ONNXRTBertDataset"], [54, 1, 1, "", "ParseDecodeBert"], [54, 1, 1, "", "PytorchBertDataset"], [54, 1, 1, "", "TensorflowBertDataset"], [54, 1, 1, "", "TensorflowModelZooBertDataset"], [54, 2, 1, "", "convert_examples_to_features"], [54, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, 1, 1, "", "COCONpy"], [55, 1, 1, "", "COCORaw"], [55, 1, 1, "", "COCORecordDataset"], [55, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[56, 1, 1, "", "CIFAR10"], [56, 1, 1, "", "CIFAR100"], [56, 1, 1, "", "Dataset"], [56, 1, 1, "", "Datasets"], [56, 1, 1, "", "FashionMNIST"], [56, 1, 1, "", "ImageFolder"], [56, 1, 1, "", "IterableDataset"], [56, 1, 1, "", "MNIST"], [56, 1, 1, "", "MXNetCIFAR10"], [56, 1, 1, "", "MXNetCIFAR100"], [56, 1, 1, "", "MXNetDatasets"], [56, 1, 1, "", "MXNetFashionMNIST"], [56, 1, 1, "", "MXNetImageFolder"], [56, 1, 1, "", "MXNetMNIST"], [56, 1, 1, "", "ONNXRTITDatasets"], [56, 1, 1, "", "ONNXRTQLDatasets"], [56, 1, 1, "", "PyTorchDatasets"], [56, 1, 1, "", "PytorchCIFAR10"], [56, 1, 1, "", "PytorchCIFAR100"], [56, 1, 1, "", "PytorchFashionMNIST"], [56, 1, 1, "", "PytorchMNIST"], [56, 1, 1, "", "PytorchMxnetWrapDataset"], [56, 1, 1, "", "PytorchMxnetWrapFunction"], [56, 1, 1, "", "TensorflowCIFAR10"], [56, 1, 1, "", "TensorflowCIFAR100"], [56, 1, 1, "", "TensorflowDatasets"], [56, 1, 1, "", "TensorflowFashionMNIST"], [56, 1, 1, "", "TensorflowImageFolder"], [56, 1, 1, "", "TensorflowImageRecord"], [56, 1, 1, "", "TensorflowMNIST"], [56, 1, 1, "", "TensorflowTFRecordDataset"], [56, 1, 1, "", "TensorflowVOCRecord"], [56, 2, 1, "", "calculate_md5"], [56, 2, 1, "", "check_integrity"], [56, 2, 1, "", "dataset_registry"], [56, 2, 1, "", "download_url"], [56, 3, 1, "", "framework_datasets"], [56, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, 1, 1, "", "DummyDataset"], [58, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, 1, 1, "", "ImagenetRaw"], [59, 1, 1, "", "MXNetImagenetRaw"], [59, 1, 1, "", "ONNXRTImagenetDataset"], [59, 1, 1, "", "PytorchImagenetRaw"], [59, 1, 1, "", "TensorflowImagenetDataset"], [59, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[62, 0, 0, "-", "coco_filter"], [63, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, 1, 1, "", "LabelBalanceCOCORawFilter"], [62, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[63, 1, 1, "", "FILTERS"], [63, 1, 1, "", "Filter"], [63, 1, 1, "", "MXNetFilters"], [63, 1, 1, "", "ONNXRTITFilters"], [63, 1, 1, "", "ONNXRTQLFilters"], [63, 1, 1, "", "PyTorchFilters"], [63, 1, 1, "", "TensorflowFilters"], [63, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[66, 0, 0, "-", "imagenet_transform"], [68, 0, 0, "-", "tokenization"], [69, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, 1, 1, "", "BilinearImagenetTransform"], [66, 1, 1, "", "LabelShift"], [66, 1, 1, "", "ONNXResizeCropImagenetTransform"], [66, 1, 1, "", "OnnxBilinearImagenetTransform"], [66, 1, 1, "", "ParseDecodeImagenet"], [66, 1, 1, "", "ParseDecodeImagenetTransform"], [66, 1, 1, "", "QuantizedInput"], [66, 1, 1, "", "ResizeWithAspectRatio"], [66, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, 1, 1, "", "BasicTokenizer"], [68, 1, 1, "", "FullTokenizer"], [68, 1, 1, "", "WordpieceTokenizer"], [68, 2, 1, "", "convert_by_vocab"], [68, 2, 1, "", "convert_to_unicode"], [68, 2, 1, "", "load_vocab"], [68, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[69, 1, 1, "", "AlignImageChannelTransform"], [69, 1, 1, "", "BaseTransform"], [69, 1, 1, "", "CastONNXTransform"], [69, 1, 1, "", "CastPyTorchTransform"], [69, 1, 1, "", "CastTFTransform"], [69, 1, 1, "", "CenterCropTFTransform"], [69, 1, 1, "", "CenterCropTransform"], [69, 1, 1, "", "CollectTransform"], [69, 1, 1, "", "ComposeTransform"], [69, 1, 1, "", "CropResizeTFTransform"], [69, 1, 1, "", "CropResizeTransform"], [69, 1, 1, "", "CropToBoundingBox"], [69, 1, 1, "", "InputFeatures"], [69, 1, 1, "", "MXNetCropResizeTransform"], [69, 1, 1, "", "MXNetCropToBoundingBox"], [69, 1, 1, "", "MXNetNormalizeTransform"], [69, 1, 1, "", "MXNetTransforms"], [69, 1, 1, "", "MXNetTranspose"], [69, 1, 1, "", "NormalizeTFTransform"], [69, 1, 1, "", "NormalizeTransform"], [69, 1, 1, "", "ONNXRTCropToBoundingBox"], [69, 1, 1, "", "ONNXRTITTransforms"], [69, 1, 1, "", "ONNXRTQLTransforms"], [69, 1, 1, "", "PaddedCenterCropTransform"], [69, 1, 1, "", "ParseDecodeVocTransform"], [69, 1, 1, "", "PyTorchAlignImageChannel"], [69, 1, 1, "", "PyTorchCropResizeTransform"], [69, 1, 1, "", "PyTorchNormalizeTransform"], [69, 1, 1, "", "PyTorchTransforms"], [69, 1, 1, "", "PyTorchTranspose"], [69, 1, 1, "", "PytorchMxnetTransform"], [69, 1, 1, "", "PytorchMxnetWrapFunction"], [69, 1, 1, "", "RandomCropTFTransform"], [69, 1, 1, "", "RandomCropTransform"], [69, 1, 1, "", "RandomHorizontalFlip"], [69, 1, 1, "", "RandomResizedCropMXNetTransform"], [69, 1, 1, "", "RandomResizedCropPytorchTransform"], [69, 1, 1, "", "RandomResizedCropTFTransform"], [69, 1, 1, "", "RandomResizedCropTransform"], [69, 1, 1, "", "RandomVerticalFlip"], [69, 1, 1, "", "RescaleKerasPretrainTransform"], [69, 1, 1, "", "RescaleTFTransform"], [69, 1, 1, "", "RescaleTransform"], [69, 1, 1, "", "ResizeMXNetTransform"], [69, 1, 1, "", "ResizePytorchTransform"], [69, 1, 1, "", "ResizeTFTransform"], [69, 1, 1, "", "ResizeTransform"], [69, 1, 1, "", "ResizeWithRatio"], [69, 1, 1, "", "SquadExample"], [69, 1, 1, "", "TFModelZooCollectTransform"], [69, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [69, 1, 1, "", "TFSquadV1PostTransform"], [69, 1, 1, "", "TRANSFORMS"], [69, 1, 1, "", "TensorflowCropToBoundingBox"], [69, 1, 1, "", "TensorflowRandomHorizontalFlip"], [69, 1, 1, "", "TensorflowRandomVerticalFlip"], [69, 1, 1, "", "TensorflowResizeWithRatio"], [69, 1, 1, "", "TensorflowTransform"], [69, 1, 1, "", "TensorflowTransforms"], [69, 1, 1, "", "TensorflowTranspose"], [69, 1, 1, "", "TensorflowWrapFunction"], [69, 1, 1, "", "ToArray"], [69, 1, 1, "", "ToNDArrayTransform"], [69, 1, 1, "", "Transforms"], [69, 1, 1, "", "Transpose"], [69, 2, 1, "", "convert_examples_to_features"], [69, 2, 1, "", "get_final_text"], [69, 2, 1, "", "get_torchvision_map"], [69, 2, 1, "", "read_squad_examples"], [69, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[70, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[70, 4, 1, "", "_epoch_ran"], [70, 4, 1, "", "best_model"], [70, 4, 1, "", "best_score"], [70, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[72, 0, 0, "-", "qlinear2qdq"], [73, 0, 0, "-", "tf2onnx"], [74, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, 2, 1, "", "check_model"], [72, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, 2, 1, "", "tf_to_fp32_onnx"], [73, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, 2, 1, "", "dynamic_quant_export"], [74, 2, 1, "", "get_node_mapping"], [74, 2, 1, "", "get_quantizable_onnx_ops"], [74, 2, 1, "", "static_quant_export"], [74, 2, 1, "", "torch_to_fp32_onnx"], [74, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[75, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[77, 0, 0, "-", "bleu"], [78, 0, 0, "-", "bleu_util"], [79, 0, 0, "-", "coco_label_map"], [80, 0, 0, "-", "coco_tools"], [81, 0, 0, "-", "evaluate_squad"], [82, 0, 0, "-", "f1"], [84, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[77, 1, 1, "", "BLEU"], [77, 1, 1, "", "UnicodeRegex"], [77, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[77, 4, 1, "", "labels"], [77, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[77, 4, 1, "", "nondigit_punct_re"], [77, 4, 1, "", "punct_nondigit_re"], [77, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[78, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[80, 1, 1, "", "COCOEvalWrapper"], [80, 1, 1, "", "COCOWrapper"], [80, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [80, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [80, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[80, 4, 1, "", "dataset"], [80, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, 2, 1, "", "evaluate"], [81, 2, 1, "", "exact_match_score"], [81, 2, 1, "", "f1_score"], [81, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, 2, 1, "", "evaluate"], [82, 2, 1, "", "f1_score"], [82, 2, 1, "", "metric_max_over_ground_truths"], [82, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[84, 1, 1, "", "Accuracy"], [84, 1, 1, "", "BaseMetric"], [84, 1, 1, "", "COCOmAPv2"], [84, 1, 1, "", "F1"], [84, 1, 1, "", "GeneralTopK"], [84, 1, 1, "", "Loss"], [84, 1, 1, "", "MAE"], [84, 1, 1, "", "METRICS"], [84, 1, 1, "", "MSE"], [84, 1, 1, "", "MXNetMetrics"], [84, 1, 1, "", "ONNXRTGLUE"], [84, 1, 1, "", "ONNXRTITMetrics"], [84, 1, 1, "", "ONNXRTQLMetrics"], [84, 1, 1, "", "PyTorchLoss"], [84, 1, 1, "", "PyTorchMetrics"], [84, 1, 1, "", "RMSE"], [84, 1, 1, "", "ROC"], [84, 1, 1, "", "SquadF1"], [84, 1, 1, "", "TensorflowCOCOMAP"], [84, 1, 1, "", "TensorflowMAP"], [84, 1, 1, "", "TensorflowMetrics"], [84, 1, 1, "", "TensorflowTopK"], [84, 1, 1, "", "TensorflowVOCMAP"], [84, 1, 1, "", "WrapMXNetMetric"], [84, 1, 1, "", "WrapONNXRTMetric"], [84, 1, 1, "", "WrapPyTorchMetric"], [84, 1, 1, "", "mIOU"], [84, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"], [84, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[84, 4, 1, "", "sample"], [84, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[84, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[85, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[86, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[87, 0, 0, "-", "basic_nas"], [88, 0, 0, "-", "dynas"], [90, 0, 0, "-", "nas"], [91, 0, 0, "-", "nas_utils"], [92, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[87, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[88, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[90, 1, 1, "", "NAS"], [90, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[91, 2, 1, "", "create_search_space_pool"], [91, 2, 1, "", "find_pareto_front"], [91, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[92, 1, 1, "", "BayesianOptimizationSearcher"], [92, 1, 1, "", "GridSearcher"], [92, 1, 1, "", "RandomSearcher"], [92, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[93, 0, 0, "-", "gradient_sensitivity"], [94, 0, 0, "-", "group_lasso"], [96, 0, 0, "-", "magnitude"], [97, 0, 0, "-", "pattern_lock"], [98, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, 1, 1, "", "Pruner"], [98, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[99, 1, 1, "", "Pruning"], [99, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[99, 4, 1, "", "conf"], [99, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[101, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[102, 0, 0, "-", "pattern"], [103, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, 1, 1, "", "PATTERNS"], [102, 1, 1, "", "PatternBase"], [102, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[102, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, 1, 1, "", "TilePatternBase"], [103, 1, 1, "", "TilePattern_1x1"], [103, 1, 1, "", "TilePattern_1x16"], [103, 1, 1, "", "TilePattern_1x2"], [103, 1, 1, "", "TilePattern_2x2"], [103, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[104, 1, 1, "", "Pruning"], [104, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[104, 4, 1, "", "conf"], [104, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[106, 0, 0, "-", "logger"], [107, 0, 0, "-", "patterns"], [108, 0, 0, "-", "prune_utils"], [109, 0, 0, "-", "pruner"], [110, 0, 0, "-", "pruning"], [111, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, 1, 1, "", "Pattern"], [107, 1, 1, "", "PatternNInM"], [107, 1, 1, "", "PatternNxM"], [107, 2, 1, "", "get_pattern"], [107, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[107, 4, 1, "", "is_global"], [107, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[107, 4, 1, "", "M"], [107, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[107, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, 2, 1, "", "check_config"], [108, 2, 1, "", "parse_not_to_prune"], [108, 2, 1, "", "parse_to_prune"], [108, 2, 1, "", "process_and_check_config"], [108, 2, 1, "", "process_config"], [108, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, 1, 1, "", "MagnitudePruner"], [109, 1, 1, "", "PatternLockPruner"], [109, 1, 1, "", "Pruner"], [109, 1, 1, "", "SnipMomentumPruner"], [109, 1, 1, "", "SnipPruner"], [109, 2, 1, "", "get_pruner"], [109, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[109, 4, 1, "", "config"], [109, 4, 1, "", "current_sparsity_ratio"], [109, 4, 1, "", "end_step"], [109, 4, 1, "", "global_step"], [109, 4, 1, "", "masks"], [109, 4, 1, "", "max_sparsity_ratio_per_layer"], [109, 4, 1, "", "modules"], [109, 4, 1, "", "pattern"], [109, 4, 1, "", "scheduler"], [109, 4, 1, "", "scores"], [109, 4, 1, "", "start_step"], [109, 4, 1, "", "target_sparsity_ratio"], [109, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[110, 4, 1, "", "config_file_path"], [110, 4, 1, "", "model"], [110, 4, 1, "", "pruner_info"], [110, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, 1, 1, "", "IterativeScheduler"], [111, 1, 1, "", "OneshotScheduler"], [111, 1, 1, "", "Scheduler"], [111, 2, 1, "", "get_scheduler"], [111, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[111, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[112, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[113, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[114, 0, 0, "-", "auto_mixed_precision"], [115, 0, 0, "-", "basic"], [116, 0, 0, "-", "bayesian"], [117, 0, 0, "-", "exhaustive"], [119, 0, 0, "-", "mse"], [120, 0, 0, "-", "mse_v2"], [121, 0, 0, "-", "random"], [122, 0, 0, "-", "strategy"], [124, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[116, 1, 1, "", "BayesianOptimization"], [116, 1, 1, "", "BayesianTuneStrategy"], [116, 1, 1, "", "TargetSpace"], [116, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[117, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, 1, 1, "", "TuneStrategy"], [122, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[123, 0, 0, "-", "constant"], [125, 0, 0, "-", "tuning_sampler"], [126, 0, 0, "-", "tuning_space"], [127, 0, 0, "-", "tuning_structs"], [128, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, 1, 1, "", "FallbackTuningSampler"], [125, 1, 1, "", "ModelWiseTuningSampler"], [125, 1, 1, "", "OpTypeWiseTuningSampler"], [125, 1, 1, "", "OpWiseTuningSampler"], [125, 1, 1, "", "SmoothQuantSampler"], [125, 1, 1, "", "TuningOrder"], [125, 1, 1, "", "TuningSampler"], [125, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, 1, 1, "", "TuningItem"], [126, 1, 1, "", "TuningSpace"], [126, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [126, 2, 1, "", "pattern_to_internal"], [126, 2, 1, "", "pattern_to_path"], [126, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[128, 1, 1, "", "OrderedDefaultDict"], [128, 2, 1, "", "extract_data_type"], [128, 2, 1, "", "get_adaptor_name"], [128, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[130, 0, 0, "-", "bleu"], [131, 0, 0, "-", "bleu_util"], [132, 0, 0, "-", "coco_label_map"], [133, 0, 0, "-", "coco_tools"], [134, 0, 0, "-", "evaluate_squad"], [135, 0, 0, "-", "f1"], [137, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[130, 1, 1, "", "BLEU"], [130, 1, 1, "", "UnicodeRegex"], [130, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[130, 4, 1, "", "labels"], [130, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[130, 4, 1, "", "nondigit_punct_re"], [130, 4, 1, "", "punct_nondigit_re"], [130, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[131, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[133, 1, 1, "", "COCOEvalWrapper"], [133, 1, 1, "", "COCOWrapper"], [133, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [133, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [133, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[133, 4, 1, "", "dataset"], [133, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[134, 2, 1, "", "evaluate"], [134, 2, 1, "", "exact_match_score"], [134, 2, 1, "", "f1_score"], [134, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, 2, 1, "", "evaluate"], [135, 2, 1, "", "f1_score"], [135, 2, 1, "", "metric_max_over_ground_truths"], [135, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[137, 1, 1, "", "Accuracy"], [137, 1, 1, "", "BaseMetric"], [137, 1, 1, "", "COCOmAPv2"], [137, 1, 1, "", "F1"], [137, 1, 1, "", "GeneralTopK"], [137, 1, 1, "", "Loss"], [137, 1, 1, "", "MAE"], [137, 1, 1, "", "METRICS"], [137, 1, 1, "", "MSE"], [137, 1, 1, "", "MXNetMetrics"], [137, 1, 1, "", "Metric"], [137, 1, 1, "", "ONNXRTGLUE"], [137, 1, 1, "", "ONNXRTITMetrics"], [137, 1, 1, "", "ONNXRTQLMetrics"], [137, 1, 1, "", "PyTorchLoss"], [137, 1, 1, "", "PyTorchMetrics"], [137, 1, 1, "", "RMSE"], [137, 1, 1, "", "ROC"], [137, 1, 1, "", "SquadF1"], [137, 1, 1, "", "TensorflowCOCOMAP"], [137, 1, 1, "", "TensorflowMAP"], [137, 1, 1, "", "TensorflowMetrics"], [137, 1, 1, "", "TensorflowTopK"], [137, 1, 1, "", "TensorflowVOCMAP"], [137, 1, 1, "", "WrapMXNetMetric"], [137, 1, 1, "", "WrapONNXRTMetric"], [137, 1, 1, "", "WrapPyTorchMetric"], [137, 1, 1, "", "mIOU"], [137, 2, 1, "", "metric_registry"], [137, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"], [137, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[137, 4, 1, "", "sample"], [137, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[137, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[138, 2, 1, "", "fit"]], "neural_compressor.model": [[139, 0, 0, "-", "base_model"], [141, 0, 0, "-", "keras_model"], [142, 0, 0, "-", "model"], [143, 0, 0, "-", "mxnet_model"], [144, 0, 0, "-", "nets_factory"], [145, 0, 0, "-", "onnx_model"], [146, 0, 0, "-", "tensorflow_model"], [147, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[139, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[141, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[142, 1, 1, "", "Model"], [142, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[143, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[144, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[145, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[146, 1, 1, "", "TensorflowBaseModel"], [146, 1, 1, "", "TensorflowCheckpointModel"], [146, 1, 1, "", "TensorflowLLMModel"], [146, 1, 1, "", "TensorflowModel"], [146, 1, 1, "", "TensorflowQATModel"], [146, 1, 1, "", "TensorflowSavedModelModel"], [146, 2, 1, "", "checkpoint_session"], [146, 2, 1, "", "estimator_session"], [146, 2, 1, "", "frozen_pb_session"], [146, 2, 1, "", "get_model_type"], [146, 2, 1, "", "graph_def_session"], [146, 2, 1, "", "graph_session"], [146, 2, 1, "", "keras_session"], [146, 2, 1, "", "load_saved_model"], [146, 2, 1, "", "saved_model_session"], [146, 2, 1, "", "slim_session"], [146, 2, 1, "", "try_loading_keras"], [146, 2, 1, "", "validate_and_inference_input_output"], [146, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[147, 1, 1, "", "IPEXModel"], [147, 1, 1, "", "PyTorchBaseModel"], [147, 1, 1, "", "PyTorchFXModel"], [147, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[148, 1, 1, "", "Accuracy"], [148, 1, 1, "", "Footprint"], [148, 1, 1, "", "ModelSize"], [148, 1, 1, "", "MultiObjective"], [148, 1, 1, "", "Objective"], [148, 1, 1, "", "Performance"], [148, 2, 1, "", "objective_custom_registry"], [148, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[150, 2, 1, "", "fit"]], "neural_compressor.strategy": [[151, 0, 0, "-", "auto"], [152, 0, 0, "-", "auto_mixed_precision"], [153, 0, 0, "-", "basic"], [154, 0, 0, "-", "bayesian"], [155, 0, 0, "-", "conservative"], [156, 0, 0, "-", "exhaustive"], [157, 0, 0, "-", "hawq_v2"], [159, 0, 0, "-", "mse"], [160, 0, 0, "-", "mse_v2"], [161, 0, 0, "-", "random"], [162, 0, 0, "-", "strategy"], [164, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[151, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[153, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[154, 1, 1, "", "BayesianOptimization"], [154, 1, 1, "", "BayesianTuneStrategy"], [154, 1, 1, "", "TargetSpace"], [154, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[155, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[159, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[161, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[162, 1, 1, "", "TuneStrategy"], [162, 1, 1, "", "TuneStrategyMeta"], [162, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[163, 0, 0, "-", "constant"], [165, 0, 0, "-", "tuning_sampler"], [166, 0, 0, "-", "tuning_space"], [167, 0, 0, "-", "tuning_structs"], [168, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, 1, 1, "", "BlockFallbackTuningSampler"], [165, 1, 1, "", "FallbackTuningSampler"], [165, 1, 1, "", "LowerBitsSampler"], [165, 1, 1, "", "ModelWiseTuningSampler"], [165, 1, 1, "", "OpTypeWiseTuningSampler"], [165, 1, 1, "", "OpWiseTuningSampler"], [165, 1, 1, "", "SmoothQuantSampler"], [165, 1, 1, "", "TuningOrder"], [165, 1, 1, "", "TuningSampler"], [165, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, 1, 1, "", "TuningItem"], [166, 1, 1, "", "TuningSpace"], [166, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [166, 2, 1, "", "pattern_to_internal"], [166, 2, 1, "", "pattern_to_path"], [166, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[167, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[168, 1, 1, "", "ClassRegister"], [168, 1, 1, "", "OrderedDefaultDict"], [168, 1, 1, "", "QuantOptions"], [168, 1, 1, "", "QuantType"], [168, 2, 1, "", "build_slave_faker_model"], [168, 2, 1, "", "extract_data_type"], [168, 2, 1, "", "get_adaptor_name"], [168, 2, 1, "", "preprocess_user_cfg"], [168, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[169, 1, 1, "", "CallBacks"], [169, 1, 1, "", "CompressionManager"], [169, 2, 1, "", "fit"], [169, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[170, 0, 0, "-", "collect_layer_histogram"], [171, 0, 0, "-", "constant"], [172, 0, 0, "-", "create_obj_from_config"], [173, 0, 0, "-", "export"], [178, 0, 0, "-", "kl_divergence"], [179, 0, 0, "-", "load_huggingface"], [180, 0, 0, "-", "logger"], [181, 0, 0, "-", "neural_insights_utils"], [182, 0, 0, "-", "options"], [183, 0, 0, "-", "pytorch"], [184, 0, 0, "-", "utility"], [185, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[170, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[172, 2, 1, "", "create_dataloader"], [172, 2, 1, "", "create_dataset"], [172, 2, 1, "", "create_eval_func"], [172, 2, 1, "", "create_train_func"], [172, 2, 1, "", "get_algorithm"], [172, 2, 1, "", "get_func_from_config"], [172, 2, 1, "", "get_metrics"], [172, 2, 1, "", "get_postprocess"], [172, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[174, 0, 0, "-", "qlinear2qdq"], [175, 0, 0, "-", "tf2onnx"], [176, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[174, 2, 1, "", "check_model"], [174, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[175, 2, 1, "", "tf_to_fp32_onnx"], [175, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[176, 2, 1, "", "dynamic_quant_export"], [176, 2, 1, "", "get_node_mapping"], [176, 2, 1, "", "get_quantizable_onnx_ops"], [176, 2, 1, "", "static_quant_export"], [176, 2, 1, "", "torch_to_fp32_onnx"], [176, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[178, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[179, 1, 1, "", "OptimizedModel"], [179, 2, 1, "", "export_compressed_model"], [179, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[180, 1, 1, "", "Logger"], [180, 2, 1, "", "debug"], [180, 2, 1, "", "error"], [180, 2, 1, "", "fatal"], [180, 2, 1, "", "info"], [180, 2, 1, "", "log"], [180, 2, 1, "", "warn"], [180, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[181, 2, 1, "", "get_model_path"], [181, 2, 1, "", "register_neural_insights_workload"], [181, 2, 1, "", "update_neural_insights_workload"], [181, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[182, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[183, 2, 1, "", "is_int8_model"], [183, 2, 1, "", "load"], [183, 2, 1, "", "load_weight_only"], [183, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[184, 1, 1, "", "CaptureOutputToFile"], [184, 1, 1, "", "CpuInfo"], [184, 2, 1, "", "Dequantize"], [184, 1, 1, "", "DotDict"], [184, 1, 1, "", "GLOBAL_STATE"], [184, 1, 1, "", "LazyImport"], [184, 1, 1, "", "MODE"], [184, 1, 1, "", "OpEntry"], [184, 1, 1, "", "Statistics"], [184, 2, 1, "", "alias_param"], [184, 2, 1, "", "calculate_mse"], [184, 2, 1, "", "check_key_exist"], [184, 2, 1, "", "combine_histogram"], [184, 2, 1, "", "compare_objects"], [184, 2, 1, "", "compute_sparsity"], [184, 2, 1, "", "dequantize_weight"], [184, 2, 1, "", "dump_class_attrs"], [184, 2, 1, "", "dump_data_to_local"], [184, 2, 1, "", "dump_elapsed_time"], [184, 2, 1, "", "dump_table"], [184, 2, 1, "", "dump_table_to_csv"], [184, 2, 1, "", "equal_dicts"], [184, 2, 1, "", "fault_tolerant_file"], [184, 2, 1, "", "get_all_fp32_data"], [184, 2, 1, "", "get_number_of_sockets"], [184, 2, 1, "", "get_op_list"], [184, 2, 1, "", "get_size"], [184, 2, 1, "", "get_tensor_histogram"], [184, 2, 1, "", "get_tensors_info"], [184, 2, 1, "", "get_tuning_history"], [184, 2, 1, "", "get_weights_details"], [184, 2, 1, "", "load_data_from_pkl"], [184, 2, 1, "", "mse_metric_gap"], [184, 2, 1, "", "print_op_list"], [184, 2, 1, "", "print_table"], [184, 2, 1, "", "recover"], [184, 2, 1, "", "set_random_seed"], [184, 2, 1, "", "set_resume_from"], [184, 2, 1, "", "set_tensorboard"], [184, 2, 1, "", "set_workspace"], [184, 2, 1, "", "show_memory_info"], [184, 2, 1, "", "singleton"], [184, 2, 1, "", "str2array"], [184, 2, 1, "", "time_limit"], [184, 2, 1, "", "version1_eq_version2"], [184, 2, 1, "", "version1_gt_version2"], [184, 2, 1, "", "version1_gte_version2"], [184, 2, 1, "", "version1_lt_version2"], [184, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[185, 1, 1, "", "WeightsDetails"], [185, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186], "algorithm": [1, 2, 3, 4, 5, 224, 290, 293, 296], "class": [1, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 75, 77, 80, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 178, 179, 180, 182, 184, 185, 206, 275], "function": [1, 6, 12, 14, 21, 27, 28, 29, 30, 34, 35, 37, 46, 54, 56, 63, 68, 69, 72, 73, 74, 77, 78, 80, 81, 82, 84, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 174, 175, 176, 179, 180, 181, 183, 184, 232], "modul": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185], "content": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 205, 275], "fast_bias_correct": 2, "submodul": [3, 9, 18, 22, 25, 32, 41, 48, 60, 64, 67, 71, 76, 83, 89, 95, 101, 105, 118, 124, 129, 136, 140, 158, 164, 173, 177], "smooth_quant": 4, "weight_correct": 5, "benchmark": [6, 29, 214, 223, 229, 244, 286], "config": [7, 216, 227, 282], "contrib": [8, 9, 10, 11, 40, 41, 42, 43], "subpackag": [8, 23, 40, 65, 76, 100, 118, 129, 158, 177], "strategi": [9, 10, 11, 41, 42, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 221, 292, 296], "sigopt": [10, 42, 292, 296], "tpe": [11, 43, 296], "data": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 207, 208, 229, 233, 269], "dataset": [12, 13, 14, 15, 16, 17, 18, 19, 54, 55, 56, 57, 58, 59, 60, 61, 227, 229, 238, 270], "bert_dataset": [12, 54], "coco_dataset": [13, 55], "attribut": [14, 56, 200], "dummy_dataset": [15, 57], "dummy_dataset_v2": [16, 58], "imagenet_dataset": [17, 59], "style_transfer_dataset": [19, 61], "filter": [20, 21, 22, 62, 63, 64], "coco_filt": [20, 62], "transform": [24, 25, 26, 27, 28, 66, 67, 68, 69, 238, 295], "imagenet_transform": [24, 66], "postprocess": [26, 36], "token": [27, 68], "experiment": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "common": [30, 31, 32, 33, 34, 35, 36, 37, 192, 193, 202, 235], "criterion": 30, "dataload": [31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 226, 227], "metric": [33, 77, 78, 79, 80, 81, 82, 83, 84, 130, 131, 132, 133, 134, 135, 136, 137, 238, 243], "model": [34, 139, 140, 141, 142, 143, 144, 145, 146, 147, 190, 191, 197, 207, 218, 234, 237, 240, 242, 244, 246, 247, 254, 268, 269, 270, 278, 279, 280, 284, 288, 290, 293, 299], "optim": [35, 255, 265, 275, 278, 279, 280, 283, 284, 297], "torch_util": 37, "compon": 38, "compress": [39, 215, 290], "base_dataload": 44, "default_dataload": 46, "fetcher": 47, "mxnet_dataload": 49, "onnxrt_dataload": 50, "pytorch_dataload": 51, "sampler": 52, "tensorflow_dataload": 53, "distil": [70, 230, 231, 244, 286, 299], "export": [71, 72, 73, 74, 173, 174, 175, 176, 234, 290], "qlinear2qdq": [72, 174], "tf2onnx": [73, 175], "torch2onnx": [74, 176], "graph_optim": 75, "bleu": [77, 130], "bleu_util": [78, 131], "coco_label_map": [79, 132], "coco_tool": [80, 133], "evaluate_squad": [81, 134], "f1": [82, 135], "mixed_precis": 85, "model_convers": 86, "na": [87, 88, 89, 90, 91, 92, 203, 286], "basic_na": 87, "dyna": 88, "nas_util": 91, "search_algorithm": 92, "pruner_legaci": [93, 94, 95, 96, 97, 98], "gradient_sensit": 93, "group_lasso": 94, "magnitud": 96, "pattern_lock": 97, "pruner": [98, 109], "prune": [99, 110, 244, 284, 286, 299], "pruning_recip": [100, 101, 102, 103], "pattern": [101, 102, 103, 107, 284], "tile_pattern": 103, "pruning_v2": 104, "pytorch_prun": [105, 106, 107, 108, 109, 110, 111], "logger": [106, 180, 225], "prune_util": 108, "schedul": [111, 113, 284], "quantiz": [112, 150, 187, 188, 190, 191, 192, 193, 194, 196, 198, 202, 205, 207, 208, 220, 224, 229, 231, 234, 237, 240, 242, 244, 245, 247, 254, 265, 267, 268, 269, 270, 278, 279, 280, 286, 287, 288, 289, 290, 293, 299], "auto_mixed_precis": [114, 152], "basic": [115, 153, 203, 296], "bayesian": [116, 154, 296], "exhaust": [117, 156, 296], "mse": [119, 159, 296], "mse_v2": [120, 160, 296], "random": [121, 161, 296], "util": [123, 124, 125, 126, 127, 128, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 211], "constant": [123, 163, 171], "tuning_sampl": [125, 165], "tuning_spac": [126, 166], "tuning_struct": [127, 167], "mix_precis": 138, "base_model": 139, "keras_model": 141, "mxnet_model": 143, "nets_factori": 144, "onnx_model": 145, "tensorflow_model": 146, "torch_model": 147, "object": [148, 219, 278, 279, 280, 282], "profil": [149, 229], "auto": [151, 195, 259, 265, 289, 293, 296], "conserv": [155, 296], "hawq_v2": [157, 296], "train": [169, 196, 198, 202, 222, 232, 244, 284, 287], "collect_layer_histogram": 170, "create_obj_from_config": 172, "kl_diverg": 178, "load_huggingfac": 179, "neural_insights_util": 181, "option": [182, 232, 253], "pytorch": [183, 189, 190, 191, 192, 197, 198, 227, 232, 234, 243, 269, 287, 288, 289, 294, 295, 299], "weights_detail": 185, "version": 186, "dynam": [187, 198, 202, 203, 287], "introduct": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 206, 207, 208, 223, 224, 226, 227, 229, 230, 231, 232, 234, 236, 239, 243, 245, 246, 247, 265, 268, 269, 270, 282, 283, 284, 286, 287, 288, 290, 292, 293, 294, 295, 296, 298], "get": [187, 188, 189, 191, 192, 194, 202, 203, 205, 206, 223, 226, 227, 229, 230, 231, 232, 236, 237, 243, 245, 247, 248, 259, 266, 267, 271, 272, 273, 274, 282, 283, 284, 286, 287, 294, 298], "start": [187, 188, 189, 191, 192, 194, 202, 203, 205, 206, 223, 226, 227, 229, 230, 231, 232, 236, 237, 243, 245, 247, 248, 249, 253, 259, 267, 271, 272, 273, 278, 279, 280, 282, 283, 284, 286, 287, 294, 298], "exampl": [187, 188, 189, 191, 192, 194, 195, 198, 202, 203, 206, 212, 223, 226, 227, 229, 230, 231, 232, 233, 234, 243, 244, 245, 246, 247, 250, 254, 267, 268, 269, 270, 272, 277, 278, 279, 280, 282, 283, 284, 287, 288, 290, 293, 294, 299], "microsc": [188, 247], "api": [188, 189, 193, 196, 203, 206, 207, 212, 213, 223, 226, 227, 230, 231, 232, 237, 238, 243, 245, 247, 248, 252, 266, 267, 274, 280, 282, 283, 284, 286, 297], "refer": [188, 192, 198, 224, 225, 247, 284, 287, 290, 293], "mix": [189, 217, 244, 245, 289], "precis": [189, 217, 244, 245, 289], "support": [189, 190, 192, 193, 196, 201, 202, 203, 206, 208, 223, 224, 226, 227, 229, 230, 231, 232, 234, 236, 239, 240, 243, 245, 246, 247, 249, 250, 254, 255, 282, 283, 284, 286, 287, 288, 290, 293, 294, 295, 298], "matrix": [189, 190, 192, 193, 196, 202, 203, 206, 223, 224, 226, 227, 229, 230, 231, 232, 234, 236, 239, 243, 245, 246, 247, 250, 282, 283, 284, 286, 287, 288, 290, 293, 294, 298], "hardwar": [189, 240, 245, 299], "softwar": [189, 240, 245], "request": [189, 201, 245, 276], "bf16": [189, 245], "fp16": [189, 245], "accuraci": [189, 194, 198, 242, 245, 268, 270, 287, 296], "driven": [189, 245], "autotun": [189, 193, 197], "smooth": [190, 195, 196, 198, 293], "usag": [190, 191, 192, 195, 203, 254, 265, 274, 293, 294, 296], "fix": [190, 195, 293], "alpha": [190, 195, 293], "specifi": [190, 191, 192, 194, 287], "rule": [190, 191, 192, 194, 225, 287], "valid": [190, 237, 240, 293, 299], "framework": [190, 207, 226, 227, 234, 236, 246, 247, 286, 288, 290, 293], "static": [191, 196, 198, 202, 205, 287], "ipex": [191, 198, 287], "backend": [191, 196, 206, 287], "sampl": [191, 207, 237], "pt2e": 191, "weight": [192, 198, 205, 268, 269, 270, 290], "onli": [192, 198, 203, 205, 290], "argument": [192, 253], "rtn": 192, "gptq": 192, "autoround": 192, "awq": 192, "teq": 192, "hqq": 192, "save": 192, "load": [192, 193], "torch": [193, 211, 299], "like": [193, 208], "problem": [193, 202], "tensorflow": [194, 196, 197, 198, 227, 232, 234, 243, 287, 289, 294, 295, 299], "without": 194, "awar": [194, 198, 202, 244, 284, 287], "tune": [194, 195, 198, 208, 287, 290, 293, 296], "With": 194, "quant": [195, 293], "us": [195, 208, 226, 243, 272, 273, 293], "determin": [195, 293], "through": [195, 240, 293, 299], "scheme": [196, 198, 287], "approach": [196, 287], "post": [196, 202, 244, 274, 287], "devic": [196, 287], "overview": [197, 201, 275, 297], "how": [197, 207, 208, 229, 268, 269, 270, 272], "work": [197, 206, 272, 287], "fundament": [198, 287, 293], "symmetr": 198, "asymmetr": 198, "per": [198, 293], "tensor": [198, 267, 293], "channel": [198, 293], "matmul": [198, 293], "limit": [198, 293], "intel": [199, 205, 226, 229, 239, 240, 243, 244, 251, 259, 265, 300], "neural": [199, 202, 203, 205, 226, 229, 239, 240, 243, 244, 248, 252, 254, 259, 265, 267, 268, 269, 270, 272, 273, 274, 278, 279, 280, 284, 292, 297, 300], "compressor": [199, 202, 205, 226, 229, 239, 240, 243, 244, 259, 265, 292, 300], "document": [199, 205, 212, 300], "section": [199, 300], "contributor": [200, 201], "coven": [200, 201], "code": [200, 201, 203, 225, 244, 266, 271, 290, 297], "conduct": [200, 201], "our": [200, 293], "pledg": 200, "standard": 200, "respons": [200, 274], "scope": [200, 284], "enforc": 200, "contribut": [201, 258, 262], "guidelin": 201, "creat": [201, 271], "pull": 201, "step": [201, 267, 268, 269, 270], "checklist": 201, "templat": 201, "accept": 201, "criteria": [201, 284, 296], "statu": [201, 273, 274], "check": 201, "fx": 202, "mode": [202, 299], "note": [202, 291], "detail": 202, "architectur": [203, 228, 239, 240], "search": [203, 265], "1": [203, 232, 235, 238, 244, 265, 272, 273, 299], "python": [203, 226, 237, 243, 248, 252, 253, 260, 263, 267, 286, 297], "yaml": [203, 207, 227, 232, 236, 298], "2": [203, 232, 235, 238, 244, 265, 272, 273, 299], "advanc": [203, 271, 297], "custom": [203, 226, 243, 278, 296], "secur": [204, 232], "polici": [204, 296], "report": 204, "vulner": 204, "what": [205, 248, 266, 272], "": [205, 240, 266, 272], "new": [205, 206, 208, 260, 263, 296], "instal": [205, 229, 240, 249, 251, 258, 259, 262, 267, 272, 273], "from": [205, 207, 240, 244, 267, 272, 273], "pypi": [205, 254, 267], "llm": [205, 242], "non": 205, "select": [205, 259], "public": [205, 225, 285], "event": [205, 285], "addit": 205, "commun": 205, "adaptor": [206, 207, 209], "flow": [206, 287], "queri": [206, 273, 278, 279, 280], "background": [206, 225, 265], "ad": 206, "capabl": [206, 290], "implement": [206, 207], "onnxrtadaptor": 206, "add": [207, 273], "an": [207, 278, 279, 280], "list": [207, 233, 277, 295], "need": 207, "design": [207, 228, 275, 296], "query_fw_cap": 207, "accord": [207, 208], "tune_cfg": 207, "prepar": [207, 229, 268, 269, 270, 292], "calibr": [207, 224], "fp32": [207, 234], "graph": 207, "run": [207, 229, 266, 268, 269, 270, 271], "iter": 207, "oper": [207, 208], "calcul": 207, "rang": 207, "gener": 207, "type": [208, 225, 284], "int4": 208, "few": 208, "line": 208, "chang": [208, 238, 264, 266, 291], "defin": [208, 232], "abil": 208, "specif": [208, 227], "invok": 208, "kernel": 208, "configur": [208, 232, 236, 271, 286, 292, 298], "summari": [208, 268], "onnx": [210, 240, 287, 288, 299], "runtim": [210, 240, 287, 288, 299], "inc": 225, "convent": 225, "import": 225, "string": 225, "annot": 225, "comment": 225, "todo": 225, "intern": 225, "interfac": 225, "folder": [225, 266], "structur": 225, "recommend": 225, "v": [225, 266], "set": [225, 229, 251, 265], "json": 225, "build": [226, 235, 243, 271, 272, 273], "mxnet": [227, 243, 287, 295], "onnxrt": [227, 243, 295], "file": [227, 236, 298], "user": [227, 232, 238, 286, 290, 297, 298], "workflow": [228, 275], "diagnosi": [229, 267], "featur": [229, 232, 236, 239, 254, 255, 259, 286, 287, 294, 298], "modifi": 229, "script": [229, 271], "see": 229, "do": [229, 248], "paramet": [229, 274], "descript": [229, 274, 276], "suggest": 229, "fallback": 229, "knowledg": [230, 299], "intermedi": 230, "layer": [230, 288, 293], "self": 230, "distribut": [232, 254, 296], "infer": 232, "evalu": 232, "pure": 232, "horovodrun": 232, "execut": 232, "releas": [233, 260, 263, 291], "int8": [234, 299], "appendix": 234, "op": 234, "frequent": 235, "ask": 235, "question": 235, "issu": [235, 291], "3": [235, 249, 265, 285], "4": [235, 256, 265, 285], "quick": [237, 253], "incompat": [238, 291], "between": 238, "v1": 238, "face": [238, 279, 280], "built": [238, 240, 243], "infrastructur": 239, "prerequisit": [240, 272, 273], "binari": 240, "sourc": [240, 267, 269, 270, 272, 273], "ai": 240, "kit": 240, "system": 240, "requir": [240, 258, 262, 268, 269, 270, 278], "environ": [240, 251], "cpu": [240, 251, 299], "base": [240, 274, 297], "64": 240, "compat": 240, "processor": 240, "gpu": 240, "xe": 240, "multipl": [240, 282, 299], "vendor": 240, "legal": 241, "inform": 241, "licens": 241, "citat": 241, "trademark": 241, "recip": [242, 287], "larg": [242, 284], "languag": [242, 284], "migrat": 244, "x": 244, "orchestr": [244, 283], "dure": [245, 289], "coder": [248, 252, 254, 265, 297], "we": 248, "offer": 248, "jupyt": [248, 249, 260, 263], "lab": [248, 249], "extens": [248, 258, 259, 262, 265, 266, 275], "launcher": [248, 253], "contact": [248, 272], "aw": 249, "amazon": 249, "sagemak": 249, "For": 249, "studio": 249, "notebook": 249, "instanc": 249, "guid": [249, 297], "bigdl": 250, "nano": 250, "platform": [251, 292], "best": [251, 259], "perform": [251, 292], "mkl": 251, "openmp": 251, "jemalloc": 251, "numa": 251, "control": 251, "variabl": 251, "frequenc": 251, "govern": 251, "enabl": [252, 259, 265], "bench": 252, "superbench": 252, "v0": 256, "highlight": 256, "other": 256, "changelog": [257, 261], "neural_compressor_ext_lab": [258, 260], "uninstal": [258, 262], "develop": [258, 262], "packag": [258, 260, 262, 263], "jupyterlab": 259, "Or": 259, "let": 259, "u": 259, "help": 259, "you": 259, "pre": 259, "requisit": 259, "make": [260, 263, 266, 271], "manual": [260, 263], "npm": [260, 263, 271], "autom": [260, 263], "publish": [260, 263], "conda": [260, 263], "forg": [260, 263], "neural_compressor_ext_lab_alibaba": [262, 263], "log": [264, 273, 274], "unreleas": 264, "vscode": 265, "open": [265, 270], "icon": 265, "5": 265, "welcom": 266, "your": 266, "setup": 266, "up": 266, "straight": 266, "awai": 266, "explor": 266, "test": [266, 271], "go": 266, "further": 266, "insight": [267, 268, 269, 270], "dump": [267, 269], "research": 267, "collabor": 267, "debug": [268, 270], "analyz": [268, 270, 271], "result": [268, 270, 278, 279, 280], "activ": 268, "histogram": 270, "react": 271, "app": 271, "avail": 271, "eject": 271, "learn": [271, 272], "more": [271, 272], "split": 271, "bundl": 271, "size": 271, "progress": 271, "web": 271, "deploy": [271, 284], "fail": 271, "minifi": 271, "solut": [272, 273, 274, 278, 279, 280], "why": 272, "doe": 272, "method": [272, 273], "pip": [272, 273], "end": [272, 278, 279, 280], "servic": [273, 275, 278, 279, 280], "submit": [273, 274, 278, 279, 280], "task": [273, 274, 276, 278, 279, 280], "stop": [273, 278, 279, 280], "inspect": 273, "manag": [273, 278, 279], "resourc": [273, 278, 279], "node": 273, "state": 273, "cluster": [273, 274], "remov": 273, "url": 274, "endpoint": 274, "task_id": 274, "websocket": 274, "screen": 274, "ping": 274, "download": [274, 278, 279], "doc": 275, "wip": 275, "oaa": 275, "definit": 275, "diagram": 275, "hug": [279, 280], "grpc": 280, "client": 281, "singl": 282, "One": 283, "shot": 283, "network": 284, "sparsiti": 284, "decai": 284, "regular": 284, "retrain": 284, "free": 284, "spars": 284, "hyperparamet": 284, "full": 285, "82": 285, "2024": 285, "2023": 285, "25": 285, "2022": 285, "35": 285, "2021": 285, "15": [285, 299], "2018": 285, "2020": 285, "style": 286, "access": 286, "wise": 288, "lwq": 288, "turn": 289, "off": 289, "woq": [290, 299], "known": 291, "benefit": 292, "comparison": 292, "differ": 292, "smoothquant": 293, "enhanc": 293, "engin": 293, "entir": 293, "each": 293, "block": 293, "tensorboard": 294, "space": 296, "exit": 296, "process": 296, "zero": 297, "topic": 297, "innov": 297, "product": 297, "0": 299, "ptq": 299, "qat": 299, "17": 299, "qdq": 299}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[1, "classes"], [2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [133, "classes"], [137, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [184, "classes"], [185, "classes"]], "Functions": [[1, "functions"], [6, "functions"], [12, "functions"], [14, "functions"], [21, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [46, "functions"], [54, "functions"], [56, "functions"], [63, "functions"], [68, "functions"], [69, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [77, "functions"], [78, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [91, "functions"], [98, "functions"], [102, "functions"], [107, "functions"], [108, "functions"], [109, "functions"], [111, "functions"], [116, "functions"], [122, "functions"], [126, "functions"], [128, "functions"], [130, "functions"], [131, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [137, "functions"], [138, "functions"], [142, "functions"], [146, "functions"], [148, "functions"], [150, "functions"], [154, "functions"], [162, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [172, "functions"], [174, "functions"], [175, "functions"], [176, "functions"], [179, "functions"], [180, "functions"], [181, "functions"], [183, "functions"], [184, "functions"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "Submodules": [[3, "submodules"], [9, "submodules"], [18, "submodules"], [22, "submodules"], [25, "submodules"], [32, "submodules"], [41, "submodules"], [48, "submodules"], [60, "submodules"], [64, "submodules"], [67, "submodules"], [71, "submodules"], [76, "submodules"], [83, "submodules"], [89, "submodules"], [95, "submodules"], [101, "submodules"], [105, "submodules"], [118, "submodules"], [124, "submodules"], [129, "submodules"], [136, "submodules"], [140, "submodules"], [158, "submodules"], [164, "submodules"], [173, "submodules"], [177, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "Subpackages": [[8, "subpackages"], [23, "subpackages"], [40, "subpackages"], [65, "subpackages"], [76, "subpackages"], [100, "subpackages"], [118, "subpackages"], [129, "subpackages"], [158, "subpackages"], [177, "subpackages"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[14, "attributes"], [56, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[129, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[173, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[174, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[175, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[176, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[177, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[178, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[179, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[180, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[181, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[182, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[183, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[184, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[185, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[186, "module-neural_compressor.version"]], "Dynamic Quantization": [[187, "dynamic-quantization"], [198, "dynamic-quantization"], [202, "dynamic-quantization"]], "Introduction": [[187, "introduction"], [188, "introduction"], [189, "introduction"], [190, "introduction"], [191, "introduction"], [192, "introduction"], [193, "introduction"], [194, "introduction"], [195, "introduction"], [196, "introduction"], [198, "introduction"], [202, "introduction"], [203, "introduction"], [206, "introduction"], [207, "introduction"], [208, "introduction"], [223, "introduction"], [224, "introduction"], [226, "introduction"], [227, "introduction"], [230, "introduction"], [231, "introduction"], [232, "introduction"], [234, "introduction"], [236, "introduction"], [239, "introduction"], [243, "introduction"], [245, "introduction"], [246, "introduction"], [247, "introduction"], [268, "introduction"], [269, "introduction"], [270, "introduction"], [282, "introduction"], [283, "introduction"], [284, "introduction"], [286, "introduction"], [288, "introduction"], [290, "introduction"], [292, "introduction"], [293, "introduction"], [294, "introduction"], [295, "introduction"], [296, "introduction"], [298, "introduction"]], "Getting Started with Dynamic Quantization": [[187, "getting-started-with-dynamic-quantization"]], "Examples": [[187, "examples"], [188, "examples"], [189, "examples"], [192, "examples"], [194, "examples"], [195, "examples"], [202, "examples"], [203, "examples"], [223, "examples"], [226, "examples"], [227, "examples"], [230, "examples"], [231, "examples"], [232, "examples"], [233, "examples"], [234, "examples"], [244, "examples"], [245, "examples"], [246, "examples"], [247, "examples"], [283, "examples"], [284, "examples"], [287, "examples"], [288, "examples"], [290, "examples"], [294, "examples"]], "Microscaling Quantization": [[188, "microscaling-quantization"], [247, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[188, "get-started-with-microscaling-quantization-api"], [247, "get-started-with-microscaling-quantization-api"]], "Reference": [[188, "reference"], [192, "reference"], [198, "reference"], [224, "reference"], [225, "reference"], [247, "reference"], [284, "reference"], [287, "reference"], [290, "reference"], [293, "reference"]], "PyTorch Mixed Precision": [[189, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[189, "mixed-precision-support-matrix"], [245, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[189, "hardware-and-software-requests-for-bf16"], [245, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[189, "hardware-and-software-requests-for-fp16"], [245, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[189, "accuracy-driven-mixed-precision"], [245, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[189, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[190, "pytorch-smooth-quantization"]], "Usage": [[190, "usage"], [192, "usage"], [195, "usage"], [254, "usage"], [274, "usage"], [274, "id2"], [274, "id6"], [274, "id9"], [274, "id16"], [274, "id19"], [274, "id22"], [274, "id25"], [293, "usage"], [294, "usage"], [294, "id1"], [296, "usage"], [296, "id2"], [296, "id4"], [296, "id6"], [296, "id8"], [296, "id10"], [296, "id12"], [296, "id14"], [296, "id16"], [296, "id18"], [296, "id20"], [296, "id22"]], "Fixed Alpha": [[190, "fixed-alpha"]], "Specify Quantization Rules": [[190, "specify-quantization-rules"], [191, "specify-quantization-rules"], [192, "specify-quantization-rules"], [194, "specify-quantization-rules"], [287, "specify-quantization-rules"]], "Validated Models": [[190, "validated-models"], [237, "validated-models"], [293, "validated-models"], [299, "validated-models"]], "Supported Framework Matrix": [[190, "supported-framework-matrix"], [293, "supported-framework-matrix"]], "PyTorch Static Quantization": [[191, "pytorch-static-quantization"]], "Get Started": [[191, "get-started"], [192, "get-started"], [194, "get-started"], [202, "get-started"], [229, "get-started"], [272, "get-started"], [287, "get-started"]], "Static Quantization with IPEX Backend": [[191, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[191, "usage-sample-with-ipex"]], "Model Examples": [[191, "model-examples"]], "Static Quantization with PT2E Backend": [[191, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[191, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[191, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[192, "pytorch-weight-only-quantization"]], "Supported Matrix": [[192, "supported-matrix"], [193, "supported-matrix"]], "Common arguments": [[192, "common-arguments"]], "RTN": [[192, "rtn"]], "GPTQ": [[192, "gptq"]], "AutoRound": [[192, "autoround"]], "AWQ": [[192, "awq"]], "TEQ": [[192, "teq"]], "HQQ": [[192, "hqq"]], "Saving and Loading": [[192, "saving-and-loading"]], "Torch": [[193, "torch"]], "Torch-like APIs": [[193, "torch-like-apis"]], "Quantization APIs": [[193, "quantization-apis"]], "Autotune API": [[193, "autotune-api"]], "Load API": [[193, "load-api"]], "Common Problems": [[193, "common-problems"]], "TensorFlow Quantization": [[194, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[194, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[194, "with-accuracy-aware-tuning"]], "Smooth Quant": [[195, "smooth-quant"], [293, "smooth-quant"]], "Using a Fixed alpha": [[195, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[195, "determining-the-alpha-through-auto-tuning"], [293, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[196, "tensorflow"], [227, "tensorflow"], [243, "tensorflow"], [295, "tensorflow"]], "API for TensorFlow": [[196, "api-for-tensorflow"]], "Support Matrix": [[196, "support-matrix"], [224, "support-matrix"], [250, "support-matrix"]], "Quantization Scheme": [[196, "quantization-scheme"]], "Quantization Approaches": [[196, "quantization-approaches"], [287, "quantization-approaches"]], "Post Training Static Quantization": [[196, "post-training-static-quantization"], [202, "post-training-static-quantization"], [287, "post-training-static-quantization"]], "Smooth Quantization": [[196, "smooth-quantization"], [198, "smooth-quantization"]], "Backend and Device": [[196, "backend-and-device"]], "AutoTune": [[197, "autotune"]], "Overview": [[197, "overview"], [275, "overview"], [297, "overview"]], "How it Works": [[197, "how-it-works"]], "Working with Autotune": [[197, "working-with-autotune"]], "Working with PyTorch Model": [[197, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[197, "working-with-tensorflow-model"]], "Quantization": [[198, "quantization"], [220, "quantization"], [286, "quantization"], [287, "quantization"]], "Quantization Fundamentals": [[198, "quantization-fundamentals"], [287, "quantization-fundamentals"], [293, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[198, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[198, "quantization-scheme-in-tensorflow"], [287, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[198, "quantization-scheme-in-pytorch"], [287, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[198, "quantization-scheme-in-ipex"], [287, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[198, "per-tensor-per-channel"], [293, "per-tensor-per-channel"]], "Per-tensor example": [[198, "per-tensor-example"], [293, "per-tensor-example"]], "Per-channel example": [[198, "per-channel-example"], [293, "per-channel-example"]], "Matmul quantization example": [[198, "matmul-quantization-example"], [293, "matmul-quantization-example"]], "Static Quantization": [[198, "static-quantization"]], "Per-channel limitation": [[198, "per-channel-limitation"], [293, "per-channel-limitation"]], "Weight Only Quantization": [[198, "weight-only-quantization"]], "Quantization Aware Training": [[198, "quantization-aware-training"], [244, "quantization-aware-training"], [287, "quantization-aware-training"], [287, "id1"]], "Accuracy Aware Tuning": [[198, "accuracy-aware-tuning"], [287, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[199, "intel-neural-compressor-documentation"], [300, "intel-neural-compressor-documentation"]], "Sections": [[199, "sections"], [300, "sections"]], "Contributor Covenant Code of Conduct": [[200, "contributor-covenant-code-of-conduct"], [201, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[200, "our-pledge"]], "Our Standards": [[200, "our-standards"]], "Our Responsibilities": [[200, "our-responsibilities"]], "Scope": [[200, "scope"]], "Enforcement": [[200, "enforcement"]], "Attribution": [[200, "attribution"]], "Contribution Guidelines": [[201, "contribution-guidelines"]], "Create Pull Request": [[201, "create-pull-request"]], "Step-by-Step guidelines": [[201, "step-by-step-guidelines"]], "Pull Request Checklist": [[201, "pull-request-checklist"]], "Pull Request Template": [[201, "pull-request-template"]], "Pull Request Acceptance Criteria": [[201, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[201, "pull-request-status-checks-overview"]], "Support": [[201, "support"]], "FX": [[202, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[202, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[202, "post-training-dynamic-quantization"], [287, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[202, "quantization-aware-training"]], "Note": [[202, "note"]], "Details": [[202, "details"]], "Common Problem": [[202, "common-problem"]], "Static Quantization & Quantization Aware Training": [[202, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[203, "neural-architecture-search"]], "Basic NAS": [[203, "basic-nas"]], "Dynamic NAS": [[203, "dynamic-nas"]], "NAS Support Matrix": [[203, "nas-support-matrix"]], "Get Started with NAS API": [[203, "get-started-with-nas-api"]], "Basic Usage": [[203, "basic-usage"]], "1. Python code + YAML": [[203, "python-code-yaml"]], "2. Python code only": [[203, "python-code-only"]], "Advanced Usage (Custom NAS)": [[203, "advanced-usage-custom-nas"]], "Security Policy": [[204, "security-policy"]], "Report a Vulnerability": [[204, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[205, "intel-neural-compressor"], [265, "intel-neural-compressor"]], "What\u2019s New": [[205, "what-s-new"]], "Installation": [[205, "installation"], [240, "installation"], [240, "id1"], [259, "installation"], [267, "installation"], [272, "installation"]], "Install from pypi": [[205, "install-from-pypi"], [267, "install-from-pypi"]], "Getting Started": [[205, "getting-started"], [237, "getting-started"], [267, "getting-started"]], "Weight-Only Quantization (LLMs)": [[205, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[205, "static-quantization-non-llms"]], "Documentation": [[205, "documentation"]], "Selected Publications/Events": [[205, "selected-publications-events"]], "Additional Content": [[205, "additional-content"]], "Communication": [[205, "communication"]], "Adaptor": [[206, "adaptor"], [209, "adaptor"]], "Adaptor Support Matrix": [[206, "adaptor-support-matrix"]], "Working Flow": [[206, "working-flow"], [287, "working-flow"]], "Get Started with Adaptor API": [[206, "get-started-with-adaptor-api"]], "Query API": [[206, "query-api"]], "Background": [[206, "background"], [225, "background"]], "Query API Introduction": [[206, "query-api-introduction"]], "Example of Adding a New Backend Support": [[206, "example-of-adding-a-new-backend-support"]], "Capability": [[206, "capability"]], "Implement ONNXRTAdaptor Class": [[206, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[207, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[207, "api-list-that-need-to-implement"]], "Design the framework YAML": [[207, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[207, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[207, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[207, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[207, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[207, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[208, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[208, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[208, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[208, "use-the-new-data-type"]], "Summary": [[208, "summary"]], "ONNX Runtime": [[210, "onnx-runtime"]], "Torch Utils": [[211, "torch-utils"]], "API Document Example": [[212, "api-document-example"]], "APIs": [[213, "apis"]], "Benchmark": [[214, "benchmark"], [244, "benchmark"], [286, "benchmark"]], "Compression": [[215, "compression"]], "Config": [[216, "config"]], "Mix Precision": [[217, "mix-precision"], [244, "mix-precision"]], "Model": [[218, "model"], [246, "model"], [268, "model"], [270, "model"]], "Objective": [[219, "objective"], [278, "objective"], [279, "objective"], [280, "objective"], [282, "objective"]], "Strategy": [[221, "strategy"]], "Training": [[222, "training"]], "Benchmarking": [[223, "benchmarking"]], "Benchmark Support Matrix": [[223, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[223, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[224, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[224, "calibration-algorithms"]], "INC Coding Conventions": [[225, "inc-coding-conventions"]], "Rules": [[225, "rules"]], "Imports": [[225, "imports"]], "Strings": [[225, "strings"]], "Logger": [[225, "logger"]], "Type Annotations": [[225, "type-annotations"]], "Comments": [[225, "comments"]], "TODO Comments": [[225, "todo-comments"]], "Public and Internal Interfaces": [[225, "public-and-internal-interfaces"]], "Folder structure": [[225, "folder-structure"]], "Recommend VS Code settings.json": [[225, "recommend-vs-code-settings-json"]], "DataLoader": [[226, "dataloader"]], "Supported Framework Dataloader Matrix": [[226, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[226, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[226, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[226, "build-custom-dataloader-with-python-api"]], "Dataset": [[227, "dataset"]], "Supported Framework Dataset Matrix": [[227, "supported-framework-dataset-matrix"]], "PyTorch": [[227, "pytorch"], [243, "pytorch"], [289, "pytorch"]], "MXNet": [[227, "mxnet"], [243, "mxnet"], [295, "mxnet"]], "ONNXRT": [[227, "onnxrt"], [243, "onnxrt"], [295, "onnxrt"]], "Get start with Dataset API": [[227, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[227, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[227, "user-specific-dataset"]], "Design": [[228, "design"], [296, "design"], [296, "id1"], [296, "id3"], [296, "id5"], [296, "id7"], [296, "id9"], [296, "id11"], [296, "id13"], [296, "id15"], [296, "id17"], [296, "id19"], [296, "id21"]], "Architecture": [[228, "architecture"], [239, "architecture"]], "Workflow": [[228, "workflow"]], "Diagnosis": [[229, "diagnosis"]], "Diagnosis Introduction": [[229, "diagnosis-introduction"]], "Supported Feature Matrix": [[229, "supported-feature-matrix"], [232, "supported-feature-matrix"], [236, "supported-feature-matrix"], [239, "supported-feature-matrix"], [286, "supported-feature-matrix"], [287, "supported-feature-matrix"], [294, "supported-feature-matrix"], [298, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[229, "install-intel-neural-compressor"]], "Modify script": [[229, "modify-script"]], "Quantization diagnosis": [[229, "quantization-diagnosis"]], "Benchmark diagnosis": [[229, "benchmark-diagnosis"]], "Example": [[229, "example"], [243, "example"], [250, "example"], [254, "example"], [282, "example"]], "Prepare dataset": [[229, "prepare-dataset"]], "Run quantization script": [[229, "run-quantization-script"]], "Run benchmark script": [[229, "run-benchmark-script"]], "See quantization data": [[229, "see-quantization-data"]], "How to do diagnosis": [[229, "how-to-do-diagnosis"]], "Parameter description": [[229, "parameter-description"]], "Diagnosis suggestions": [[229, "diagnosis-suggestions"]], "Fallback setting example": [[229, "fallback-setting-example"]], "See profiling data": [[229, "see-profiling-data"]], "Distillation": [[230, "distillation"], [244, "distillation"], [286, "distillation"]], "Knowledge Distillation": [[230, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[230, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[230, "self-distillation"]], "Distillation Support Matrix": [[230, "distillation-support-matrix"]], "Get Started with Distillation API": [[230, "get-started-with-distillation-api"]], "Distillation for Quantization": [[231, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[231, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[231, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[232, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[232, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[232, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[232, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[232, "horovodrun-execution"]], "Security": [[232, "security"]], "PyTorch Examples:": [[232, "pytorch-examples"]], "TensorFlow Examples:": [[232, "tensorflow-examples"]], "Example List": [[233, "example-list"]], "Release Data": [[233, "release-data"]], "Export": [[234, "export"]], "Supported Framework Model Matrix": [[234, "supported-framework-model-matrix"], [246, "supported-framework-model-matrix"], [247, "supported-framework-model-matrix"], [288, "supported-framework-model-matrix"], [290, "supported-framework-model-matrix"]], "PyTorch Model": [[234, "pytorch-model"]], "FP32 Model Export": [[234, "fp32-model-export"], [234, "id1"]], "INT8 Model Export": [[234, "int8-model-export"], [234, "id2"]], "Tensorflow Model": [[234, "tensorflow-model"]], "Appendix": [[234, "appendix"]], "Supported quantized ops": [[234, "supported-quantized-ops"]], "Frequently Asked Questions": [[235, "frequently-asked-questions"]], "Common Build Issues": [[235, "common-build-issues"]], "Issue 1:": [[235, "issue-1"]], "Issue 2:": [[235, "issue-2"]], "Issue 3:": [[235, "issue-3"]], "Issue 4:": [[235, "issue-4"]], "Framework YAML Configuration Files": [[236, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[236, "get-started-with-framework-yaml-files"]], "Quick Samples": [[237, "quick-samples"]], "Quantization with Python API": [[237, "quantization-with-python-api"], [267, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[238, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[238, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[238, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[239, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[240, "prerequisites"], [272, "prerequisites"], [273, "prerequisites"]], "Install from Binary": [[240, "install-from-binary"]], "Install from Source": [[240, "install-from-source"], [267, "install-from-source"]], "Install from AI Kit": [[240, "install-from-ai-kit"]], "System Requirements": [[240, "system-requirements"]], "Validated Hardware Environment": [[240, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[240, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[240, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[240, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[240, "validated-software-environment"]], "Legal Information": [[241, "legal-information"]], "License": [[241, "license"]], "Citation": [[241, "citation"]], "Trademarks": [[241, "trademarks"]], "LLMs Quantization Recipes": [[242, "llms-quantization-recipes"]], "Large Language Models Recipes": [[242, "large-language-models-recipes"]], "Large Language Models Accuracy": [[242, "large-language-models-accuracy"]], "Metrics": [[243, "metrics"]], "Supported Built-in Metric Matrix": [[243, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[243, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[243, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[243, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[244, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[244, "model-quantization"]], "Post-training Quantization": [[244, "post-training-quantization"]], "Pruning": [[244, "pruning"], [284, "pruning"], [286, "pruning"]], "Orchestration": [[244, "orchestration"]], "Mixed Precision": [[245, "mixed-precision"]], "During quantization mixed precision": [[245, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[245, "get-started-with-mixed-precision-api"]], "Neural Coder": [[248, "neural-coder"], [265, "neural-coder"], [265, "id1"]], "What do we offer?": [[248, "what-do-we-offer"]], "Getting Started!": [[248, "getting-started"], [259, "getting-started"]], "Jupyter Lab Extension": [[248, "jupyter-lab-extension"]], "Python Launcher": [[248, "python-launcher"], [253, "python-launcher"]], "Python API": [[248, "python-api"]], "Contact": [[248, "contact"], [272, "contact"]], "AWS Amazon SageMaker Support": [[249, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[249, "start-jupyter-lab-3"]], "For SageMaker Studio": [[249, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[249, "for-sagemaker-notebook-instance"]], "Installation Guide": [[249, "installation-guide"]], "BigDL Nano Support": [[250, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[251, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[251, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[251, "install-numa-controller"]], "Environment Variables": [[251, "environment-variables"]], "Frequency Governers": [[251, "frequency-governers"]], "Neural Coder as Python API": [[252, "neural-coder-as-python-api"]], "Enable": [[252, "enable"]], "Bench": [[252, "bench"]], "SuperBench": [[252, "superbench"]], "Quick-Start": [[253, "quick-start"]], "Launcher Arguments (Optional)": [[253, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[254, "neural-coder-for-quantization"]], "Features Supported": [[254, "features-supported"]], "Models Supported": [[254, "models-supported"]], "PyPI distribution:": [[254, "pypi-distribution"]], "Supported Optimization Features": [[255, "supported-optimization-features"]], "v0.4": [[256, "v0-4"]], "Highlights": [[256, "highlights"]], "Others": [[256, "others"]], "Changelog": [[257, "changelog"], [261, "changelog"]], "neural_compressor_ext_lab": [[258, "neural-compressor-ext-lab"]], "Requirements": [[258, "requirements"], [262, "requirements"], [268, "requirements"], [269, "requirements"], [270, "requirements"], [278, "requirements"]], "Install": [[258, "install"]], "Uninstall": [[258, "uninstall"]], "Contributing": [[258, "contributing"], [262, "contributing"]], "Development install": [[258, "development-install"], [262, "development-install"]], "Development uninstall": [[258, "development-uninstall"], [262, "development-uninstall"]], "Packaging the extension": [[258, "packaging-the-extension"], [262, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[259, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[259, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[259, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[259, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[260, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[260, "manual-release"], [263, "manual-release"]], "Python package": [[260, "python-package"], [263, "python-package"]], "NPM package": [[260, "npm-package"], [263, "npm-package"]], "Automated releases with the Jupyter Releaser": [[260, "automated-releases-with-the-jupyter-releaser"], [263, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[260, "publishing-to-conda-forge"], [263, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[262, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[263, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[264, "change-log"]], "[Unreleased]": [[264, "unreleased"]], "Background Introduction": [[265, "background-introduction"]], "Neural Coder Extension in VSCode": [[265, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[265, "neural-coder-extension-usage"]], "1. Open": [[265, "open"]], "2. Search": [[265, "search"]], "3. Setting": [[265, "setting"]], "4. Icon": [[265, "icon"]], "5. optimization (quantization)": [[265, "optimization-quantization"]], "5.1 Enable": [[265, "enable"]], "5.2 Auto": [[265, "auto"]], "Welcome to your VS Code Extension": [[266, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[266, "what-s-in-the-folder"]], "Setup": [[266, "setup"]], "Get up and running straight away": [[266, "get-up-and-running-straight-away"]], "Make changes": [[266, "make-changes"]], "Explore the API": [[266, "explore-the-api"]], "Run tests": [[266, "run-tests"]], "Go further": [[266, "go-further"]], "Neural Insights": [[267, "neural-insights"]], "Start the Neural Insights": [[267, "start-the-neural-insights"]], "Tensor dump examples": [[267, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[267, "step-by-step-diagnosis-example"]], "Research Collaborations": [[267, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[268, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [270, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[268, "preparation"], [269, "preparation"], [270, "preparation"], [292, "preparation"]], "Running the quantization": [[268, "running-the-quantization"], [269, "running-the-quantization"], [270, "running-the-quantization"]], "Analyzing the result of quantization": [[268, "analyzing-the-result-of-quantization"], [270, "analyzing-the-result-of-quantization"]], "Weights summary": [[268, "weights-summary"]], "Activations summary": [[268, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[269, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[269, "source"], [270, "source"]], "Prepare the dataset": [[270, "prepare-the-dataset"]], "Analyzing weight histograms": [[270, "analyzing-weight-histograms"]], "Open Neural Insights": [[270, "open-neural-insights"]], "Getting Started with Create React App": [[271, "getting-started-with-create-react-app"]], "Available Scripts": [[271, "available-scripts"]], "npm start": [[271, "npm-start"]], "npm test": [[271, "npm-test"]], "npm run build": [[271, "npm-run-build"]], "npm run eject": [[271, "npm-run-eject"]], "Learn More": [[271, "learn-more"], [272, "learn-more"]], "Code Splitting": [[271, "code-splitting"]], "Analyzing the Bundle Size": [[271, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[271, "making-a-progressive-web-app"]], "Advanced Configuration": [[271, "advanced-configuration"]], "Deployment": [[271, "deployment"]], "npm run build fails to minify": [[271, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[272, "what-s-neural-solution"]], "Why Neural Solution?": [[272, "why-neural-solution"]], "How does Neural Solution Work?": [[272, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[272, "method-1-using-pip"]], "Method 2. Building from source:": [[272, "method-2-building-from-source"]], "End-to-end examples": [[272, "end-to-end-examples"]], "Get started": [[273, "get-started"]], "Install Neural Solution": [[273, "install-neural-solution"]], "Method 1. Using pip": [[273, "method-1-using-pip"]], "Method 2. Building from source": [[273, "method-2-building-from-source"]], "Start service": [[273, "start-service"]], "Submit task": [[273, "submit-task"]], "Query task status": [[273, "query-task-status"]], "Stop service": [[273, "stop-service"]], "Inspect logs": [[273, "inspect-logs"]], "Manage resource": [[273, "manage-resource"], [278, "manage-resource"], [279, "manage-resource"]], "Node States": [[273, "node-states"]], "Query cluster": [[273, "query-cluster"]], "Add node": [[273, "add-node"]], "Remove node": [[273, "remove-node"]], "Neural Solution API": [[274, "neural-solution-api"]], "Base URL": [[274, "base-url"]], "Endpoints": [[274, "endpoints"]], "GET /": [[274, "get"]], "Description": [[274, "description"], [274, "id1"], [274, "id4"], [274, "id8"], [274, "id12"], [274, "id15"], [274, "id18"], [274, "id21"], [274, "id24"]], "Responses": [[274, "responses"], [274, "id3"], [274, "id7"], [274, "id11"], [274, "id14"], [274, "id17"], [274, "id20"], [274, "id23"], [274, "id26"]], "POST /task/submit": [[274, "post-task-submit"]], "Parameters": [[274, "parameters"], [274, "id5"], [274, "id10"], [274, "id13"]], "GET /task/status/{task_id}": [[274, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[274, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[274, "websocket-task-screen-task-id"]], "GET /ping": [[274, "get-ping"]], "GET /cluster": [[274, "get-cluster"]], "GET /download/{task_id}": [[274, "get-download-task-id"]], "GET /description": [[274, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[275, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[275, "contents"]], "Workflow of OaaS": [[275, "workflow-of-oaas"]], "Class definition diagram": [[275, "class-definition-diagram"]], "Extensibility": [[275, "extensibility"]], "Task request description": [[276, "task-request-description"]], "Examples List": [[277, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[278, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[278, "start-the-neural-solution-service"], [279, "start-the-neural-solution-service"], [280, "start-the-neural-solution-service"]], "Submit optimization task": [[278, "submit-optimization-task"], [279, "submit-optimization-task"], [280, "submit-optimization-task"]], "Query optimization result": [[278, "query-optimization-result"], [279, "query-optimization-result"], [280, "query-optimization-result"]], "Download optimized model": [[278, "download-optimized-model"], [279, "download-optimized-model"]], "Stop the service": [[278, "stop-the-service"], [279, "stop-the-service"], [280, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[279, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[280, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[281, "client"]], "Single Objective": [[282, "single-objective"]], "Multiple Objectives": [[282, "multiple-objectives"]], "Objective Support Matrix": [[282, "objective-support-matrix"]], "Get Started with Objective API": [[282, "get-started-with-objective-api"]], "Config Single Objective": [[282, "config-single-objective"]], "Config Multiple Objectives": [[282, "config-multiple-objectives"]], "Optimization Orchestration": [[283, "optimization-orchestration"]], "One-shot": [[283, "one-shot"]], "Orchestration Support Matrix": [[283, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[283, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[284, "neural-network-pruning"]], "Pruning Patterns": [[284, "pruning-patterns"]], "Pruning Criteria": [[284, "pruning-criteria"]], "Pruning Types": [[284, "pruning-types"]], "Pruning Schedules": [[284, "pruning-schedules"]], "Pruning Scope": [[284, "pruning-scope"]], "Sparsity Decay Types": [[284, "sparsity-decay-types"]], "Regularization": [[284, "regularization"]], "Large Language Model Pruning": [[284, "large-language-model-pruning"]], "Pruning Support Matrix": [[284, "pruning-support-matrix"]], "Get Started with Pruning API": [[284, "get-started-with-pruning-api"]], "Training-aware pruning API": [[284, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[284, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[284, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[284, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[285, "full-publications-events-82"]], "2024 (3)": [[285, "id1"]], "2023 (25)": [[285, "id2"]], "2022 (35)": [[285, "id3"]], "2021 (15)": [[285, "id4"]], "2018 - 2020 (4)": [[285, "id5"]], "Pythonic Style Access for Configurations": [[286, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[286, "pythonic-api-for-user-configurations"], [286, "id1"]], "Pythonic API for Framework Configurations": [[286, "pythonic-api-for-framework-configurations"], [286, "id2"]], "Get Started with Pythonic API for Configurations": [[286, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[286, "nas"]], "Quantization Introduction": [[287, "quantization-introduction"]], "Quantization Support Matrix": [[287, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[287, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[287, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[287, "post-training-quantization"]], "Specify Quantization Recipes": [[287, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[287, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[288, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[288, "pytorch-framework-example"]], "ONNX Runtime framework example": [[288, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[289, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[289, "tensorflow"]], "Weight Only Quantization (WOQ)": [[290, "weight-only-quantization-woq"]], "Quantization Capability": [[290, "quantization-capability"]], "Export Compressed Model": [[290, "export-compressed-model"]], "User Code Example": [[290, "user-code-example"]], "WOQ Algorithms Tuning": [[290, "woq-algorithms-tuning"]], "User code example": [[290, "id1"]], "Release": [[291, "release"]], "Release Notes": [[291, "release-notes"]], "Known Issues": [[291, "known-issues"]], "Incompatible Changes": [[291, "incompatible-changes"]], "SigOpt Strategy": [[292, "sigopt-strategy"]], "SigOpt Platform": [[292, "sigopt-platform"]], "Neural Compressor Configuration": [[292, "neural-compressor-configuration"]], "Performance": [[292, "performance"]], "Benefit of SigOpt Strategy": [[292, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[292, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[293, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[293, "smoothquant"]], "Our enhancement:": [[293, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[293, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[293, "engineering"]], "Using a fixed alpha": [[293, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[293, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[293, "auto-tune-the-alpha-for-each-layer-block"]], "TensorBoard": [[294, "tensorboard"]], "Get Started with TensorBoard": [[294, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[294, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[294, "tensorflow-tensorboard"]], "PyTorch Examples": [[294, "pytorch-examples"]], "TensorFlow Examples": [[294, "tensorflow-examples"]], "Transform": [[295, "transform"]], "Transform Support List": [[295, "transform-support-list"]], "Pytorch": [[295, "pytorch"]], "Tuning Strategies": [[296, "tuning-strategies"]], "Strategy Design": [[296, "strategy-design"]], "Tuning Space": [[296, "tuning-space"]], "Exit Policy": [[296, "exit-policy"]], "Accuracy Criteria": [[296, "accuracy-criteria"]], "Tuning Process": [[296, "tuning-process"]], "Tuning Algorithms": [[296, "tuning-algorithms"]], "Auto": [[296, "auto"]], "Conservative Tuning": [[296, "conservative-tuning"]], "Basic": [[296, "basic"]], "MSE": [[296, "mse"]], "MSE_V2": [[296, "mse-v2"]], "HAWQ_V2": [[296, "hawq-v2"]], "Bayesian": [[296, "bayesian"]], "Exhaustive": [[296, "exhaustive"]], "Random": [[296, "random"]], "SigOpt": [[296, "sigopt"]], "TPE": [[296, "tpe"]], "Distributed Tuning": [[296, "distributed-tuning"]], "Customize a New Tuning Strategy": [[296, "customize-a-new-tuning-strategy"]], "User Guide": [[297, "user-guide"]], "Python-based APIs": [[297, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[297, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[297, "advanced-topics"]], "Innovations for Productivity": [[297, "innovations-for-productivity"]], "User YAML Configuration Files": [[298, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[298, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[299, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[299, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[299, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[299, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[299, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[299, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[299, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[299, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[299, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[299, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.algorithm.algorithm"], [2, "module-neural_compressor.algorithm.fast_bias_correction"], [3, "module-neural_compressor.algorithm"], [4, "module-neural_compressor.algorithm.smooth_quant"], [5, "module-neural_compressor.algorithm.weight_correction"], [6, "module-neural_compressor.benchmark"], [7, "module-neural_compressor.config"], [8, "module-neural_compressor.contrib"], [9, "module-neural_compressor.contrib.strategy"], [10, "module-neural_compressor.contrib.strategy.sigopt"], [11, "module-neural_compressor.contrib.strategy.tpe"], [12, "module-neural_compressor.data.datasets.bert_dataset"], [13, "module-neural_compressor.data.datasets.coco_dataset"], [14, "module-neural_compressor.data.datasets.dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset"], [16, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [17, "module-neural_compressor.data.datasets.imagenet_dataset"], [18, "module-neural_compressor.data.datasets"], [19, "module-neural_compressor.data.datasets.style_transfer_dataset"], [20, "module-neural_compressor.data.filters.coco_filter"], [21, "module-neural_compressor.data.filters.filter"], [22, "module-neural_compressor.data.filters"], [23, "module-neural_compressor.data"], [24, "module-neural_compressor.data.transforms.imagenet_transform"], [25, "module-neural_compressor.data.transforms"], [26, "module-neural_compressor.data.transforms.postprocess"], [27, "module-neural_compressor.data.transforms.tokenization"], [28, "module-neural_compressor.data.transforms.transform"], [29, "module-neural_compressor.experimental.benchmark"], [30, "module-neural_compressor.experimental.common.criterion"], [31, "module-neural_compressor.experimental.common.dataloader"], [32, "module-neural_compressor.experimental.common"], [33, "module-neural_compressor.experimental.common.metric"], [34, "module-neural_compressor.experimental.common.model"], [35, "module-neural_compressor.experimental.common.optimizer"], [36, "module-neural_compressor.experimental.common.postprocess"], [37, "module-neural_compressor.experimental.common.torch_utils"], [38, "module-neural_compressor.experimental.component"], [39, "module-neural_compressor.experimental.compression"], [40, "module-neural_compressor.experimental.contrib"], [41, "module-neural_compressor.experimental.contrib.strategy"], [42, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [43, "module-neural_compressor.experimental.contrib.strategy.tpe"], [44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [45, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [47, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [48, "module-neural_compressor.experimental.data.dataloaders"], [49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [52, "module-neural_compressor.experimental.data.dataloaders.sampler"], [53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [54, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [55, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [56, "module-neural_compressor.experimental.data.datasets.dataset"], [57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [60, "module-neural_compressor.experimental.data.datasets"], [61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [62, "module-neural_compressor.experimental.data.filters.coco_filter"], [63, "module-neural_compressor.experimental.data.filters.filter"], [64, "module-neural_compressor.experimental.data.filters"], [65, "module-neural_compressor.experimental.data"], [66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [67, "module-neural_compressor.experimental.data.transforms"], [68, "module-neural_compressor.experimental.data.transforms.tokenization"], [69, "module-neural_compressor.experimental.data.transforms.transform"], [70, "module-neural_compressor.experimental.distillation"], [71, "module-neural_compressor.experimental.export"], [72, "module-neural_compressor.experimental.export.qlinear2qdq"], [73, "module-neural_compressor.experimental.export.tf2onnx"], [74, "module-neural_compressor.experimental.export.torch2onnx"], [75, "module-neural_compressor.experimental.graph_optimization"], [76, "module-neural_compressor.experimental"], [77, "module-neural_compressor.experimental.metric.bleu"], [78, "module-neural_compressor.experimental.metric.bleu_util"], [79, "module-neural_compressor.experimental.metric.coco_label_map"], [80, "module-neural_compressor.experimental.metric.coco_tools"], [81, "module-neural_compressor.experimental.metric.evaluate_squad"], [82, "module-neural_compressor.experimental.metric.f1"], [83, "module-neural_compressor.experimental.metric"], [84, "module-neural_compressor.experimental.metric.metric"], [85, "module-neural_compressor.experimental.mixed_precision"], [86, "module-neural_compressor.experimental.model_conversion"], [87, "module-neural_compressor.experimental.nas.basic_nas"], [88, "module-neural_compressor.experimental.nas.dynas"], [89, "module-neural_compressor.experimental.nas"], [90, "module-neural_compressor.experimental.nas.nas"], [91, "module-neural_compressor.experimental.nas.nas_utils"], [92, "module-neural_compressor.experimental.nas.search_algorithms"], [93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [95, "module-neural_compressor.experimental.pruner_legacy"], [96, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [98, "module-neural_compressor.experimental.pruner_legacy.pruner"], [99, "module-neural_compressor.experimental.pruning"], [100, "module-neural_compressor.experimental.pruning_recipes"], [101, "module-neural_compressor.experimental.pruning_recipes.patterns"], [102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [104, "module-neural_compressor.experimental.pruning_v2"], [105, "module-neural_compressor.experimental.pytorch_pruner"], [106, "module-neural_compressor.experimental.pytorch_pruner.logger"], [107, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [109, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [110, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [112, "module-neural_compressor.experimental.quantization"], [113, "module-neural_compressor.experimental.scheduler"], [114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [115, "module-neural_compressor.experimental.strategy.basic"], [116, "module-neural_compressor.experimental.strategy.bayesian"], [117, "module-neural_compressor.experimental.strategy.exhaustive"], [118, "module-neural_compressor.experimental.strategy"], [119, "module-neural_compressor.experimental.strategy.mse"], [120, "module-neural_compressor.experimental.strategy.mse_v2"], [121, "module-neural_compressor.experimental.strategy.random"], [122, "module-neural_compressor.experimental.strategy.strategy"], [123, "module-neural_compressor.experimental.strategy.utils.constant"], [124, "module-neural_compressor.experimental.strategy.utils"], [125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [126, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [128, "module-neural_compressor.experimental.strategy.utils.utility"], [129, "module-neural_compressor"], [130, "module-neural_compressor.metric.bleu"], [131, "module-neural_compressor.metric.bleu_util"], [132, "module-neural_compressor.metric.coco_label_map"], [133, "module-neural_compressor.metric.coco_tools"], [134, "module-neural_compressor.metric.evaluate_squad"], [135, "module-neural_compressor.metric.f1"], [136, "module-neural_compressor.metric"], [137, "module-neural_compressor.metric.metric"], [138, "module-neural_compressor.mix_precision"], [139, "module-neural_compressor.model.base_model"], [140, "module-neural_compressor.model"], [141, "module-neural_compressor.model.keras_model"], [142, "module-neural_compressor.model.model"], [143, "module-neural_compressor.model.mxnet_model"], [144, "module-neural_compressor.model.nets_factory"], [145, "module-neural_compressor.model.onnx_model"], [146, "module-neural_compressor.model.tensorflow_model"], [147, "module-neural_compressor.model.torch_model"], [148, "module-neural_compressor.objective"], [149, "module-neural_compressor.profiling"], [150, "module-neural_compressor.quantization"], [151, "module-neural_compressor.strategy.auto"], [152, "module-neural_compressor.strategy.auto_mixed_precision"], [153, "module-neural_compressor.strategy.basic"], [154, "module-neural_compressor.strategy.bayesian"], [155, "module-neural_compressor.strategy.conservative"], [156, "module-neural_compressor.strategy.exhaustive"], [157, "module-neural_compressor.strategy.hawq_v2"], [158, "module-neural_compressor.strategy"], [159, "module-neural_compressor.strategy.mse"], [160, "module-neural_compressor.strategy.mse_v2"], [161, "module-neural_compressor.strategy.random"], [162, "module-neural_compressor.strategy.strategy"], [163, "module-neural_compressor.strategy.utils.constant"], [164, "module-neural_compressor.strategy.utils"], [165, "module-neural_compressor.strategy.utils.tuning_sampler"], [166, "module-neural_compressor.strategy.utils.tuning_space"], [167, "module-neural_compressor.strategy.utils.tuning_structs"], [168, "module-neural_compressor.strategy.utils.utility"], [169, "module-neural_compressor.training"], [170, "module-neural_compressor.utils.collect_layer_histogram"], [171, "module-neural_compressor.utils.constant"], [172, "module-neural_compressor.utils.create_obj_from_config"], [173, "module-neural_compressor.utils.export"], [174, "module-neural_compressor.utils.export.qlinear2qdq"], [175, "module-neural_compressor.utils.export.tf2onnx"], [176, "module-neural_compressor.utils.export.torch2onnx"], [177, "module-neural_compressor.utils"], [178, "module-neural_compressor.utils.kl_divergence"], [179, "module-neural_compressor.utils.load_huggingface"], [180, "module-neural_compressor.utils.logger"], [181, "module-neural_compressor.utils.neural_insights_utils"], [182, "module-neural_compressor.utils.options"], [183, "module-neural_compressor.utils.pytorch"], [184, "module-neural_compressor.utils.utility"], [185, "module-neural_compressor.utils.weights_details"], [186, "module-neural_compressor.version"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[2, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[4, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[5, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[7, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[7, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[7, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[7, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[7, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[7, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[10, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[11, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[15, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[19, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[26, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TRANSFORMS"], [28, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[31, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[33, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[36, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[38, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[42, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[43, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[44, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[49, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[51, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[57, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[61, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [69, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[70, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[75, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[78, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[84, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[84, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[85, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[86, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[87, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[88, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[93, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[94, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[96, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[97, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[112, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[113, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[114, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[115, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[117, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[119, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[120, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[121, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[127, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[129, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[131, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[137, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[137, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[137, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[137, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[137, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[138, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[139, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[141, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[142, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[142, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[143, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[144, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[145, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[148, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[150, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[151, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[152, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[153, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[155, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[156, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[157, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[159, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[160, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[161, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[167, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[169, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[169, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[169, "neural_compressor.training.fit"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[169, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[170, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[173, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[174, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[174, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[174, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[175, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[175, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[175, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[176, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[176, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[177, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[178, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[178, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[179, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[179, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[179, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[179, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[180, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[180, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[181, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[181, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[181, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[181, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[181, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[182, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[182, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[183, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[183, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[183, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[183, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[183, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[184, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[184, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[185, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[185, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[185, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[186, "module-neural_compressor.version"]]}})